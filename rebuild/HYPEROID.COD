;	Static Name Aliases
;
;	$S1346_dwSeed	EQU	dwSeed
;	$S1347_nScoreLen	EQU	nScoreLen
;	$S1348_szScore	EQU	szScore
;	$S1349_rectScoreClip	EQU	rectScoreClip
;	$S1350_rectShotClip	EQU	rectShotClip
;	$S1351_Player	EQU	Player
;	$S1352_Spinner	EQU	Spinner
;	$S1353_Swarmer	EQU	Swarmer
;	$S1354_Hunter	EQU	Hunter
;	$S1355_Bonus	EQU	Bonus
;	$S1503_nNextBonus	EQU	nNextBonus
;	$S1574_nNextHunter	EQU	nNextHunter
;	$S1612_nNextSwarmer	EQU	nNextSwarmer
;	$S1644_nNextSpinner	EQU	nNextSpinner
;	$S1779_nBombing	EQU	nBombing
;	$S1780_nShotDelay	EQU	nShotDelay
	TITLE   HYPEROID.C
	.8087
INCLUDELIB	MLIBCE
HYPEROID_TEXT	SEGMENT  WORD PUBLIC 'CODE'
HYPEROID_TEXT	ENDS
_DATA	SEGMENT  WORD PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT  WORD PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT  WORD PUBLIC 'BSS'
_BSS	ENDS
DGROUP	GROUP	CONST, _BSS, _DATA
	ASSUME DS: DGROUP, SS: DGROUP
EXTRN	__acrtused:ABS
EXTRN	SPINLETTERS:FAR
EXTRN	SETTIMER:FAR
EXTRN	CREATEHYPEROIDPALETTE:FAR
EXTRN	KILLTIMER:FAR
EXTRN	CREATEHYPEROIDCLASS:FAR
EXTRN	GETSYSTEMMETRICS:FAR
EXTRN	GETOBJECT:FAR
EXTRN	LOADBITMAP:FAR
EXTRN	DRAWICON:FAR
EXTRN	GETMESSAGE:FAR
EXTRN	CREATEHYPEROIDWINDOW:FAR
EXTRN	DELETEOBJECT:FAR
EXTRN	GETWINDOWDC:FAR
EXTRN	ISICONIC:FAR
EXTRN	TRANSLATEMESSAGE:FAR
EXTRN	GETDC:FAR
EXTRN	SELECTOBJECT:FAR
EXTRN	DISPATCHMESSAGE:FAR
EXTRN	SAVEHYPEROIDWINDOWPOS:FAR
EXTRN	RELEASEDC:FAR
EXTRN	GETHYPEROIDINI:FAR
EXTRN	ISZOOMED:FAR
EXTRN	LOADICON:FAR
EXTRN	CREATECOMPATIBLEDC:FAR
EXTRN	DELETEDC:FAR
EXTRN	_sin:FAR
EXTRN	MOVETO:FAR
EXTRN	GETSYSCOLOR:FAR
EXTRN	LINETO:FAR
EXTRN	SELECTPALETTE:FAR
EXTRN	ABOUTHYPEROID:FAR
EXTRN	REALIZEPALETTE:FAR
EXTRN	MULDIV:FAR
EXTRN	__aFftol:FAR
EXTRN	POLYLINE:FAR
EXTRN	FILLRECT:FAR
EXTRN	SETMAPMODE:FAR
EXTRN	__aFulmul:FAR
EXTRN	__aFlmul:FAR
EXTRN	_wsprintf:FAR
EXTRN	PATBLT:FAR
EXTRN	SETWINDOWEXT:FAR
EXTRN	BITBLT:FAR
EXTRN	SETVIEWPORTORG:FAR
EXTRN	__aFldiv:FAR
EXTRN	BEGINPAINT:FAR
EXTRN	DEFWINDOWPROC:FAR
EXTRN	ENDPAINT:FAR
EXTRN	SETVIEWPORTEXT:FAR
EXTRN	POSTQUITMESSAGE:FAR
EXTRN	SETPIXEL:FAR
EXTRN	GETCURRENTTIME:FAR
EXTRN	INVALIDATERECT:FAR
EXTRN	INTERSECTCLIPRECT:FAR
EXTRN	CREATEPEN:FAR
EXTRN	CREATESOLIDBRUSH:FAR
EXTRN	SETBRUSHORG:FAR
EXTRN	SHOWWINDOW:FAR
EXTRN	_strlen:FAR
EXTRN	GETINSTANCEDATA:FAR
EXTRN	SETWINDOWTEXT:FAR
EXTRN	GETASYNCKEYSTATE:FAR
EXTRN	PRINTLETTERS:FAR
EXTRN	GETCLIENTRECT:FAR
EXTRN	GETWINDOWRECT:FAR
EXTRN	_cos:FAR
_BSS      SEGMENT
COMM NEAR	_Obj:	 88:	 100
COMM NEAR	_hBitmap:	 2:	 17
_BSS      ENDS
EXTRN	_LetterPart:BYTE
EXTRN	_szNumberDesc:BYTE
EXTRN	_szLetterDesc:BYTE
_BSS      SEGMENT
COMM NEAR	_szAppName:	 1:	 32
COMM NEAR	_hAppInst:	BYTE:	 2
COMM NEAR	_hAppWnd:	BYTE:	 2
COMM NEAR	_hAppPalette:	BYTE:	 2
COMM NEAR	_nDrawDelay:	BYTE:	 2
COMM NEAR	_nLevel:	BYTE:	 2
COMM NEAR	_nSafe:	BYTE:	 2
COMM NEAR	_nShield:	BYTE:	 2
COMM NEAR	_nBomb:	BYTE:	 2
_BSS      ENDS
EXTRN	__ctype:BYTE
_BSS      SEGMENT
COMM NEAR	_nBadGuys:	BYTE:	 2
COMM NEAR	_lScore:	BYTE:	 4
COMM NEAR	PLOCALHEAP:	BYTE:	 2
COMM NEAR	_lLastLife:	BYTE:	 4
COMM NEAR	_lHighScore:	BYTE:	 4
COMM NEAR	_bRestart:	BYTE:	 2
COMM NEAR	_bPaused:	BYTE:	 2
COMM NEAR	_bBW:	BYTE:	 2
COMM NEAR	_vkShld:	BYTE:	 2
COMM NEAR	_vkClkw:	BYTE:	 2
COMM NEAR	_vkCtrClkw:	BYTE:	 2
COMM NEAR	_vkThrst:	BYTE:	 2
COMM NEAR	_vkRvThrst:	BYTE:	 2
COMM NEAR	_vkFire:	BYTE:	 2
COMM NEAR	_vkBomb:	BYTE:	 2
COMM NEAR	_npPlayer:	BYTE:	 2
COMM NEAR	_FreeList:	BYTE:	 4
COMM NEAR	_RoidList:	BYTE:	 4
COMM NEAR	_ShotList:	BYTE:	 4
COMM NEAR	_FlameList:	BYTE:	 4
COMM NEAR	_SpinnerList:	BYTE:	 4
COMM NEAR	_HunterList:	BYTE:	 4
COMM NEAR	_HunterShotList:	BYTE:	 4
COMM NEAR	_SwarmerList:	BYTE:	 4
COMM NEAR	_LetterList:	BYTE:	 4
COMM NEAR	_BonusList:	BYTE:	 4
COMM NEAR	_nCos:	 2:	 256
COMM NEAR	_nSin:	 2:	 256
COMM NEAR	_hPen:	 2:	 16
EXTRN	__fltused:NEAR
_BSS      ENDS
_DATA      SEGMENT
	ORG	$+116
$SG1413	DB	'GAME OVER',  00H
$SG1415	DB	'GET READY',  00H
$SG1417	DB	'LEVEL %u',  00H
$SG1424	DB	'EXTRA LIFE',  00H
$SG1471	DB	'l',  00H
$SG1521	DB	'%ld',  00H
$SG1523	DB	'EXTRA SHIELD',  00H
$SG1525	DB	'EXTRA BOMB',  00H
	ORG	$+12
$SG1839	DB	'%2.2u',  00H
$SG1843	DB	'%7.7lu',  00H
$SG1896	DB	'Program Manager Help - PROGMAN.HLP',  00H
	ORG	$-246
$S1351_Player	DW	00H
	DW	00H
	DW	0a0H
	DW	096H
	DW	00H
	DW	0faH
	DW	060H
	DW	096H
	DW	00H
	DW	00H
$S1352_Spinner	DW	0a0H
	DW	096H
	DW	0e0H
	DW	064H
	DW	060H
	DW	064H
	DW	020H
	DW	096H
	DW	0a0H
	DW	096H
$S1353_Swarmer	DW	00H
	DW	064H
	DW	040H
	DW	064H
	DW	080H
	DW	064H
	DW	0c0H
	DW	064H
	DW	00H
	DW	064H
$S1354_Hunter	DW	0a0H
	DW	096H
	DW	00H
	DW	0faH
	DW	0c0H
	DW	01eH
	DW	040H
	DW	01eH
	DW	00H
	DW	0faH
	DW	060H
	DW	096H
	DW	080H
	DW	096H
	DW	0a0H
	DW	096H
$S1355_Bonus	DW	00H
	DW	096H
	DW	066H
	DW	096H
	DW	0cdH
	DW	096H
	DW	033H
	DW	096H
	DW	09aH
	DW	096H
	DW	00H
	DW	096H
	ORG	$+70
$S1503_nNextBonus	DW	03e8H
$S1574_nNextHunter	DW	0c8H
$S1612_nNextSwarmer	DW	03e8H
$S1644_nNextSpinner	DW	03e8H
$S1779_nBombing	DW	00H
$S1780_nShotDelay	DW	00H
_DATA      ENDS
_BSS      SEGMENT
	ORG	$+50
$S1346_dwSeed	DW 02H DUP (?)
	ORG	$-6
$S1347_nScoreLen	DW 01H DUP (?)
	ORG	$-50
$S1348_szScore	DW 014H DUP (?)
	ORG	$+14
$S1349_rectScoreClip	DW 04H DUP (?)
	ORG	$-22
$S1350_rectShotClip	DW 04H DUP (?)
_BSS      ENDS
HYPEROID_TEXT      SEGMENT
	ASSUME	CS: HYPEROID_TEXT
;|*** //
; Line 1
;|*** // HYPEROID - a neato game
;|*** //
;|*** // Version: 1.1  Copyright (C) 1990,91 Hutchins Software
;|*** //      This software is licenced under the GNU General Public Licence
;|*** //      Please read the associated legal documentation
;|*** // Author: Edward Hutchins
;|*** // Internet: eah1@cec1.wustl.edu
;|*** // USNail: c/o Edward Hutchins, 63 Ridgemoor Dr., Clayton, MO, 63105
;|*** // Revisions:
;|*** // 10/31/91 made game better/harder - Ed.
;|*** //
;|*** // Music: R.E.M./The Cure/Ministry/Front 242/The Smiths/New Order/Hendrix...
;|*** // Beers: Bass Ale, Augsberger Dark
;|*** //
;|*** 
;|*** #include "hyperoid.h"
; Line 17
;|*** //
;|*** // HYPEROID.H - hyperoid internal header information
;|*** //
;|*** // Version: 1.1  Copyright (C) 1990,91 Hutchins Software
;|*** //      This software is licenced under the GNU General Public Licence
;|*** //      Please read the associated legal documentation
;|*** // Author: Edward Hutchins
;|*** // Revisions:
;|*** //
;|*** 
;|*** #ifndef RC_INVOKED
;|*** 
;|*** #include <stdlib.h>
; Line 13
;|*** #include <string.h>
; Line 14
;|*** #include <ctype.h>
; Line 15
;|*** #include <math.h>
; Line 16
;|*** #include <limits.h>
; Line 17
;|*** #define OEMRESOURCE
;|*** #include <winext.h>
; Line 19
;|*** #if !defined(WINEXT_H)
;|*** #define WINEXT_H
;|*** 
;|*** #if defined(__cplusplus)
;|*** extern "C" {
;|*** #endif // __cplusplus
;|*** 
;|*** //
;|*** // WINEXT.H - additional windows definitions
;|*** //
;|*** // Version 1.0  03/21/89  Copyright (C) 1989,90,91 Lantern Coroporation.
;|*** // Author: Edward Hutchins
;|*** // Status: Freeware
;|*** // Revisions:
;|*** // 06/06/90 modified HUGE to LARGE to preserve compatibility with math.h
;|*** //          also nested windows.h include to prevent modifications on the
;|*** //          actual source file - Ed.
;|*** // 10/01/90 added CONST and CONSTP,NP,LP,HP and a few comments - Ed.
;|*** // 08/28/91 added EXPORT and SEGMENT - Ed.
;|*** // 10/28/91 added DLLEXP - Ed.
;|*** // 11/02/91 posted on Compuserve - Ed.
;|*** //
;|*** 
;|*** //
;|*** // include WINDOWS.H, if needed
;|*** //
;|*** 
;|*** #if !defined(WINDOWS_H)
;|*** 	#if defined(NULL)
;|*** 		#undef NULL
;|*** 	#endif
;|*** 	#include <windows.h>
; Line 32
;|*** 
;|*** //
;|*** // imports
;|*** //
;|*** 
;|*** IMPORT POINT        LetterPart[] FROM( roidsupp.c );
;|*** IMPORT NPSTR        szNumberDesc[] FROM( roidsupp.c );
;|*** IMPORT NPSTR        szLetterDesc[] FROM( roidsupp.c );
;|*** 
;|*** //
;|*** // globals
;|*** //
;|*** 
;|*** GLOBAL CHAR         szAppName[32];
;|*** GLOBAL HANDLE       hAppInst;
;|*** GLOBAL HWND         hAppWnd;
;|*** GLOBAL HPALETTE     hAppPalette;
;|*** GLOBAL INT          nDrawDelay;
;|*** GLOBAL INT          nLevel;
;|*** GLOBAL INT          nSafe;
;|*** GLOBAL INT          nShield;
;|*** GLOBAL INT          nBomb;
;|*** GLOBAL INT          nBadGuys;
;|*** GLOBAL LONG         lScore;
;|*** GLOBAL LONG         lLastLife;
;|*** GLOBAL LONG         lHighScore;
;|*** GLOBAL BOOL         bRestart;
;|*** GLOBAL BOOL         bPaused;
;|*** GLOBAL BOOL         bBW;
;|*** GLOBAL INT          vkShld;
;|*** GLOBAL INT          vkClkw;
;|*** GLOBAL INT          vkCtrClkw;
;|*** GLOBAL INT          vkThrst;
;|*** GLOBAL INT          vkRvThrst;
;|*** GLOBAL INT          vkFire;
;|*** GLOBAL INT          vkBomb;
;|*** GLOBAL NPOBJ        npPlayer;
;|*** GLOBAL LIST         FreeList;
;|*** GLOBAL LIST         RoidList;
;|*** GLOBAL LIST         ShotList;
;|*** GLOBAL LIST         FlameList;
;|*** GLOBAL LIST         SpinnerList;
;|*** GLOBAL LIST         HunterList;
;|*** GLOBAL LIST         HunterShotList;
;|*** GLOBAL LIST         SwarmerList;
;|*** GLOBAL LIST         LetterList;
;|*** GLOBAL LIST         BonusList;
;|*** GLOBAL INT          nCos[DEGREE_SIZE];
;|*** GLOBAL INT          nSin[DEGREE_SIZE];
;|*** GLOBAL HPEN         hPen[PALETTE_SIZE];
;|*** GLOBAL OBJ          Obj[MAX_OBJS];
;|*** GLOBAL HBITMAP      hBitmap[IDB_MAX];
;|*** 
;|*** //
;|*** // locals
;|*** //
;|*** 
;|*** LOCAL DWORD         dwSeed;
;|*** LOCAL INT           nScoreLen;
;|*** LOCAL CHAR          szScore[40];
;|*** LOCAL RECT          rectScoreClip;
;|*** LOCAL RECT          rectShotClip;
;|*** LOCAL POINT         Player[] =
;|*** { {0, 0}, {160, 150}, {0, 250}, {96, 150}, {0, 0} };
;|*** LOCAL POINT         Spinner[] =
;|*** { {160, 150}, {224, 100}, {96, 100}, {32, 150}, {160, 150} };
;|*** LOCAL POINT         Swarmer[] =
;|*** { {0, 100}, {64, 100}, {128, 100}, {192, 100}, {0, 100} };
;|*** LOCAL POINT         Hunter[] =
;|*** {
;|*** 	{160, 150}, {0, 250}, {192, 30}, {64, 30},
;|*** 	{0, 250}, {96, 150}, {128, 150}, {160, 150}
;|*** };
;|*** LOCAL POINT         Bonus[] =
;|*** { {0, 150}, {102, 150}, {205, 150}, {51, 150}, {154, 150}, {0, 150} };
;|*** 
;|*** //
;|*** // KillBadGuy - kill off a badguy (made into a macro)
;|*** //
;|*** 
;|*** #define KillBadGuy() \
;|*** ((--nBadGuys <= 0)?(SetRestart( RESTART_NEXTLEVEL ),TRUE):FALSE)
;|*** 
;|*** //
;|*** // arand - pseudorandom number from 0 to x-1 (thanks antman!)
;|*** //
;|*** 
;|*** INT NEAR PASCAL arand( INT x )
;|*** {
; Line 106
	PUBLIC	ARAND
ARAND	PROC NEAR
	*** 000000	55 			push	bp
	*** 000001	8b ec 			mov	bp,sp
;	x = 4
;|*** 	dwSeed = dwSeed * 0x343fd + 0x269ec3;
;|*** 	return( (INT)(((dwSeed >> 16) & 0x7fff) * x >> 15) );
; Line 108
	*** 000003	8b 46 04 		mov	ax,WORD PTR [bp+4]	;x
	*** 000006	99 			cwd	
	*** 000007	52 			push	dx
	*** 000008	50 			push	ax
	*** 000009	b8 fd 43 		mov	ax,17405
	*** 00000c	ba 03 00 		mov	dx,3
	*** 00000f	52 			push	dx
	*** 000010	50 			push	ax
	*** 000011	ff 36 34 00 		push	WORD PTR $S1346_dwSeed+2
	*** 000015	ff 36 32 00 		push	WORD PTR $S1346_dwSeed
	*** 000019	9a 00 00 00 00 		call	FAR PTR __aFulmul
	*** 00001e	05 c3 9e 		add	ax,-24893
	*** 000021	83 d2 26 		adc	dx,38
	*** 000024	a3 32 00 		mov	WORD PTR $S1346_dwSeed,ax
	*** 000027	89 16 34 00 		mov	WORD PTR $S1346_dwSeed+2,dx
	*** 00002b	80 e6 7f 		and	dh,127
	*** 00002e	2b c9 			sub	cx,cx
	*** 000030	51 			push	cx
	*** 000031	52 			push	dx
	*** 000032	9a 00 00 00 00 		call	FAR PTR __aFulmul
	*** 000037	8a c4 			mov	al,ah
	*** 000039	8a e2 			mov	ah,dl
	*** 00003b	8a d6 			mov	dl,dh
	*** 00003d	2a f6 			sub	dh,dh
	*** 00003f	d1 ea 			shr	dx,1
	*** 000041	d1 d8 			rcr	ax,1
	*** 000043	d1 ea 			shr	dx,1
	*** 000045	d1 d8 			rcr	ax,1
	*** 000047	d1 ea 			shr	dx,1
	*** 000049	d1 d8 			rcr	ax,1
	*** 00004b	d1 ea 			shr	dx,1
	*** 00004d	d1 d8 			rcr	ax,1
	*** 00004f	d1 ea 			shr	dx,1
	*** 000051	d1 d8 			rcr	ax,1
	*** 000053	d1 ea 			shr	dx,1
	*** 000055	d1 d8 			rcr	ax,1
	*** 000057	d1 ea 			shr	dx,1
	*** 000059	d1 d8 			rcr	ax,1
;|*** }
; Line 109
	*** 00005b	8b e5 			mov	sp,bp
	*** 00005d	5d 			pop	bp
	*** 00005e	c2 02 00 		ret	2
	*** 000061	90 			nop	

ARAND	ENDP
;|*** 
;|*** //
;|*** // AddHead - add an object to the head of a list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL AddHead( NPLIST npList, NPNODE npNode )
;|*** {
; Line 116
	PUBLIC	ADDHEAD
ADDHEAD	PROC NEAR
	*** 000062	55 			push	bp
	*** 000063	8b ec 			mov	bp,sp
	*** 000065	57 			push	di
	*** 000066	56 			push	si
;	npList = 6
;	npNode = 4
;|*** 	if (npList->npHead)
; Line 117
	*** 000067	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npList
	*** 00006a	83 3f 00 		cmp	WORD PTR [bx],0
	*** 00006d	74 1b 			je	$I1361
;|*** 	{
;|*** 		npNode->npNext = npList->npHead;
; Line 119
	*** 00006f	8b 07 			mov	ax,WORD PTR [bx]
	*** 000071	8b 76 04 		mov	si,WORD PTR [bp+4]	;npNode
	*** 000074	89 04 			mov	WORD PTR [si],ax
;|*** 		npNode->npPrev = NULL;
; Line 120
	*** 000076	c7 44 02 00 00 		mov	WORD PTR [si+2],0
;|*** 		npList->npHead = (npList->npHead->npPrev = npNode);
; Line 121
	*** 00007b	8b 3f 			mov	di,WORD PTR [bx]
	*** 00007d	89 75 02 		mov	WORD PTR [di+2],si
	*** 000080	8b 37 			mov	si,WORD PTR [bx]
	*** 000082	8b 44 02 		mov	ax,WORD PTR [si+2]
	*** 000085	89 07 			mov	WORD PTR [bx],ax
;|*** 	}
;|*** 	else // add to an empty list
; Line 123
	*** 000087	eb 12 			jmp	SHORT $EX1360
	*** 000089	90 			nop	
					$I1361:
;|*** 	{
;|*** 		npList->npHead = npList->npTail = npNode;
; Line 125
	*** 00008a	8b 46 04 		mov	ax,WORD PTR [bp+4]	;npNode
	*** 00008d	89 47 02 		mov	WORD PTR [bx+2],ax
	*** 000090	89 07 			mov	WORD PTR [bx],ax
;|*** 		npNode->npNext = npNode->npPrev = NULL;
; Line 126
	*** 000092	8b d8 			mov	bx,ax
	*** 000094	2b c9 			sub	cx,cx
	*** 000096	89 4f 02 		mov	WORD PTR [bx+2],cx
	*** 000099	89 0f 			mov	WORD PTR [bx],cx
;|*** 	}
;|*** }
; Line 128
					$EX1360:
	*** 00009b	5e 			pop	si
	*** 00009c	5f 			pop	di
	*** 00009d	8b e5 			mov	sp,bp
	*** 00009f	5d 			pop	bp
	*** 0000a0	c2 04 00 		ret	4
	*** 0000a3	90 			nop	

ADDHEAD	ENDP
;|*** 
;|*** //
;|*** // RemHead - remove the first element in a list
;|*** //
;|*** 
;|*** NPNODE NEAR PASCAL RemHead( NPLIST npList )
;|*** {
; Line 135
	PUBLIC	REMHEAD
REMHEAD	PROC NEAR
	*** 0000a4	55 			push	bp
	*** 0000a5	8b ec 			mov	bp,sp
	*** 0000a7	83 ec 02 		sub	sp,2
	*** 0000aa	56 			push	si
;	npList = 4
;	npNode = -2
;|*** 	if (npList->npHead)
; Line 136
	*** 0000ab	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npList
	*** 0000ae	83 3f 00 		cmp	WORD PTR [bx],0
	*** 0000b1	74 29 			je	$I1365
;|*** 	{
;|*** 		NPNODE npNode = npList->npHead;
; Line 138
	*** 0000b3	8b 07 			mov	ax,WORD PTR [bx]
	*** 0000b5	89 46 fe 		mov	WORD PTR [bp-2],ax	;npNode
;|*** 		if (npList->npTail != npNode)
; Line 139
	*** 0000b8	39 47 02 		cmp	WORD PTR [bx+2],ax
	*** 0000bb	74 13 			je	$I1367
;|*** 		{
;|*** 			npList->npHead = npNode->npNext;
; Line 141
	*** 0000bd	8b d8 			mov	bx,ax
	*** 0000bf	8b 07 			mov	ax,WORD PTR [bx]
	*** 0000c1	8b 76 04 		mov	si,WORD PTR [bp+4]	;npList
	*** 0000c4	89 04 			mov	WORD PTR [si],ax
;|*** 			npNode->npNext->npPrev = NULL;
; Line 142
	*** 0000c6	8b 1f 			mov	bx,WORD PTR [bx]
	*** 0000c8	c7 47 02 00 00 		mov	WORD PTR [bx+2],0
;|*** 		}
;|*** 		else npList->npHead = npList->npTail = NULL;
; Line 144
	*** 0000cd	eb 08 			jmp	SHORT $I1368
	*** 0000cf	90 			nop	
					$I1367:
	*** 0000d0	2b c0 			sub	ax,ax
	*** 0000d2	89 47 02 		mov	WORD PTR [bx+2],ax
	*** 0000d5	89 07 			mov	WORD PTR [bx],ax
					$I1368:
;|*** 		return( npNode );
; Line 145
	*** 0000d7	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;npNode
	*** 0000da	eb 02 			jmp	SHORT $EX1364
;|*** 	}
;|*** 	else return( NULL );
; Line 147
					$I1365:
	*** 0000dc	2b c0 			sub	ax,ax
;|*** }
; Line 148
					$EX1364:
	*** 0000de	5e 			pop	si
	*** 0000df	8b e5 			mov	sp,bp
	*** 0000e1	5d 			pop	bp
	*** 0000e2	c2 02 00 		ret	2
	*** 0000e5	90 			nop	

REMHEAD	ENDP
;|*** 
;|*** //
;|*** // Remove - remove an arbitrary element from a list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL Remove( NPLIST npList, NPNODE npNode )
;|*** {
; Line 155
	PUBLIC	REMOVE
REMOVE	PROC NEAR
	*** 0000e6	55 			push	bp
	*** 0000e7	8b ec 			mov	bp,sp
;	npList = 6
;	npNode = 4
;|*** 	if (npNode->npPrev) npNode->npPrev->npNext = npNode->npNext;
; Line 156
	*** 0000e9	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npNode
	*** 0000ec	83 7f 02 00 		cmp	WORD PTR [bx+2],0
	*** 0000f0	74 08 			je	$I1373
	*** 0000f2	8b 07 			mov	ax,WORD PTR [bx]
	*** 0000f4	8b 5f 02 		mov	bx,WORD PTR [bx+2]
	*** 0000f7	eb 06 			jmp	SHORT $L20128
	*** 0000f9	90 			nop	
					$I1373:
	*** 0000fa	8b 07 			mov	ax,WORD PTR [bx]
	*** 0000fc	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npList
					$L20128:
	*** 0000ff	89 07 			mov	WORD PTR [bx],ax
;|*** 	else npList->npHead = npNode->npNext;
;|*** 	if (npNode->npNext) npNode->npNext->npPrev = npNode->npPrev;
; Line 158
	*** 000101	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npNode
	*** 000104	83 3f 00 		cmp	WORD PTR [bx],0
	*** 000107	74 07 			je	$I1375
	*** 000109	8b 47 02 		mov	ax,WORD PTR [bx+2]
	*** 00010c	8b 1f 			mov	bx,WORD PTR [bx]
	*** 00010e	eb 06 			jmp	SHORT $L20129
					$I1375:
	*** 000110	8b 47 02 		mov	ax,WORD PTR [bx+2]
	*** 000113	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npList
					$L20129:
	*** 000116	89 47 02 		mov	WORD PTR [bx+2],ax
;|*** 	else npList->npTail = npNode->npPrev;
;|*** }
; Line 160
	*** 000119	5d 			pop	bp
	*** 00011a	c2 04 00 		ret	4
	*** 00011d	90 			nop	

REMOVE	ENDP
;|*** 
;|*** //
;|*** // DrawObject - draw a single object
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawObject( HDC hDC, NPOBJ npObj )
;|*** {
; Line 167
	PUBLIC	DRAWOBJECT
DRAWOBJECT	PROC NEAR
	*** 00011e	55 			push	bp
	*** 00011f	8b ec 			mov	bp,sp
	*** 000121	83 ec 34 		sub	sp,52
	*** 000124	56 			push	si
;	hDC = 6
;	npObj = 4
;	nCnt = -2
;	nDir = -40
;	x = -36
;	y = -38
;	Pts = -34
;	wDeg = -42
;	nLen = -44
;|*** 	INT             nCnt;
;|*** 	INT             nDir = (npObj->nDir += npObj->nSpin);
; Line 169
	*** 000125	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000128	8b 47 10 		mov	ax,WORD PTR [bx+16]
	*** 00012b	01 47 0e 		add	WORD PTR [bx+14],ax
	*** 00012e	8b 47 0e 		mov	ax,WORD PTR [bx+14]
	*** 000131	89 46 d8 		mov	WORD PTR [bp-40],ax	;nDir
;|*** 	INT             x = (npObj->Pos.x += npObj->Vel.x);
; Line 170
	*** 000134	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 000137	01 47 04 		add	WORD PTR [bx+4],ax
	*** 00013a	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 00013d	89 46 dc 		mov	WORD PTR [bp-36],ax	;x
;|*** 	INT             y = (npObj->Pos.y += npObj->Vel.y);
; Line 171
	*** 000140	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 000143	01 47 06 		add	WORD PTR [bx+6],ax
	*** 000146	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000149	89 46 da 		mov	WORD PTR [bp-38],ax	;y
;|*** 	POINT           Pts[MAX_PTS];
;|*** 
;|*** 	if (x < -CLIP_COORD) npObj->Pos.x = x = CLIP_COORD;
; Line 174
	*** 00014c	81 7e dc d4 de 		cmp	WORD PTR [bp-36],-8492	;x
	*** 000151	7d 05 			jge	$I1385
	*** 000153	b8 2c 21 		mov	ax,8492
	*** 000156	eb 0a 			jmp	SHORT $L20130
					$I1385:
	*** 000158	81 7e dc 2c 21 		cmp	WORD PTR [bp-36],8492	;x
	*** 00015d	7e 0c 			jle	$I1386
	*** 00015f	b8 d4 de 		mov	ax,-8492
					$L20130:
	*** 000162	89 46 dc 		mov	WORD PTR [bp-36],ax	;x
	*** 000165	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000168	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 	else if (x > CLIP_COORD) npObj->Pos.x = x = -CLIP_COORD;
;|*** 	if (y < -CLIP_COORD) npObj->Pos.y = y = CLIP_COORD;
; Line 176
					$I1386:
	*** 00016b	81 7e da d4 de 		cmp	WORD PTR [bp-38],-8492	;y
	*** 000170	7d 06 			jge	$I1388
	*** 000172	b8 2c 21 		mov	ax,8492
	*** 000175	eb 0b 			jmp	SHORT $L20131
	*** 000177	90 			nop	
					$I1388:
	*** 000178	81 7e da 2c 21 		cmp	WORD PTR [bp-38],8492	;y
	*** 00017d	7e 0c 			jle	$I1389
	*** 00017f	b8 d4 de 		mov	ax,-8492
					$L20131:
	*** 000182	89 46 da 		mov	WORD PTR [bp-38],ax	;y
	*** 000185	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000188	89 47 06 		mov	WORD PTR [bx+6],ax
;|*** 	else if (y > CLIP_COORD) npObj->Pos.y = y = -CLIP_COORD;
;|*** 
;|*** 	for (nCnt = npObj->byPts - 1; nCnt >= 0; --nCnt)
; Line 179
					$I1389:
	*** 00018b	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 00018e	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 000191	2a e4 			sub	ah,ah
	*** 000193	48 			dec	ax
	*** 000194	89 46 fe 		mov	WORD PTR [bp-2],ax	;nCnt
	*** 000197	0b c0 			or	ax,ax
	*** 000199	7c 77 			jl	$FB1393
	*** 00019b	8b f0 			mov	si,ax
	*** 00019d	d1 e6 			shl	si,1
	*** 00019f	d1 e6 			shl	si,1
	*** 0001a1	8d 42 de 		lea	ax,WORD PTR [bp-34][si]
	*** 0001a4	89 46 d2 		mov	WORD PTR [bp-46],ax
	*** 0001a7	03 76 04 		add	si,WORD PTR [bp+4]	;npObj
	*** 0001aa	83 c6 18 		add	si,24
	*** 0001ad	89 76 d0 		mov	WORD PTR [bp-48],si
					$F1391:
;|*** 	{
;|*** 		WORD wDeg = DEG( npObj->Pts[nCnt].x + nDir );
; Line 181
	*** 0001b0	8b 5e d0 		mov	bx,WORD PTR [bp-48]
	*** 0001b3	8a 07 			mov	al,BYTE PTR [bx]
	*** 0001b5	02 46 d8 		add	al,BYTE PTR [bp-40]	;nDir
	*** 0001b8	2a e4 			sub	ah,ah
	*** 0001ba	89 46 d6 		mov	WORD PTR [bp-42],ax	;wDeg
;|*** 		INT nLen = npObj->Pts[nCnt].y;
; Line 182
	*** 0001bd	8b 4f 02 		mov	cx,WORD PTR [bx+2]
	*** 0001c0	89 4e d4 		mov	WORD PTR [bp-44],cx	;nLen
;|*** 		Pts[nCnt].x = x + MULDEG( nLen, nCos[wDeg] );
; Line 183
	*** 0001c3	ba 00 40 		mov	dx,16384
	*** 0001c6	2b db 			sub	bx,bx
	*** 0001c8	53 			push	bx
	*** 0001c9	52 			push	dx
	*** 0001ca	8b f0 			mov	si,ax
	*** 0001cc	d1 e6 			shl	si,1
	*** 0001ce	8b 84 00 00 		mov	ax,WORD PTR _nCos[si]
	*** 0001d2	f7 e9 			imul	cx
	*** 0001d4	52 			push	dx
	*** 0001d5	50 			push	ax
	*** 0001d6	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0001db	03 46 dc 		add	ax,WORD PTR [bp-36]	;x
	*** 0001de	8b 5e d2 		mov	bx,WORD PTR [bp-46]
	*** 0001e1	89 07 			mov	WORD PTR [bx],ax
;|*** 		Pts[nCnt].y = y + MULDEG( nLen, nSin[wDeg] );
; Line 184
	*** 0001e3	b8 00 40 		mov	ax,16384
	*** 0001e6	99 			cwd	
	*** 0001e7	52 			push	dx
	*** 0001e8	50 			push	ax
	*** 0001e9	8b 5e d6 		mov	bx,WORD PTR [bp-42]	;wDeg
	*** 0001ec	d1 e3 			shl	bx,1
	*** 0001ee	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 0001f2	f7 6e d4 		imul	WORD PTR [bp-44]	;nLen
	*** 0001f5	52 			push	dx
	*** 0001f6	50 			push	ax
	*** 0001f7	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0001fc	03 46 da 		add	ax,WORD PTR [bp-38]	;y
	*** 0001ff	8b 5e d2 		mov	bx,WORD PTR [bp-46]
	*** 000202	89 47 02 		mov	WORD PTR [bx+2],ax
	*** 000205	83 6e d2 04 		sub	WORD PTR [bp-46],4
	*** 000209	83 6e d0 04 		sub	WORD PTR [bp-48],4
	*** 00020d	ff 4e fe 		dec	WORD PTR [bp-2]	;nCnt
	*** 000210	79 9e 			jns	$F1391
;|*** 	}
; Line 185
					$FB1393:
;|*** 
;|*** 	if (npObj->byPts > 1)
; Line 187
	*** 000212	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000215	80 7f 17 01 		cmp	BYTE PTR [bx+23],1
	*** 000219	77 03 			ja	$JCC537
	*** 00021b	e9 9e 00 		jmp	$I1396
					$JCC537:
;|*** 	{
;|*** 		SelectObject( hDC, hPen[BLACK] );
; Line 189
	*** 00021e	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 000221	ff 36 00 00 		push	WORD PTR _hPen
	*** 000225	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 		Polyline( hDC, npObj->Old, npObj->byPts );
; Line 190
	*** 00022a	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 00022d	8b 46 04 		mov	ax,WORD PTR [bp+4]	;npObj
	*** 000230	05 38 00 		add	ax,56
	*** 000233	1e 			push	ds
	*** 000234	50 			push	ax
	*** 000235	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000238	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 00023b	2a e4 			sub	ah,ah
	*** 00023d	50 			push	ax
	*** 00023e	9a 00 00 00 00 		call	FAR PTR POLYLINE
;|*** 		if (npObj->nCount > 0)
; Line 191
	*** 000243	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000246	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 00024a	7f 03 			jg	$JCC586
	*** 00024c	e9 b2 00 		jmp	$EX1379
					$JCC586:
;|*** 		{
;|*** 			SelectObject( hDC, hPen[npObj->byColor] );
; Line 193
	*** 00024f	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 000252	8a 5f 16 		mov	bl,BYTE PTR [bx+22]
	*** 000255	2a ff 			sub	bh,bh
	*** 000257	d1 e3 			shl	bx,1
	*** 000259	ff b7 00 00 		push	WORD PTR _hPen[bx]
	*** 00025d	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 			Polyline( hDC, Pts, npObj->byPts );
; Line 194
	*** 000262	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 000265	8d 46 de 		lea	ax,WORD PTR [bp-34]	;Pts
	*** 000268	16 			push	ss
	*** 000269	50 			push	ax
	*** 00026a	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 00026d	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 000270	2a e4 			sub	ah,ah
	*** 000272	50 			push	ax
	*** 000273	9a 00 00 00 00 		call	FAR PTR POLYLINE
;|*** 			for (nCnt = npObj->byPts - 1; nCnt >= 0; --nCnt)
; Line 195
	*** 000278	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 00027b	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 00027e	2a e4 			sub	ah,ah
	*** 000280	48 			dec	ax
	*** 000281	89 46 fe 		mov	WORD PTR [bp-2],ax	;nCnt
	*** 000284	0b c0 			or	ax,ax
	*** 000286	7c 79 			jl	$EX1379
	*** 000288	8b f0 			mov	si,ax
	*** 00028a	d1 e6 			shl	si,1
	*** 00028c	d1 e6 			shl	si,1
	*** 00028e	8d 42 de 		lea	ax,WORD PTR [bp-34][si]
	*** 000291	89 46 ce 		mov	WORD PTR [bp-50],ax
	*** 000294	03 76 04 		add	si,WORD PTR [bp+4]	;npObj
	*** 000297	83 c6 38 		add	si,56
	*** 00029a	89 76 cc 		mov	WORD PTR [bp-52],si
					$F1398:
;|*** 				npObj->Old[nCnt] = Pts[nCnt];
; Line 196
	*** 00029d	8b 5e ce 		mov	bx,WORD PTR [bp-50]
	*** 0002a0	83 6e ce 04 		sub	WORD PTR [bp-50],4
	*** 0002a4	8b 07 			mov	ax,WORD PTR [bx]
	*** 0002a6	8b 57 02 		mov	dx,WORD PTR [bx+2]
	*** 0002a9	8b 5e cc 		mov	bx,WORD PTR [bp-52]
	*** 0002ac	83 6e cc 04 		sub	WORD PTR [bp-52],4
	*** 0002b0	89 07 			mov	WORD PTR [bx],ax
	*** 0002b2	89 57 02 		mov	WORD PTR [bx+2],dx
	*** 0002b5	ff 4e fe 		dec	WORD PTR [bp-2]	;nCnt
	*** 0002b8	79 e3 			jns	$F1398
	*** 0002ba	eb 45 			jmp	SHORT $EX1379
;|*** 		}
;|*** 	}
;|*** 	else // just a point
; Line 199
					$I1396:
;|*** 	{
;|*** 		SetPixel( hDC, npObj->Old[0].x, npObj->Old[0].y, PALETTEINDEX( BLACK ) );
; Line 201
	*** 0002bc	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 0002bf	ff 77 38 		push	WORD PTR [bx+56]
	*** 0002c2	ff 77 3a 		push	WORD PTR [bx+58]
	*** 0002c5	2b c0 			sub	ax,ax
	*** 0002c7	ba 00 01 		mov	dx,256
	*** 0002ca	52 			push	dx
	*** 0002cb	50 			push	ax
	*** 0002cc	9a 00 00 00 00 		call	FAR PTR SETPIXEL
;|*** 		if (npObj->nCount > 0)
; Line 202
	*** 0002d1	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 0002d4	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 0002d8	7e 27 			jle	$EX1379
;|*** 		{
;|*** 			SetPixel( hDC, Pts[0].x, Pts[0].y, PALETTEINDEX( npObj->byColor ) );
; Line 204
	*** 0002da	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 0002dd	ff 76 de 		push	WORD PTR [bp-34]	;Pts
	*** 0002e0	ff 76 e0 		push	WORD PTR [bp-32]
	*** 0002e3	8a 47 16 		mov	al,BYTE PTR [bx+22]
	*** 0002e6	2a e4 			sub	ah,ah
	*** 0002e8	b9 00 01 		mov	cx,256
	*** 0002eb	51 			push	cx
	*** 0002ec	50 			push	ax
	*** 0002ed	9a 00 00 00 00 		call	FAR PTR SETPIXEL
;|*** 			npObj->Old[0] = Pts[0];
; Line 205
	*** 0002f2	8b 46 de 		mov	ax,WORD PTR [bp-34]	;Pts
	*** 0002f5	8b 56 e0 		mov	dx,WORD PTR [bp-32]
	*** 0002f8	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 0002fb	89 47 38 		mov	WORD PTR [bx+56],ax
	*** 0002fe	89 57 3a 		mov	WORD PTR [bx+58],dx
;|*** 		}
;|*** 	}
;|*** }
; Line 208
					$EX1379:
	*** 000301	5e 			pop	si
	*** 000302	8b e5 			mov	sp,bp
	*** 000304	5d 			pop	bp
	*** 000305	c2 04 00 		ret	4

DRAWOBJECT	ENDP
;|*** 
;|*** //
;|*** // SetRestart - set the restart timer
;|*** //
;|*** 
;|*** VOID NEAR PASCAL SetRestart( RESTART_MODE Restart )
;|*** {
; Line 215
	PUBLIC	SETRESTART
SETRESTART	PROC NEAR
	*** 000308	55 			push	bp
	*** 000309	8b ec 			mov	bp,sp
	*** 00030b	83 ec 24 		sub	sp,36
;	Restart = 4
;	Pt = -36
;	szBuff = -32
;|*** 	POINT           Pt;
;|*** 	CHAR            szBuff[32];
;|*** 
;|*** 	if (bRestart) return;
; Line 219
	*** 00030e	83 3e 00 00 00 		cmp	WORD PTR _bRestart,0
	*** 000313	74 03 			je	$JCC787
	*** 000315	e9 91 00 		jmp	$EX1404
					$JCC787:
;|*** 	SetTimer( hAppWnd, RESTART_TIMER, RESTART_DELAY, NULL );
; Line 220
	*** 000318	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00031c	b8 02 00 		mov	ax,2
	*** 00031f	50 			push	ax
	*** 000320	b8 88 13 		mov	ax,5000
	*** 000323	50 			push	ax
	*** 000324	2b c0 			sub	ax,ax
	*** 000326	50 			push	ax
	*** 000327	50 			push	ax
	*** 000328	9a 00 00 00 00 		call	FAR PTR SETTIMER
;|*** 	bRestart = TRUE;
; Line 221
	*** 00032d	c7 06 00 00 01 00 	mov	WORD PTR _bRestart,1
;|*** 
;|*** 	Pt.x = Pt.y = 0;
; Line 223
	*** 000333	2b c0 			sub	ax,ax
	*** 000335	89 46 de 		mov	WORD PTR [bp-34],ax
	*** 000338	89 46 dc 		mov	WORD PTR [bp-36],ax	;Pt
;|*** 	switch (Restart)
; Line 224
	*** 00033b	8b 46 04 		mov	ax,WORD PTR [bp+4]	;Restart
;|*** 	{
;|*** 	case RESTART_GAME:
;|*** 		SpinLetters( "GAME OVER", Pt, Pt, RED, 400 );
;|*** 		break;
;|*** 	case RESTART_LEVEL:
;|*** 		PrintLetters( "GET READY", Pt, Pt, BLUE, 300 );
;|*** 		break;
;|*** 	case RESTART_NEXTLEVEL:
;|*** 		wsprintf( szBuff, "LEVEL %u", nLevel + 1 );
;|*** 		PrintLetters( szBuff, Pt, Pt, BLUE, 300 );
;|*** 		break;
;|*** 	}
; Line 236
	*** 00033e	0b c0 			or	ax,ax
	*** 000340	74 0c 			je	$SC1412
	*** 000342	48 			dec	ax
	*** 000343	74 2b 			je	$SC1414
	*** 000345	48 			dec	ax
	*** 000346	74 2e 			je	$SC1416
	*** 000348	8b e5 			mov	sp,bp
	*** 00034a	5d 			pop	bp
	*** 00034b	c2 02 00 		ret	2
;|*** 	case RESTART_GAME:
; Line 226
					$SC1412:
;|*** 		SpinLetters( "GAME OVER", Pt, Pt, RED, 400 );
; Line 227
	*** 00034e	b8 74 00 		mov	ax,OFFSET DGROUP:$SG1413
	*** 000351	50 			push	ax
	*** 000352	ff 76 de 		push	WORD PTR [bp-34]
	*** 000355	ff 76 dc 		push	WORD PTR [bp-36]	;Pt
	*** 000358	ff 76 de 		push	WORD PTR [bp-34]
	*** 00035b	ff 76 dc 		push	WORD PTR [bp-36]	;Pt
	*** 00035e	b0 05 			mov	al,5
	*** 000360	50 			push	ax
	*** 000361	b8 90 01 		mov	ax,400
	*** 000364	50 			push	ax
	*** 000365	9a 00 00 00 00 		call	FAR PTR SPINLETTERS
;|*** 		break;
; Line 228
	*** 00036a	8b e5 			mov	sp,bp
	*** 00036c	5d 			pop	bp
	*** 00036d	c2 02 00 		ret	2
;|*** 	case RESTART_LEVEL:
; Line 229
					$SC1414:
;|*** 		PrintLetters( "GET READY", Pt, Pt, BLUE, 300 );
; Line 230
	*** 000370	b8 7e 00 		mov	ax,OFFSET DGROUP:$SG1415
	*** 000373	eb 1b 			jmp	SHORT $L20132
	*** 000375	90 			nop	
;|*** 		break;
;|*** 	case RESTART_NEXTLEVEL:
; Line 232
					$SC1416:
;|*** 		wsprintf( szBuff, "LEVEL %u", nLevel + 1 );
; Line 233
	*** 000376	a1 00 00 		mov	ax,WORD PTR _nLevel
	*** 000379	40 			inc	ax
	*** 00037a	50 			push	ax
	*** 00037b	b8 88 00 		mov	ax,OFFSET DGROUP:$SG1417
	*** 00037e	1e 			push	ds
	*** 00037f	50 			push	ax
	*** 000380	8d 46 e0 		lea	ax,WORD PTR [bp-32]	;szBuff
	*** 000383	16 			push	ss
	*** 000384	50 			push	ax
	*** 000385	9a 00 00 00 00 		call	FAR PTR _wsprintf
	*** 00038a	83 c4 0a 		add	sp,10
;|*** 		PrintLetters( szBuff, Pt, Pt, BLUE, 300 );
; Line 234
	*** 00038d	8d 46 e0 		lea	ax,WORD PTR [bp-32]	;szBuff
					$L20132:
	*** 000390	50 			push	ax
	*** 000391	ff 76 de 		push	WORD PTR [bp-34]
	*** 000394	ff 76 dc 		push	WORD PTR [bp-36]	;Pt
	*** 000397	ff 76 de 		push	WORD PTR [bp-34]
	*** 00039a	ff 76 dc 		push	WORD PTR [bp-36]	;Pt
	*** 00039d	b0 09 			mov	al,9
	*** 00039f	50 			push	ax
	*** 0003a0	b8 2c 01 		mov	ax,300
	*** 0003a3	50 			push	ax
	*** 0003a4	9a 00 00 00 00 		call	FAR PTR PRINTLETTERS
;|*** 		break;
;|*** 	}
;|*** }
; Line 237
					$EX1404:
	*** 0003a9	8b e5 			mov	sp,bp
	*** 0003ab	5d 			pop	bp
	*** 0003ac	c2 02 00 		ret	2
	*** 0003af	90 			nop	

SETRESTART	ENDP
;|*** 
;|*** //
;|*** // PrintPlayerMessage - show the player a status message
;|*** //
;|*** 
;|*** VOID NEAR PASCAL PrintPlayerMessage( NPSTR npszText )
;|*** {
; Line 244
	PUBLIC	PRINTPLAYERMESSAGE
PRINTPLAYERMESSAGE	PROC NEAR
	*** 0003b0	55 			push	bp
	*** 0003b1	8b ec 			mov	bp,sp
	*** 0003b3	83 ec 08 		sub	sp,8
;	npszText = 4
;	Pos = -4
;	Vel = -8
;|*** 	POINT Pos, Vel;
;|*** 
;|*** 	Pos = npPlayer->Pos;
; Line 247
	*** 0003b6	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0003ba	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 0003bd	8b 57 06 		mov	dx,WORD PTR [bx+6]
	*** 0003c0	89 56 fe 		mov	WORD PTR [bp-2],dx
;|*** 	Pos.y -= 400;
; Line 248
	*** 0003c3	81 6e fe 90 01 		sub	WORD PTR [bp-2],400
;|*** 	Vel.x = 0;
; Line 249
	*** 0003c8	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0	;Vel
;|*** 	Vel.y = -50;
; Line 250
	*** 0003cd	c7 46 fa ce ff 		mov	WORD PTR [bp-6],-50
;|*** 	PrintLetters( npszText, Pos, Vel, GREEN, 150 );
; Line 251
	*** 0003d2	ff 76 04 		push	WORD PTR [bp+4]	;npszText
	*** 0003d5	ff 76 fe 		push	WORD PTR [bp-2]
	*** 0003d8	50 			push	ax
	*** 0003d9	ff 76 fa 		push	WORD PTR [bp-6]
	*** 0003dc	ff 76 f8 		push	WORD PTR [bp-8]	;Vel
	*** 0003df	b0 07 			mov	al,7
	*** 0003e1	50 			push	ax
	*** 0003e2	b8 96 00 		mov	ax,150
	*** 0003e5	50 			push	ax
	*** 0003e6	9a 00 00 00 00 		call	FAR PTR PRINTLETTERS
;|*** }
; Line 252
	*** 0003eb	8b e5 			mov	sp,bp
	*** 0003ed	5d 			pop	bp
	*** 0003ee	c2 02 00 		ret	2
	*** 0003f1	90 			nop	

PRINTPLAYERMESSAGE	ENDP
;|*** 
;|*** //
;|*** // AddExtraLife - give the player another life
;|*** //
;|*** 
;|*** VOID NEAR PASCAL AddExtraLife( VOID )
;|*** {
; Line 259
	PUBLIC	ADDEXTRALIFE
ADDEXTRALIFE	PROC NEAR
;|*** 	PrintPlayerMessage( "EXTRA LIFE" );
; Line 260
	*** 0003f2	b8 91 00 		mov	ax,OFFSET DGROUP:$SG1424
	*** 0003f5	50 			push	ax
	*** 0003f6	e8 b7 ff 		call	PRINTPLAYERMESSAGE
;|*** 	++npPlayer->nCount;
; Line 261
	*** 0003f9	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0003fd	ff 47 12 		inc	WORD PTR [bx+18]
;|*** 	npPlayer->byColor = (BYTE)(BLACK + npPlayer->nCount);
; Line 262
	*** 000400	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000404	8a 47 12 		mov	al,BYTE PTR [bx+18]
	*** 000407	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 	if (npPlayer->byColor > WHITE) npPlayer->byColor = WHITE;
; Line 263
	*** 00040a	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00040e	80 7f 16 03 		cmp	BYTE PTR [bx+22],3
	*** 000412	76 04 			jbe	$EX1423
	*** 000414	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** }
; Line 264
					$EX1423:
	*** 000418	c3 			ret	
	*** 000419	90 			nop	

ADDEXTRALIFE	ENDP
;|*** 
;|*** //
;|*** // Hit - something hit an object, do fireworks
;|*** //
;|*** 
;|*** VOID NEAR PASCAL Hit( HDC hDC, NPOBJ npObj )
;|*** {
; Line 271
	PUBLIC	HIT
HIT	PROC NEAR
	*** 00041a	55 			push	bp
	*** 00041b	8b ec 			mov	bp,sp
	*** 00041d	83 ec 06 		sub	sp,6
	*** 000420	56 			push	si
;	hDC = 6
;	npObj = 4
;	nCnt = -2
;	npFlame = -4
	*** 000421	c7 46 fa 00 00 		mov	WORD PTR [bp-6],0
;|*** 	INT             nCnt;
;|*** 
;|*** 	for (nCnt = 0; nCnt < 6; ++nCnt)
; Line 274
					$F1430:
;|*** 	{
;|*** 		NPOBJ npFlame = RemHeadObj( &FreeList );
;|*** 		if (!npFlame) return;
; Line 277
	*** 000426	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000429	50 			push	ax
	*** 00042a	e8 77 fc 		call	REMHEAD
	*** 00042d	89 46 fc 		mov	WORD PTR [bp-4],ax	;npFlame
	*** 000430	0b c0 			or	ax,ax
	*** 000432	75 03 			jne	$JCC1074
	*** 000434	e9 ab 00 		jmp	$EX1428
					$JCC1074:
;|*** 		npFlame->Pos.x = npObj->Pos.x;
; Line 278
	*** 000437	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 00043a	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 00043d	8b 76 fc 		mov	si,WORD PTR [bp-4]	;npFlame
	*** 000440	89 44 04 		mov	WORD PTR [si+4],ax
;|*** 		npFlame->Pos.y = npObj->Pos.y;
; Line 279
	*** 000443	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000446	89 44 06 		mov	WORD PTR [si+6],ax
;|*** 		npFlame->Vel.x = npObj->Vel.x;
; Line 280
	*** 000449	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 00044c	89 44 08 		mov	WORD PTR [si+8],ax
;|*** 		npFlame->Vel.y = npObj->Vel.y;
; Line 281
	*** 00044f	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 000452	89 44 0a 		mov	WORD PTR [si+10],ax
;|*** 		npFlame->nDir = npObj->nDir + (nCnt * DEGREE_SIZE) / 6;
; Line 282
	*** 000455	8b 46 fa 		mov	ax,WORD PTR [bp-6]
	*** 000458	b9 06 00 		mov	cx,6
	*** 00045b	99 			cwd	
	*** 00045c	f7 f9 			idiv	cx
	*** 00045e	03 47 0e 		add	ax,WORD PTR [bx+14]
	*** 000461	89 44 0e 		mov	WORD PTR [si+14],ax
;|*** 		npFlame->nSpin = 0;
; Line 283
	*** 000464	c7 44 10 00 00 		mov	WORD PTR [si+16],0
;|*** 		npFlame->nCount = 10 + arand( 8 );
; Line 284
	*** 000469	b8 08 00 		mov	ax,8
	*** 00046c	50 			push	ax
	*** 00046d	e8 90 fb 		call	ARAND
	*** 000470	05 0a 00 		add	ax,10
	*** 000473	89 44 12 		mov	WORD PTR [si+18],ax
;|*** 		npFlame->byColor = YELLOW;
; Line 285
	*** 000476	c6 44 16 0b 		mov	BYTE PTR [si+22],11
;|*** 		npFlame->byPts = 1;
; Line 286
	*** 00047a	c6 44 17 01 		mov	BYTE PTR [si+23],1
;|*** 		npFlame->Pts[0].x = npFlame->Pts[0].y = 0;
; Line 287
	*** 00047e	2b c0 			sub	ax,ax
	*** 000480	89 44 1a 		mov	WORD PTR [si+26],ax
	*** 000483	89 44 18 		mov	WORD PTR [si+24],ax
;|*** 		ACCEL( npFlame, npFlame->nDir, 50 - npFlame->nCount );
; Line 288
	*** 000486	b8 00 40 		mov	ax,16384
	*** 000489	99 			cwd	
	*** 00048a	52 			push	dx
	*** 00048b	50 			push	ax
	*** 00048c	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 00048f	2a ff 			sub	bh,bh
	*** 000491	d1 e3 			shl	bx,1
	*** 000493	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 000497	b9 32 00 		mov	cx,50
	*** 00049a	2b 4c 12 		sub	cx,WORD PTR [si+18]
	*** 00049d	f7 e9 			imul	cx
	*** 00049f	52 			push	dx
	*** 0004a0	50 			push	ax
	*** 0004a1	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0004a6	01 44 08 		add	WORD PTR [si+8],ax
	*** 0004a9	b8 00 40 		mov	ax,16384
	*** 0004ac	99 			cwd	
	*** 0004ad	52 			push	dx
	*** 0004ae	50 			push	ax
	*** 0004af	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 0004b2	2a ff 			sub	bh,bh
	*** 0004b4	d1 e3 			shl	bx,1
	*** 0004b6	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 0004ba	b9 32 00 		mov	cx,50
	*** 0004bd	2b 4c 12 		sub	cx,WORD PTR [si+18]
	*** 0004c0	f7 e9 			imul	cx
	*** 0004c2	52 			push	dx
	*** 0004c3	50 			push	ax
	*** 0004c4	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0004c9	01 44 0a 		add	WORD PTR [si+10],ax
;|*** 		AddHeadObj( &FlameList, npFlame );
; Line 289
	*** 0004cc	b8 00 00 		mov	ax,OFFSET DGROUP:_FlameList
	*** 0004cf	50 			push	ax
	*** 0004d0	56 			push	si
	*** 0004d1	e8 8e fb 		call	ADDHEAD
	*** 0004d4	80 46 fb 01 		add	BYTE PTR [bp-5],1
	*** 0004d8	81 7e fa 00 06 		cmp	WORD PTR [bp-6],1536
	*** 0004dd	7d 03 			jge	$JCC1245
	*** 0004df	e9 44 ff 		jmp	$F1430
					$JCC1245:
;|*** 	}
;|*** }
; Line 291
					$EX1428:
	*** 0004e2	5e 			pop	si
	*** 0004e3	8b e5 			mov	sp,bp
	*** 0004e5	5d 			pop	bp
	*** 0004e6	c2 04 00 		ret	4
	*** 0004e9	90 			nop	

HIT	ENDP
;|*** 
;|*** //
;|*** // Explode - explode an object
;|*** //
;|*** 
;|*** VOID NEAR PASCAL Explode( HDC hDC, NPOBJ npObj )
;|*** {
; Line 298
	PUBLIC	EXPLODE
EXPLODE	PROC NEAR
	*** 0004ea	55 			push	bp
	*** 0004eb	8b ec 			mov	bp,sp
	*** 0004ed	83 ec 0a 		sub	sp,10
	*** 0004f0	56 			push	si
;	hDC = 6
;	npObj = 4
;	nCnt = -2
;	nSize = -4
;	npFlame = -6
;|*** 	INT             nCnt, nSize = npObj->byPts;
; Line 299
	*** 0004f1	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 0004f4	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 0004f7	2a e4 			sub	ah,ah
	*** 0004f9	89 46 fc 		mov	WORD PTR [bp-4],ax	;nSize
;|*** 
;|*** 	DrawObject( hDC, npObj );
; Line 301
	*** 0004fc	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 0004ff	53 			push	bx
	*** 000500	e8 1b fc 		call	DRAWOBJECT
;|*** 	for (nCnt = 0; nCnt < nSize; ++nCnt)
; Line 302
	*** 000503	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;nCnt
	*** 000508	83 7e fc 00 		cmp	WORD PTR [bp-4],0	;nSize
	*** 00050c	7f 03 			jg	$JCC1292
	*** 00050e	e9 34 01 		jmp	$FB1442
					$JCC1292:
	*** 000511	8b 46 04 		mov	ax,WORD PTR [bp+4]	;npObj
	*** 000514	05 18 00 		add	ax,24
	*** 000517	89 46 f8 		mov	WORD PTR [bp-8],ax
	*** 00051a	c7 46 f6 00 00 		mov	WORD PTR [bp-10],0
					$F1440:
;|*** 	{
;|*** 		NPOBJ npFlame;
;|*** 		if (arand( 2 )) continue;
; Line 305
	*** 00051f	b8 02 00 		mov	ax,2
	*** 000522	50 			push	ax
	*** 000523	e8 da fa 		call	ARAND
	*** 000526	0b c0 			or	ax,ax
	*** 000528	74 03 			je	$JCC1320
	*** 00052a	e9 02 01 		jmp	$FC1441
					$JCC1320:
;|*** 		if (!(npFlame = RemHeadObj( &FreeList ))) return;
; Line 306
	*** 00052d	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000530	50 			push	ax
	*** 000531	e8 70 fb 		call	REMHEAD
	*** 000534	89 46 fa 		mov	WORD PTR [bp-6],ax	;npFlame
	*** 000537	0b c0 			or	ax,ax
	*** 000539	75 03 			jne	$JCC1337
	*** 00053b	e9 10 01 		jmp	$EX1437
					$JCC1337:
;|*** 		npFlame->Pos.x = npObj->Pos.x;
; Line 307
	*** 00053e	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000541	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000544	8b 76 fa 		mov	si,WORD PTR [bp-6]	;npFlame
	*** 000547	89 44 04 		mov	WORD PTR [si+4],ax
;|*** 		npFlame->Pos.y = npObj->Pos.y;
; Line 308
	*** 00054a	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 00054d	89 44 06 		mov	WORD PTR [si+6],ax
;|*** 		npFlame->Vel.x = npObj->Vel.x;
; Line 309
	*** 000550	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 000553	89 44 08 		mov	WORD PTR [si+8],ax
;|*** 		npFlame->Vel.y = npObj->Vel.y;
; Line 310
	*** 000556	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 000559	89 44 0a 		mov	WORD PTR [si+10],ax
;|*** 		npFlame->nDir = npObj->nDir + nCnt * DEGREE_SIZE / nSize + arand( 32 );
; Line 311
	*** 00055c	b8 20 00 		mov	ax,32
	*** 00055f	50 			push	ax
	*** 000560	e8 9d fa 		call	ARAND
	*** 000563	8b c8 			mov	cx,ax
	*** 000565	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000568	99 			cwd	
	*** 000569	f7 7e fc 		idiv	WORD PTR [bp-4]	;nSize
	*** 00056c	03 c8 			add	cx,ax
	*** 00056e	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000571	03 4f 0e 		add	cx,WORD PTR [bx+14]
	*** 000574	89 4c 0e 		mov	WORD PTR [si+14],cx
;|*** 		npFlame->nSpin = arand( 31 ) - 15;
; Line 312
	*** 000577	b8 1f 00 		mov	ax,31
	*** 00057a	50 			push	ax
	*** 00057b	e8 82 fa 		call	ARAND
	*** 00057e	2d 0f 00 		sub	ax,15
	*** 000581	89 44 10 		mov	WORD PTR [si+16],ax
;|*** 		npFlame->nCount = 25 + arand( 16 );
; Line 313
	*** 000584	b8 10 00 		mov	ax,16
	*** 000587	50 			push	ax
	*** 000588	e8 75 fa 		call	ARAND
	*** 00058b	05 19 00 		add	ax,25
	*** 00058e	89 44 12 		mov	WORD PTR [si+18],ax
;|*** 		npFlame->byColor = npObj->byColor;
; Line 314
	*** 000591	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 000594	8a 47 16 		mov	al,BYTE PTR [bx+22]
	*** 000597	88 44 16 		mov	BYTE PTR [si+22],al
;|*** 		npFlame->byPts = 2;
; Line 315
	*** 00059a	c6 44 17 02 		mov	BYTE PTR [si+23],2
;|*** 		npFlame->Pts[0] = npObj->Pts[nCnt];
; Line 316
	*** 00059e	8b 5e f8 		mov	bx,WORD PTR [bp-8]
	*** 0005a1	8b 07 			mov	ax,WORD PTR [bx]
	*** 0005a3	8b 57 02 		mov	dx,WORD PTR [bx+2]
	*** 0005a6	89 44 18 		mov	WORD PTR [si+24],ax
	*** 0005a9	89 54 1a 		mov	WORD PTR [si+26],dx
;|*** 		if (nCnt == nSize - 1) npFlame->Pts[1] = npObj->Pts[0];
; Line 317
	*** 0005ac	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;nSize
	*** 0005af	2b 46 fe 		sub	ax,WORD PTR [bp-2]	;nCnt
	*** 0005b2	48 			dec	ax
	*** 0005b3	75 0b 			jne	$I1446
	*** 0005b5	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npObj
	*** 0005b8	8b 47 18 		mov	ax,WORD PTR [bx+24]
	*** 0005bb	8b 57 1a 		mov	dx,WORD PTR [bx+26]
	*** 0005be	eb 09 			jmp	SHORT $I1447
					$I1446:
	*** 0005c0	8b 5e f8 		mov	bx,WORD PTR [bp-8]
	*** 0005c3	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 0005c6	8b 57 06 		mov	dx,WORD PTR [bx+6]
					$I1447:
	*** 0005c9	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npFlame
	*** 0005cc	89 47 1c 		mov	WORD PTR [bx+28],ax
	*** 0005cf	89 57 1e 		mov	WORD PTR [bx+30],dx
;|*** 		else npFlame->Pts[1] = npObj->Pts[nCnt + 1];
;|*** 		ACCEL( npFlame, npFlame->nDir, 60 - npFlame->nCount );
; Line 319
	*** 0005d2	b8 00 40 		mov	ax,16384
	*** 0005d5	99 			cwd	
	*** 0005d6	52 			push	dx
	*** 0005d7	50 			push	ax
	*** 0005d8	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npFlame
	*** 0005db	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 0005de	2a ff 			sub	bh,bh
	*** 0005e0	d1 e3 			shl	bx,1
	*** 0005e2	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 0005e6	b9 3c 00 		mov	cx,60
	*** 0005e9	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npFlame
	*** 0005ec	2b 4f 12 		sub	cx,WORD PTR [bx+18]
	*** 0005ef	f7 e9 			imul	cx
	*** 0005f1	52 			push	dx
	*** 0005f2	50 			push	ax
	*** 0005f3	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0005f8	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npFlame
	*** 0005fb	01 47 08 		add	WORD PTR [bx+8],ax
	*** 0005fe	b8 00 40 		mov	ax,16384
	*** 000601	99 			cwd	
	*** 000602	52 			push	dx
	*** 000603	50 			push	ax
	*** 000604	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 000607	2a ff 			sub	bh,bh
	*** 000609	d1 e3 			shl	bx,1
	*** 00060b	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 00060f	b9 3c 00 		mov	cx,60
	*** 000612	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npFlame
	*** 000615	2b 4f 12 		sub	cx,WORD PTR [bx+18]
	*** 000618	f7 e9 			imul	cx
	*** 00061a	52 			push	dx
	*** 00061b	50 			push	ax
	*** 00061c	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 000621	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npFlame
	*** 000624	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &FlameList, npFlame );
; Line 320
	*** 000627	b8 00 00 		mov	ax,OFFSET DGROUP:_FlameList
	*** 00062a	50 			push	ax
	*** 00062b	53 			push	bx
	*** 00062c	e8 33 fa 		call	ADDHEAD
;|*** 	for (nCnt = 0; nCnt < nSize; ++nCnt)
; Line 302
					$FC1441:
	*** 00062f	83 46 f8 04 		add	WORD PTR [bp-8],4
	*** 000633	80 46 f7 01 		add	BYTE PTR [bp-9],1
	*** 000637	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;nSize
	*** 00063a	ff 46 fe 		inc	WORD PTR [bp-2]	;nCnt
	*** 00063d	39 46 fe 		cmp	WORD PTR [bp-2],ax	;nCnt
	*** 000640	7d 03 			jge	$JCC1600
	*** 000642	e9 da fe 		jmp	$F1440
					$JCC1600:
;|*** 	{
;|*** 		NPOBJ npFlame;
;|*** 		if (arand( 2 )) continue;
;|*** 		if (!(npFlame = RemHeadObj( &FreeList ))) return;
;|*** 		npFlame->Pos.x = npObj->Pos.x;
;|*** 		npFlame->Pos.y = npObj->Pos.y;
;|*** 		npFlame->Vel.x = npObj->Vel.x;
;|*** 		npFlame->Vel.y = npObj->Vel.y;
;|*** 		npFlame->nDir = npObj->nDir + nCnt * DEGREE_SIZE / nSize + arand( 32 );
;|*** 		npFlame->nSpin = arand( 31 ) - 15;
;|*** 		npFlame->nCount = 25 + arand( 16 );
;|*** 		npFlame->byColor = npObj->byColor;
;|*** 		npFlame->byPts = 2;
;|*** 		npFlame->Pts[0] = npObj->Pts[nCnt];
;|*** 		if (nCnt == nSize - 1) npFlame->Pts[1] = npObj->Pts[0];
;|*** 		else npFlame->Pts[1] = npObj->Pts[nCnt + 1];
;|*** 		ACCEL( npFlame, npFlame->nDir, 60 - npFlame->nCount );
;|*** 		AddHeadObj( &FlameList, npFlame );
;|*** 	}
; Line 321
					$FB1442:
;|*** 	Hit( hDC, npObj );
; Line 322
	*** 000645	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 000648	ff 76 04 		push	WORD PTR [bp+4]	;npObj
	*** 00064b	e8 cc fd 		call	HIT
;|*** }
; Line 323
					$EX1437:
	*** 00064e	5e 			pop	si
	*** 00064f	8b e5 			mov	sp,bp
	*** 000651	5d 			pop	bp
	*** 000652	c2 04 00 		ret	4
	*** 000655	90 			nop	

EXPLODE	ENDP
;|*** 
;|*** //
;|*** // HitPlayer - blow up the player
;|*** //
;|*** 
;|*** BOOL NEAR PASCAL HitPlayer( HDC hDC, NPOBJ npObj )
;|*** {
; Line 330
	PUBLIC	HITPLAYER
HITPLAYER	PROC NEAR
	*** 000656	55 			push	bp
	*** 000657	8b ec 			mov	bp,sp
	*** 000659	83 ec 08 		sub	sp,8
	*** 00065c	56 			push	si
;	hDC = 6
;	npObj = 4
;	Vel = -6
;	nMass = -2
;	nSpin = -8
;|*** 	POINT           Vel;
;|*** 	INT             nMass, nSpin;
;|*** 
;|*** 	if (nSafe || (npPlayer->nCount <= 0)) return( FALSE );
; Line 334
	*** 00065d	83 3e 00 00 00 		cmp	WORD PTR _nSafe,0
	*** 000662	74 03 			je	$JCC1634
	*** 000664	e9 f1 00 		jmp	$I1455
					$JCC1634:
	*** 000667	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00066b	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 00066f	7f 03 			jg	$JCC1647
	*** 000671	e9 e4 00 		jmp	$I1455
					$JCC1647:
;|*** 
;|*** 	// rumble and shake both objects
;|*** 	nMass = npPlayer->nMass + npObj->nMass;
; Line 337
	*** 000674	8b 47 0c 		mov	ax,WORD PTR [bx+12]
	*** 000677	8b 76 04 		mov	si,WORD PTR [bp+4]	;npObj
	*** 00067a	8b c8 			mov	cx,ax
	*** 00067c	03 44 0c 		add	ax,WORD PTR [si+12]
	*** 00067f	89 46 fe 		mov	WORD PTR [bp-2],ax	;nMass
;|*** 
;|*** 	nSpin = npPlayer->nSpin + npObj->nSpin;
; Line 339
	*** 000682	8b 57 10 		mov	dx,WORD PTR [bx+16]
	*** 000685	03 54 10 		add	dx,WORD PTR [si+16]
	*** 000688	89 56 f8 		mov	WORD PTR [bp-8],dx	;nSpin
;|*** 	npObj->nSpin -= MulDiv( nSpin, npPlayer->nMass, nMass );
; Line 340
	*** 00068b	52 			push	dx
	*** 00068c	51 			push	cx
	*** 00068d	50 			push	ax
	*** 00068e	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 000693	29 44 10 		sub	WORD PTR [si+16],ax
;|*** 	npPlayer->nSpin -= MulDiv( nSpin, npObj->nMass, nMass );
; Line 341
	*** 000696	ff 76 f8 		push	WORD PTR [bp-8]	;nSpin
	*** 000699	ff 74 0c 		push	WORD PTR [si+12]
	*** 00069c	ff 76 fe 		push	WORD PTR [bp-2]	;nMass
	*** 00069f	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 0006a4	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0006a8	29 47 10 		sub	WORD PTR [bx+16],ax
;|*** 
;|*** 	Vel.x = npPlayer->Vel.x - npObj->Vel.x;
; Line 343
	*** 0006ab	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0006af	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 0006b2	2b 44 08 		sub	ax,WORD PTR [si+8]
	*** 0006b5	89 46 fa 		mov	WORD PTR [bp-6],ax	;Vel
;|*** 	Vel.y = npPlayer->Vel.y - npObj->Vel.y;
; Line 344
	*** 0006b8	8b 4f 0a 		mov	cx,WORD PTR [bx+10]
	*** 0006bb	2b 4c 0a 		sub	cx,WORD PTR [si+10]
	*** 0006be	89 4e fc 		mov	WORD PTR [bp-4],cx
;|*** 	npObj->Vel.x += MulDiv( Vel.x, npPlayer->nMass, nMass );
; Line 345
	*** 0006c1	50 			push	ax
	*** 0006c2	ff 77 0c 		push	WORD PTR [bx+12]
	*** 0006c5	ff 76 fe 		push	WORD PTR [bp-2]	;nMass
	*** 0006c8	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 0006cd	01 44 08 		add	WORD PTR [si+8],ax
;|*** 	npObj->Vel.y += MulDiv( Vel.y, npPlayer->nMass, nMass );
; Line 346
	*** 0006d0	ff 76 fc 		push	WORD PTR [bp-4]
	*** 0006d3	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0006d7	ff 77 0c 		push	WORD PTR [bx+12]
	*** 0006da	ff 76 fe 		push	WORD PTR [bp-2]	;nMass
	*** 0006dd	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 0006e2	01 44 0a 		add	WORD PTR [si+10],ax
;|*** 	npPlayer->Vel.x -= MulDiv( Vel.x, npObj->nMass, nMass );
; Line 347
	*** 0006e5	ff 76 fa 		push	WORD PTR [bp-6]	;Vel
	*** 0006e8	ff 74 0c 		push	WORD PTR [si+12]
	*** 0006eb	ff 76 fe 		push	WORD PTR [bp-2]	;nMass
	*** 0006ee	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 0006f3	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0006f7	29 47 08 		sub	WORD PTR [bx+8],ax
;|*** 	npPlayer->Vel.y -= MulDiv( Vel.y, npObj->nMass, nMass );
; Line 348
	*** 0006fa	ff 76 fc 		push	WORD PTR [bp-4]
	*** 0006fd	ff 74 0c 		push	WORD PTR [si+12]
	*** 000700	ff 76 fe 		push	WORD PTR [bp-2]	;nMass
	*** 000703	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 000708	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00070c	29 47 0a 		sub	WORD PTR [bx+10],ax
;|*** 
;|*** 	if (--npPlayer->nCount)
; Line 350
	*** 00070f	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000713	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 000716	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00071a	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 00071e	74 24 			je	$I1456
;|*** 	{
;|*** 		npPlayer->byColor = (BYTE)(BLACK + npPlayer->nCount);
; Line 352
	*** 000720	8a 47 12 		mov	al,BYTE PTR [bx+18]
	*** 000723	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 		if (npPlayer->byColor > WHITE) npPlayer->byColor = WHITE;
; Line 353
	*** 000726	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00072a	80 7f 16 03 		cmp	BYTE PTR [bx+22],3
	*** 00072e	76 04 			jbe	$I1457
	*** 000730	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** 		Hit( hDC, npPlayer );
; Line 354
					$I1457:
	*** 000734	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 000737	ff 36 00 00 		push	WORD PTR _npPlayer
	*** 00073b	e8 dc fc 		call	HIT
;|*** 		return( TRUE );
; Line 355
	*** 00073e	b8 01 00 		mov	ax,1
	*** 000741	eb 17 			jmp	SHORT $EX1450
	*** 000743	90 			nop	
;|*** 	}
;|*** 
;|*** 	// final death
;|*** 	npPlayer->byColor = WHITE;
; Line 359
					$I1456:
	*** 000744	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** 	Explode( hDC, npPlayer );
; Line 360
	*** 000748	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 00074b	ff 36 00 00 		push	WORD PTR _npPlayer
	*** 00074f	e8 98 fd 		call	EXPLODE
;|*** 	SetRestart( RESTART_GAME );
; Line 361
	*** 000752	2b c0 			sub	ax,ax
	*** 000754	50 			push	ax
	*** 000755	e8 b0 fb 		call	SETRESTART
;|*** 	if (nSafe || (npPlayer->nCount <= 0)) return( FALSE );
; Line 334
					$I1455:
	*** 000758	2b c0 			sub	ax,ax
;|*** 
;|*** 	// rumble and shake both objects
;|*** 	nMass = npPlayer->nMass + npObj->nMass;
;|*** 
;|*** 	nSpin = npPlayer->nSpin + npObj->nSpin;
;|*** 	npObj->nSpin -= MulDiv( nSpin, npPlayer->nMass, nMass );
;|*** 	npPlayer->nSpin -= MulDiv( nSpin, npObj->nMass, nMass );
;|*** 
;|*** 	Vel.x = npPlayer->Vel.x - npObj->Vel.x;
;|*** 	Vel.y = npPlayer->Vel.y - npObj->Vel.y;
;|*** 	npObj->Vel.x += MulDiv( Vel.x, npPlayer->nMass, nMass );
;|*** 	npObj->Vel.y += MulDiv( Vel.y, npPlayer->nMass, nMass );
;|*** 	npPlayer->Vel.x -= MulDiv( Vel.x, npObj->nMass, nMass );
;|*** 	npPlayer->Vel.y -= MulDiv( Vel.y, npObj->nMass, nMass );
;|*** 
;|*** 	if (--npPlayer->nCount)
;|*** 	{
;|*** 		npPlayer->byColor = (BYTE)(BLACK + npPlayer->nCount);
;|*** 		if (npPlayer->byColor > WHITE) npPlayer->byColor = WHITE;
;|*** 		Hit( hDC, npPlayer );
;|*** 		return( TRUE );
;|*** 	}
;|*** 
;|*** 	// final death
;|*** 	npPlayer->byColor = WHITE;
;|*** 	Explode( hDC, npPlayer );
;|*** 	SetRestart( RESTART_GAME );
;|*** 	return( FALSE );
;|*** }
; Line 363
					$EX1450:
	*** 00075a	5e 			pop	si
	*** 00075b	8b e5 			mov	sp,bp
	*** 00075d	5d 			pop	bp
	*** 00075e	c2 04 00 		ret	4
	*** 000761	90 			nop	

HITPLAYER	ENDP
;|*** 
;|*** //
;|*** // CreateLetter - make a new letter object
;|*** //
;|*** 
;|*** NPOBJ FAR PASCAL CreateLetter( CHAR cLetter, INT nSize )
;|*** {
; Line 370
	PUBLIC	CREATELETTER
CREATELETTER	PROC FAR
	*** 000762	55 			push	bp
	*** 000763	8b ec 			mov	bp,sp
	*** 000765	83 ec 0a 		sub	sp,10
	*** 000768	56 			push	si
;	cLetter = 8
;	nSize = 6
;	npLtr = -2
;	nCnt = -4
;	npDesc = -6
;|*** 	NPOBJ           npLtr;
;|*** 	INT             nCnt;
;|*** 	NPSTR           npDesc;
;|*** 
;|*** 	if (cLetter >= '0' && cLetter <= '9') npDesc = szNumberDesc[cLetter - '0'];
; Line 375
	*** 000769	80 7e 08 30 		cmp	BYTE PTR [bp+8],48	;cLetter
	*** 00076d	7c 17 			jl	$I1464
	*** 00076f	80 7e 08 39 		cmp	BYTE PTR [bp+8],57	;cLetter
	*** 000773	7f 11 			jg	$I1464
	*** 000775	8a 46 08 		mov	al,BYTE PTR [bp+8]	;cLetter
	*** 000778	98 			cbw	
	*** 000779	8b d8 			mov	bx,ax
	*** 00077b	d1 e3 			shl	bx,1
	*** 00077d	8b 87 a0 ff 		mov	ax,WORD PTR _szNumberDesc[bx-96]
					$L20133:
	*** 000781	89 46 fa 		mov	WORD PTR [bp-6],ax	;npDesc
;|*** 	else if (cLetter >= 'A' && cLetter <= 'Z') npDesc = szLetterDesc[cLetter - 'A'];
; Line 376
	*** 000784	eb 42 			jmp	SHORT $I1465
					$I1464:
	*** 000786	80 7e 08 41 		cmp	BYTE PTR [bp+8],65	;cLetter
	*** 00078a	7c 14 			jl	$I1466
	*** 00078c	80 7e 08 5a 		cmp	BYTE PTR [bp+8],90	;cLetter
	*** 000790	7f 0e 			jg	$I1466
	*** 000792	8a 46 08 		mov	al,BYTE PTR [bp+8]	;cLetter
	*** 000795	98 			cbw	
	*** 000796	8b d8 			mov	bx,ax
	*** 000798	d1 e3 			shl	bx,1
	*** 00079a	8b 87 7e ff 		mov	ax,WORD PTR _szLetterDesc[bx-130]
	*** 00079e	eb e1 			jmp	SHORT $L20133
					$I1466:
	*** 0007a0	80 7e 08 61 		cmp	BYTE PTR [bp+8],97	;cLetter
	*** 0007a4	7c 14 			jl	$I1468
	*** 0007a6	80 7e 08 7a 		cmp	BYTE PTR [bp+8],122	;cLetter
	*** 0007aa	7f 0e 			jg	$I1468
	*** 0007ac	8a 46 08 		mov	al,BYTE PTR [bp+8]	;cLetter
	*** 0007af	98 			cbw	
	*** 0007b0	8b d8 			mov	bx,ax
	*** 0007b2	d1 e3 			shl	bx,1
	*** 0007b4	8b 87 3e ff 		mov	ax,WORD PTR _szLetterDesc[bx-194]
	*** 0007b8	eb c7 			jmp	SHORT $L20133
					$I1468:
	*** 0007ba	80 7e 08 2e 		cmp	BYTE PTR [bp+8],46	;cLetter
	*** 0007be	74 03 			je	$JCC1982
	*** 0007c0	e9 a5 00 		jmp	$I1470
					$JCC1982:
	*** 0007c3	c7 46 fa 9c 00 		mov	WORD PTR [bp-6],OFFSET DGROUP:$SG1471	;npDesc
;|*** 	else if (cLetter >= 'a' && cLetter <= 'z') npDesc = szLetterDesc[cLetter - 'a'];
;|*** 	else if (cLetter == '.') npDesc = "l";
;|*** 	else return( NULL );
; Line 379
					$I1465:
;|*** 
;|*** 	if (npLtr = RemHeadObj( &FreeList ))
; Line 381
	*** 0007c8	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 0007cb	50 			push	ax
	*** 0007cc	e8 d5 f8 		call	REMHEAD
	*** 0007cf	89 46 fe 		mov	WORD PTR [bp-2],ax	;npLtr
	*** 0007d2	0b c0 			or	ax,ax
	*** 0007d4	75 03 			jne	$JCC2004
	*** 0007d6	e9 8a 00 		jmp	$I1473
					$JCC2004:
;|*** 	{
;|*** 		npLtr->nMass = 1;
; Line 383
	*** 0007d9	8b d8 			mov	bx,ax
	*** 0007db	c7 47 0c 01 00 		mov	WORD PTR [bx+12],1
;|*** 		npLtr->nDir = 0;
;|*** 		npLtr->nSpin = 0;
; Line 385
	*** 0007e0	2b c0 			sub	ax,ax
	*** 0007e2	89 47 0e 		mov	WORD PTR [bx+14],ax
	*** 0007e5	89 47 10 		mov	WORD PTR [bx+16],ax
;|*** 		npLtr->nCount = 40;
; Line 386
	*** 0007e8	c7 47 12 28 00 		mov	WORD PTR [bx+18],40
;|*** 		npLtr->byColor = WHITE;
; Line 387
	*** 0007ed	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** 		npLtr->byPts = (BYTE)(nCnt = strlen( npDesc ));
; Line 388
	*** 0007f1	ff 76 fa 		push	WORD PTR [bp-6]	;npDesc
	*** 0007f4	9a 00 00 00 00 		call	FAR PTR _strlen
	*** 0007f9	83 c4 02 		add	sp,2
	*** 0007fc	89 46 fc 		mov	WORD PTR [bp-4],ax	;nCnt
	*** 0007ff	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npLtr
	*** 000802	88 47 17 		mov	BYTE PTR [bx+23],al
	*** 000805	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;nCnt
	*** 000808	d1 e0 			shl	ax,1
	*** 00080a	d1 e0 			shl	ax,1
	*** 00080c	03 d8 			add	bx,ax
	*** 00080e	83 c3 1a 		add	bx,26
	*** 000811	89 5e f6 		mov	WORD PTR [bp-10],bx
;|*** 		while (nCnt--)
; Line 389
	*** 000814	eb 35 			jmp	SHORT $L20134
					$FC1475:
;|*** 		{
;|*** 			npLtr->Pts[nCnt] = LetterPart[npDesc[nCnt] - 'a'];
; Line 391
	*** 000816	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npDesc
	*** 000819	8b 76 fc 		mov	si,WORD PTR [bp-4]	;nCnt
	*** 00081c	8a 00 			mov	al,BYTE PTR [bx][si]
	*** 00081e	98 			cbw	
	*** 00081f	8b d8 			mov	bx,ax
	*** 000821	d1 e3 			shl	bx,1
	*** 000823	d1 e3 			shl	bx,1
	*** 000825	8b 87 7c fe 		mov	ax,WORD PTR _LetterPart[bx-388]
	*** 000829	8b 97 7e fe 		mov	dx,WORD PTR _LetterPart[bx-386]
	*** 00082d	8b 5e f6 		mov	bx,WORD PTR [bp-10]
	*** 000830	89 47 fe 		mov	WORD PTR [bx-2],ax
	*** 000833	89 17 			mov	WORD PTR [bx],dx
;|*** 			npLtr->Pts[nCnt].y = MulDiv( npLtr->Pts[nCnt].y, nSize, LETTER_MAX );
; Line 392
	*** 000835	8b 5e f6 		mov	bx,WORD PTR [bp-10]
	*** 000838	ff 37 			push	WORD PTR [bx]
	*** 00083a	ff 76 06 		push	WORD PTR [bp+6]	;nSize
	*** 00083d	b8 00 01 		mov	ax,256
	*** 000840	50 			push	ax
	*** 000841	9a 00 00 00 00 		call	FAR PTR MULDIV
	*** 000846	8b 5e f6 		mov	bx,WORD PTR [bp-10]
	*** 000849	89 07 			mov	WORD PTR [bx],ax
;|*** 		}
; Line 393
					$L20134:
	*** 00084b	83 6e f6 04 		sub	WORD PTR [bp-10],4
	*** 00084f	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;nCnt
	*** 000852	ff 4e fc 		dec	WORD PTR [bp-4]	;nCnt
	*** 000855	0b c0 			or	ax,ax
	*** 000857	75 bd 			jne	$FC1475
;|*** 		AddHeadObj( &LetterList, npLtr );
; Line 394
	*** 000859	b8 00 00 		mov	ax,OFFSET DGROUP:_LetterList
	*** 00085c	50 			push	ax
	*** 00085d	ff 76 fe 		push	WORD PTR [bp-2]	;npLtr
	*** 000860	e8 ff f7 		call	ADDHEAD
;|*** 	}
;|*** 	return( npLtr );
; Line 396
					$I1473:
	*** 000863	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;npLtr
	*** 000866	eb 02 			jmp	SHORT $EX1460
;|*** 	else return( NULL );
; Line 379
					$I1470:
	*** 000868	2b c0 			sub	ax,ax
;|*** 
;|*** 	if (npLtr = RemHeadObj( &FreeList ))
;|*** 	{
;|*** 		npLtr->nMass = 1;
;|*** 		npLtr->nDir = 0;
;|*** 		npLtr->nSpin = 0;
;|*** 		npLtr->nCount = 40;
;|*** 		npLtr->byColor = WHITE;
;|*** 		npLtr->byPts = (BYTE)(nCnt = strlen( npDesc ));
;|*** 		while (nCnt--)
;|*** 		{
;|*** 			npLtr->Pts[nCnt] = LetterPart[npDesc[nCnt] - 'a'];
;|*** 			npLtr->Pts[nCnt].y = MulDiv( npLtr->Pts[nCnt].y, nSize, LETTER_MAX );
;|*** 		}
;|*** 		AddHeadObj( &LetterList, npLtr );
;|*** 	}
;|*** 	return( npLtr );
;|*** }
; Line 397
					$EX1460:
	*** 00086a	5e 			pop	si
	*** 00086b	8b e5 			mov	sp,bp
	*** 00086d	5d 			pop	bp
	*** 00086e	ca 04 00 		ret	4
	*** 000871	90 			nop	

CREATELETTER	ENDP
;|*** 
;|*** //
;|*** // DrawLetters - draw letters and such
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawLetters( HDC hDC )
;|*** {
; Line 404
	PUBLIC	DRAWLETTERS
DRAWLETTERS	PROC NEAR
	*** 000872	55 			push	bp
	*** 000873	8b ec 			mov	bp,sp
	*** 000875	83 ec 04 		sub	sp,4
;	hDC = 4
;	npLtr = -2
;	npNext = -4
;|*** 	NPOBJ           npLtr, npNext;
;|*** 
;|*** 	for (npLtr = HeadObj( &LetterList ); npLtr; npLtr = npNext)
; Line 407
	*** 000878	a1 00 00 		mov	ax,WORD PTR _LetterList
	*** 00087b	89 46 fe 		mov	WORD PTR [bp-2],ax	;npLtr
	*** 00087e	0b c0 			or	ax,ax
	*** 000880	74 49 			je	$EX1478
					$F1481:
;|*** 	{
;|*** 		npNext = NextObj( npLtr );
; Line 409
	*** 000882	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npLtr
	*** 000885	8b 07 			mov	ax,WORD PTR [bx]
	*** 000887	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 		switch (--npLtr->nCount)
; Line 410
	*** 00088a	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 00088d	8b 47 12 		mov	ax,WORD PTR [bx+18]
;|*** 		{
;|*** 		case 3:
;|*** 			--npLtr->byColor;
;|*** 			break;
;|*** 		case 0:
;|*** 			RemoveObj( &LetterList, npLtr );
;|*** 			AddHeadObj( &FreeList, npLtr );
;|*** 			break;
;|*** 		}
; Line 419
	*** 000890	0b c0 			or	ax,ax
	*** 000892	74 08 			je	$SC1489
	*** 000894	2d 03 00 		sub	ax,3
	*** 000897	74 19 			je	$SC1488
	*** 000899	eb 1d 			jmp	SHORT $SB1485
	*** 00089b	90 			nop	
;|*** 		case 0:
; Line 415
					$SC1489:
;|*** 			RemoveObj( &LetterList, npLtr );
; Line 416
	*** 00089c	b8 00 00 		mov	ax,OFFSET DGROUP:_LetterList
	*** 00089f	50 			push	ax
	*** 0008a0	ff 76 fe 		push	WORD PTR [bp-2]	;npLtr
	*** 0008a3	e8 40 f8 		call	REMOVE
;|*** 			AddHeadObj( &FreeList, npLtr );
; Line 417
	*** 0008a6	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 0008a9	50 			push	ax
	*** 0008aa	ff 76 fe 		push	WORD PTR [bp-2]	;npLtr
	*** 0008ad	e8 b2 f7 		call	ADDHEAD
;|*** 			break;
; Line 418
	*** 0008b0	eb 06 			jmp	SHORT $SB1485
;|*** 		case 3:
; Line 412
					$SC1488:
;|*** 			--npLtr->byColor;
; Line 413
	*** 0008b2	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npLtr
	*** 0008b5	fe 4f 16 		dec	BYTE PTR [bx+22]
;|*** 			break;
;|*** 		case 0:
;|*** 			RemoveObj( &LetterList, npLtr );
;|*** 			AddHeadObj( &FreeList, npLtr );
;|*** 			break;
;|*** 		}
; Line 419
					$SB1485:
;|*** 		DrawObject( hDC, npLtr );
; Line 420
	*** 0008b8	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 0008bb	ff 76 fe 		push	WORD PTR [bp-2]	;npLtr
	*** 0008be	e8 5d f8 		call	DRAWOBJECT
	*** 0008c1	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 0008c4	89 46 fe 		mov	WORD PTR [bp-2],ax	;npLtr
	*** 0008c7	0b c0 			or	ax,ax
	*** 0008c9	75 b7 			jne	$F1481
;|*** 	}
;|*** }
; Line 422
					$EX1478:
	*** 0008cb	8b e5 			mov	sp,bp
	*** 0008cd	5d 			pop	bp
	*** 0008ce	c2 02 00 		ret	2
	*** 0008d1	90 			nop	

DRAWLETTERS	ENDP
;|*** 
;|*** //
;|*** // CreateBonus - make a new bonus object
;|*** //
;|*** 
;|*** VOID NEAR PASCAL CreateBonus( VOID )
;|*** {
; Line 429
	PUBLIC	CREATEBONUS
CREATEBONUS	PROC NEAR
	*** 0008d2	55 			push	bp
	*** 0008d3	8b ec 			mov	bp,sp
	*** 0008d5	83 ec 08 		sub	sp,8
;	npBonus = -4
;	nCnt = -2
;|*** 	NPOBJ           npBonus;
;|*** 	INT             nCnt;
;|*** 
;|*** 	if (npBonus = RemHeadObj( &FreeList ))
; Line 433
	*** 0008d8	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 0008db	50 			push	ax
	*** 0008dc	e8 c5 f7 		call	REMHEAD
	*** 0008df	89 46 fc 		mov	WORD PTR [bp-4],ax	;npBonus
	*** 0008e2	0b c0 			or	ax,ax
	*** 0008e4	75 03 			jne	$JCC2276
	*** 0008e6	e9 f9 00 		jmp	$EX1491
					$JCC2276:
;|*** 	{
;|*** 		npBonus->Pos.x = arand( CLIP_COORD * 2 ) - CLIP_COORD;
; Line 435
	*** 0008e9	b8 58 42 		mov	ax,16984
	*** 0008ec	50 			push	ax
	*** 0008ed	e8 10 f7 		call	ARAND
	*** 0008f0	2d 2c 21 		sub	ax,8492
	*** 0008f3	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 0008f6	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 		npBonus->Pos.y = -CLIP_COORD;
; Line 436
	*** 0008f9	c7 47 06 d4 de 		mov	WORD PTR [bx+6],-8492
;|*** 		npBonus->Vel.x = npBonus->Vel.y = 0;
; Line 437
	*** 0008fe	2b c0 			sub	ax,ax
	*** 000900	89 47 0a 		mov	WORD PTR [bx+10],ax
	*** 000903	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 		npBonus->nDir = arand( DEGREE_SIZE );
; Line 438
	*** 000906	b8 00 01 		mov	ax,256
	*** 000909	50 			push	ax
	*** 00090a	e8 f3 f6 		call	ARAND
	*** 00090d	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 000910	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npBonus->nSpin = (arand( 2 ) ? 12 : -12);
; Line 439
	*** 000913	b8 02 00 		mov	ax,2
	*** 000916	50 			push	ax
	*** 000917	e8 e6 f6 		call	ARAND
	*** 00091a	3d 01 00 		cmp	ax,1
	*** 00091d	1b c0 			sbb	ax,ax
	*** 00091f	24 e8 			and	al,232
	*** 000921	05 0c 00 		add	ax,12
	*** 000924	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 000927	89 47 10 		mov	WORD PTR [bx+16],ax
;|*** 		npBonus->nCount = arand( 4 ) + 1;
; Line 440
	*** 00092a	b8 04 00 		mov	ax,4
	*** 00092d	50 			push	ax
	*** 00092e	e8 cf f6 		call	ARAND
	*** 000931	40 			inc	ax
	*** 000932	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 000935	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npBonus->nDelay = 64 + arand( 128 );
; Line 441
	*** 000938	b8 80 00 		mov	ax,128
	*** 00093b	50 			push	ax
	*** 00093c	e8 c1 f6 		call	ARAND
	*** 00093f	05 40 00 		add	ax,64
	*** 000942	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 000945	89 47 14 		mov	WORD PTR [bx+20],ax
;|*** 		npBonus->nMass = 1;
; Line 442
	*** 000948	c7 47 0c 01 00 		mov	WORD PTR [bx+12],1
;|*** 		npBonus->byColor = (BYTE)(WHITE + (npBonus->nCount * 2));
; Line 443
	*** 00094d	8a 47 12 		mov	al,BYTE PTR [bx+18]
	*** 000950	d0 e0 			shl	al,1
	*** 000952	04 03 			add	al,3
	*** 000954	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 		npBonus->byPts = DIM(Bonus);
; Line 444
	*** 000957	c6 47 17 06 		mov	BYTE PTR [bx+23],6
	*** 00095b	c7 46 fa 5c 00 		mov	WORD PTR [bp-6],OFFSET DGROUP:$S1355_Bonus
	*** 000960	8d 47 18 		lea	ax,WORD PTR [bx+24]
	*** 000963	89 46 f8 		mov	WORD PTR [bp-8],ax
;|*** 		for (nCnt = 0; nCnt < DIM(Bonus); ++nCnt)
; Line 445
					$F1495:
;|*** 			npBonus->Pts[nCnt] = Bonus[nCnt];
; Line 446
	*** 000966	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 000969	83 46 fa 04 		add	WORD PTR [bp-6],4
	*** 00096d	8b 07 			mov	ax,WORD PTR [bx]
	*** 00096f	8b 57 02 		mov	dx,WORD PTR [bx+2]
	*** 000972	8b 5e f8 		mov	bx,WORD PTR [bp-8]
	*** 000975	83 46 f8 04 		add	WORD PTR [bp-8],4
	*** 000979	89 07 			mov	WORD PTR [bx],ax
	*** 00097b	89 57 02 		mov	WORD PTR [bx+2],dx
	*** 00097e	81 7e fa 74 00 		cmp	WORD PTR [bp-6],OFFSET DGROUP:$S1355_Bonus+24
	*** 000983	72 e1 			jb	$F1495
;|*** 		ACCEL( npBonus, npBonus->nDir, 30 + nLevel * 2 );
; Line 447
	*** 000985	b8 00 40 		mov	ax,16384
	*** 000988	99 			cwd	
	*** 000989	52 			push	dx
	*** 00098a	50 			push	ax
	*** 00098b	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 00098e	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 000991	2a ff 			sub	bh,bh
	*** 000993	d1 e3 			shl	bx,1
	*** 000995	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 000999	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 00099d	83 c1 0f 		add	cx,15
	*** 0009a0	d1 e1 			shl	cx,1
	*** 0009a2	f7 e9 			imul	cx
	*** 0009a4	52 			push	dx
	*** 0009a5	50 			push	ax
	*** 0009a6	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0009ab	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 0009ae	01 47 08 		add	WORD PTR [bx+8],ax
	*** 0009b1	b8 00 40 		mov	ax,16384
	*** 0009b4	99 			cwd	
	*** 0009b5	52 			push	dx
	*** 0009b6	50 			push	ax
	*** 0009b7	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 0009ba	2a ff 			sub	bh,bh
	*** 0009bc	d1 e3 			shl	bx,1
	*** 0009be	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 0009c2	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 0009c6	83 c1 0f 		add	cx,15
	*** 0009c9	d1 e1 			shl	cx,1
	*** 0009cb	f7 e9 			imul	cx
	*** 0009cd	52 			push	dx
	*** 0009ce	50 			push	ax
	*** 0009cf	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0009d4	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npBonus
	*** 0009d7	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &BonusList, npBonus );
; Line 448
	*** 0009da	b8 00 00 		mov	ax,OFFSET DGROUP:_BonusList
	*** 0009dd	50 			push	ax
	*** 0009de	53 			push	bx
	*** 0009df	e8 80 f6 		call	ADDHEAD
;|*** 	}
;|*** }
; Line 450
					$EX1491:
	*** 0009e2	8b e5 			mov	sp,bp
	*** 0009e4	5d 			pop	bp
	*** 0009e5	c3 			ret	

CREATEBONUS	ENDP
;|*** 
;|*** //
;|*** // DrawBonuses - process and draw the bonus list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawBonuses( HDC hDC )
;|*** {
; Line 457
	PUBLIC	DRAWBONUSES
DRAWBONUSES	PROC NEAR
	*** 0009e6	55 			push	bp
	*** 0009e7	8b ec 			mov	bp,sp
	*** 0009e9	83 ec 34 		sub	sp,52
	*** 0009ec	56 			push	si
;	hDC = 4
;	npBonus = -2
;	npNext = -4
;	npShot = -8
;	nDelta = -6
;	rect = -16
;	szBuff = -48
;	lBonus = -52
;|*** 	NPOBJ           npBonus, npNext;
;|*** 	LOCAL INT       nNextBonus = 1000;
;|*** 
;|*** 	if (nBadGuys && (--nNextBonus < 0))
; Line 461
	*** 0009ed	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 0009f2	74 0f 			je	$I1504
	*** 0009f4	ff 0e ba 00 		dec	WORD PTR $S1503_nNextBonus
	*** 0009f8	79 09 			jns	$I1504
;|*** 	{
;|*** 		CreateBonus();
; Line 463
	*** 0009fa	e8 d5 fe 		call	CREATEBONUS
;|*** 		nNextBonus = 1000;
; Line 464
	*** 0009fd	c7 06 ba 00 e8 03 	mov	WORD PTR $S1503_nNextBonus,1000
;|*** 	}
;|*** 
;|*** 	for (npBonus = HeadObj( &BonusList ); npBonus; npBonus = npNext)
; Line 467
					$I1504:
	*** 000a03	a1 00 00 		mov	ax,WORD PTR _BonusList
	*** 000a06	89 46 fe 		mov	WORD PTR [bp-2],ax	;npBonus
	*** 000a09	0b c0 			or	ax,ax
	*** 000a0b	75 03 			jne	$JCC2571
	*** 000a0d	e9 74 02 		jmp	$EX1500
					$JCC2571:
					$F1505:
;|*** 	{
;|*** 		NPOBJ           npShot;
;|*** 		INT             nDelta;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npBonus );
; Line 473
	*** 000a10	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000a13	8b 07 			mov	ax,WORD PTR [bx]
	*** 000a15	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 
;|*** 		MKRECT( &rect, npBonus->Pos, 150 );
; Line 475
	*** 000a18	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000a1b	2d 96 00 		sub	ax,150
	*** 000a1e	89 46 f0 		mov	WORD PTR [bp-16],ax	;rect
	*** 000a21	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000a24	05 96 00 		add	ax,150
	*** 000a27	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 000a2a	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000a2d	2d 96 00 		sub	ax,150
	*** 000a30	89 46 f2 		mov	WORD PTR [bp-14],ax
	*** 000a33	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000a36	05 96 00 		add	ax,150
	*** 000a39	89 46 f6 		mov	WORD PTR [bp-10],ax
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ))
; Line 477
	*** 000a3c	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 000a3f	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000a43	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000a46	7d 03 			jge	$JCC2630
	*** 000a48	e9 d1 00 		jmp	$I1511
					$JCC2630:
	*** 000a4b	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 000a4e	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000a51	7c 03 			jl	$JCC2641
	*** 000a53	e9 c6 00 		jmp	$I1511
					$JCC2641:
	*** 000a56	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 000a59	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000a5c	7d 03 			jge	$JCC2652
	*** 000a5e	e9 bb 00 		jmp	$I1511
					$JCC2652:
	*** 000a61	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000a64	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000a67	7c 03 			jl	$JCC2663
	*** 000a69	e9 b0 00 		jmp	$I1511
					$JCC2663:
;|*** 		{
;|*** 			if (npPlayer->nCount > 0) switch (npBonus->nCount)
; Line 479
	*** 000a6c	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 000a70	7f 03 			jg	$JCC2672
	*** 000a72	e9 80 00 		jmp	$I1512
					$JCC2672:
	*** 000a75	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000a78	8b 47 12 		mov	ax,WORD PTR [bx+18]
;|*** 			{
;|*** 			case 1:
;|*** 				{
;|*** 					CHAR szBuff[32];
;|*** 					LONG lBonus = 1000L * nLevel;
;|*** 					if (lBonus == 0) lBonus = 500;
;|*** 					lScore += lBonus;
;|*** 					wsprintf( szBuff, "%ld", lBonus );
;|*** 					PrintPlayerMessage( szBuff );
;|*** 				}
;|*** 				break;
;|*** 			case 2:
;|*** 				nSafe = 15;
;|*** 				++nShield;
;|*** 				npPlayer->byColor = GREEN;
;|*** 				PrintPlayerMessage( "EXTRA SHIELD" );
;|*** 				break;
;|*** 			case 3:
;|*** 				++nBomb;
;|*** 				PrintPlayerMessage( "EXTRA BOMB" );
;|*** 				break;
;|*** 			case 4:
;|*** 				AddExtraLife();
;|*** 				break;
;|*** 			}
; Line 504
	*** 000a7b	48 			dec	ax
	*** 000a7c	74 0c 			je	$SC1517
	*** 000a7e	48 			dec	ax
	*** 000a7f	74 4f 			je	$SC1522
	*** 000a81	48 			dec	ax
	*** 000a82	74 64 			je	$SC1524
	*** 000a84	48 			dec	ax
	*** 000a85	74 6b 			je	$SC1526
	*** 000a87	eb 6c 			jmp	SHORT $I1512
	*** 000a89	90 			nop	
;|*** 			case 1:
; Line 481
					$SC1517:
;|*** 				{
;|*** 					CHAR szBuff[32];
;|*** 					LONG lBonus = 1000L * nLevel;
;|*** 					if (lBonus == 0) lBonus = 500;
; Line 485
	*** 000a8a	b8 e8 03 		mov	ax,1000
	*** 000a8d	f7 2e 00 00 		imul	WORD PTR _nLevel
	*** 000a91	89 46 cc 		mov	WORD PTR [bp-52],ax	;lBonus
	*** 000a94	89 56 ce 		mov	WORD PTR [bp-50],dx
	*** 000a97	0b d0 			or	dx,ax
	*** 000a99	75 0a 			jne	$I1520
	*** 000a9b	c7 46 cc f4 01 		mov	WORD PTR [bp-52],500	;lBonus
	*** 000aa0	c7 46 ce 00 00 		mov	WORD PTR [bp-50],0
;|*** 					lScore += lBonus;
; Line 486
					$I1520:
	*** 000aa5	8b 46 cc 		mov	ax,WORD PTR [bp-52]	;lBonus
	*** 000aa8	8b 56 ce 		mov	dx,WORD PTR [bp-50]
	*** 000aab	01 06 00 00 		add	WORD PTR _lScore,ax
	*** 000aaf	11 16 02 00 		adc	WORD PTR _lScore+2,dx
;|*** 					wsprintf( szBuff, "%ld", lBonus );
; Line 487
	*** 000ab3	52 			push	dx
	*** 000ab4	50 			push	ax
	*** 000ab5	b8 9e 00 		mov	ax,OFFSET DGROUP:$SG1521
	*** 000ab8	1e 			push	ds
	*** 000ab9	50 			push	ax
	*** 000aba	8d 46 d0 		lea	ax,WORD PTR [bp-48]	;szBuff
	*** 000abd	16 			push	ss
	*** 000abe	50 			push	ax
	*** 000abf	9a 00 00 00 00 		call	FAR PTR _wsprintf
	*** 000ac4	83 c4 0c 		add	sp,12
;|*** 					PrintPlayerMessage( szBuff );
; Line 488
	*** 000ac7	8d 46 d0 		lea	ax,WORD PTR [bp-48]	;szBuff
					$L20135:
	*** 000aca	50 			push	ax
	*** 000acb	e8 e2 f8 		call	PRINTPLAYERMESSAGE
;|*** 				}
;|*** 				break;
; Line 490
	*** 000ace	eb 25 			jmp	SHORT $I1512
;|*** 			case 2:
; Line 491
					$SC1522:
;|*** 				nSafe = 15;
; Line 492
	*** 000ad0	c7 06 00 00 0f 00 	mov	WORD PTR _nSafe,15
;|*** 				++nShield;
; Line 493
	*** 000ad6	ff 06 00 00 		inc	WORD PTR _nShield
;|*** 				npPlayer->byColor = GREEN;
; Line 494
	*** 000ada	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000ade	c6 47 16 07 		mov	BYTE PTR [bx+22],7
;|*** 				PrintPlayerMessage( "EXTRA SHIELD" );
; Line 495
	*** 000ae2	b8 a2 00 		mov	ax,OFFSET DGROUP:$SG1523
	*** 000ae5	eb e3 			jmp	SHORT $L20135
	*** 000ae7	90 			nop	
;|*** 				break;
;|*** 			case 3:
; Line 497
					$SC1524:
;|*** 				++nBomb;
; Line 498
	*** 000ae8	ff 06 00 00 		inc	WORD PTR _nBomb
;|*** 				PrintPlayerMessage( "EXTRA BOMB" );
; Line 499
	*** 000aec	b8 af 00 		mov	ax,OFFSET DGROUP:$SG1525
	*** 000aef	eb d9 			jmp	SHORT $L20135
	*** 000af1	90 			nop	
;|*** 				break;
;|*** 			case 4:
; Line 501
					$SC1526:
;|*** 				AddExtraLife();
; Line 502
	*** 000af2	e8 fd f8 		call	ADDEXTRALIFE
;|*** 				break;
;|*** 			}
;|*** 			npBonus->nCount = 0;
; Line 505
					$I1512:
	*** 000af5	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000af8	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 			Explode( hDC, npBonus );
; Line 506
	*** 000afd	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000b00	53 			push	bx
	*** 000b01	e8 e6 f9 		call	EXPLODE
;|*** 			RemoveObj( &BonusList, npBonus );
; Line 507
	*** 000b04	b8 00 00 		mov	ax,OFFSET DGROUP:_BonusList
	*** 000b07	50 			push	ax
	*** 000b08	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000b0b	e8 d8 f5 		call	REMOVE
;|*** 			AddHeadObj( &FreeList, npBonus );
; Line 508
	*** 000b0e	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000b11	50 			push	ax
	*** 000b12	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000b15	e8 4a f5 		call	ADDHEAD
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
; Line 510
	*** 000b18	e9 86 00 		jmp	$I1527
	*** 000b1b	90 			nop	
					$I1511:
	*** 000b1c	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 000b1f	39 06 28 00 		cmp	WORD PTR $S1350_rectShotClip,ax
	*** 000b23	7f 7c 			jg	$I1527
	*** 000b25	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 000b28	39 06 2c 00 		cmp	WORD PTR $S1350_rectShotClip+4,ax
	*** 000b2c	7e 73 			jle	$I1527
	*** 000b2e	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000b31	39 06 2a 00 		cmp	WORD PTR $S1350_rectShotClip+2,ax
	*** 000b35	7f 6a 			jg	$I1527
	*** 000b37	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 000b3a	39 06 2e 00 		cmp	WORD PTR $S1350_rectShotClip+6,ax
	*** 000b3e	7e 61 			jle	$I1527
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 512
	*** 000b40	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 000b43	89 46 f8 		mov	WORD PTR [bp-8],ax	;npShot
	*** 000b46	0b c0 			or	ax,ax
	*** 000b48	74 57 			je	$I1527
					$F1529:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
; Line 514
	*** 000b4a	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 000b4d	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;npShot
	*** 000b50	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000b53	7c 40 			jl	$FC1530
	*** 000b55	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 000b58	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000b5b	7d 38 			jge	$FC1530
	*** 000b5d	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 000b60	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000b63	7c 30 			jl	$FC1530
	*** 000b65	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000b68	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000b6b	7d 28 			jge	$FC1530
;|*** 				npShot->nCount = 1;
; Line 515
	*** 000b6d	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
;|*** 				npBonus->nCount = 0;
; Line 516
	*** 000b72	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000b75	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 				Explode( hDC, npBonus );
; Line 517
	*** 000b7a	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000b7d	53 			push	bx
	*** 000b7e	e8 69 f9 		call	EXPLODE
;|*** 				RemoveObj( &BonusList, npBonus );
; Line 518
	*** 000b81	b8 00 00 		mov	ax,OFFSET DGROUP:_BonusList
	*** 000b84	50 			push	ax
	*** 000b85	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000b88	e8 5b f5 		call	REMOVE
;|*** 				AddHeadObj( &FreeList, npBonus );
; Line 519
	*** 000b8b	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000b8e	50 			push	ax
	*** 000b8f	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000b92	e8 cd f4 		call	ADDHEAD
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 512
					$FC1530:
	*** 000b95	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;npShot
	*** 000b98	8b 07 			mov	ax,WORD PTR [bx]
	*** 000b9a	89 46 f8 		mov	WORD PTR [bp-8],ax	;npShot
	*** 000b9d	0b c0 			or	ax,ax
	*** 000b9f	75 a9 			jne	$F1529
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				npShot->nCount = 1;
;|*** 				npBonus->nCount = 0;
;|*** 				Explode( hDC, npBonus );
;|*** 				RemoveObj( &BonusList, npBonus );
;|*** 				AddHeadObj( &FreeList, npBonus );
;|*** 			}
;|*** 		}
;|*** 		if (npBonus->nCount && --npBonus->nDelay <= 0)
; Line 522
					$I1527:
	*** 000ba1	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000ba4	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 000ba8	74 4c 			je	$I1534
	*** 000baa	ff 4f 14 		dec	WORD PTR [bx+20]
	*** 000bad	83 7f 14 00 		cmp	WORD PTR [bx+20],0
	*** 000bb1	7f 43 			jg	$I1534
;|*** 		{
;|*** 			--npBonus->nCount;
; Line 524
	*** 000bb3	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000bb6	ff 4f 12 		dec	WORD PTR [bx+18]
;|*** 			npBonus->nDelay = 64 + arand( 128 );
; Line 525
	*** 000bb9	b8 80 00 		mov	ax,128
	*** 000bbc	50 			push	ax
	*** 000bbd	e8 40 f4 		call	ARAND
	*** 000bc0	05 40 00 		add	ax,64
	*** 000bc3	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000bc6	89 47 14 		mov	WORD PTR [bx+20],ax
;|*** 			npBonus->byColor = (BYTE)(WHITE + (npBonus->nCount * 2));
; Line 526
	*** 000bc9	8a 47 12 		mov	al,BYTE PTR [bx+18]
	*** 000bcc	d0 e0 			shl	al,1
	*** 000bce	04 03 			add	al,3
	*** 000bd0	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 			if (npBonus->nCount == 0)
; Line 527
	*** 000bd3	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 000bd7	75 1d 			jne	$I1534
;|*** 			{
;|*** 				Explode( hDC, npBonus );
; Line 529
	*** 000bd9	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000bdc	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000bdf	e8 08 f9 		call	EXPLODE
;|*** 				RemoveObj( &BonusList, npBonus );
; Line 530
	*** 000be2	b8 00 00 		mov	ax,OFFSET DGROUP:_BonusList
	*** 000be5	50 			push	ax
	*** 000be6	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000be9	e8 fa f4 		call	REMOVE
;|*** 				AddHeadObj( &FreeList, npBonus );
; Line 531
	*** 000bec	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000bef	50 			push	ax
	*** 000bf0	ff 76 fe 		push	WORD PTR [bp-2]	;npBonus
	*** 000bf3	e8 6c f4 		call	ADDHEAD
;|*** 			}
;|*** 		}
;|*** 		nDelta = npPlayer->Pos.x - npBonus->Pos.x;
; Line 534
					$I1534:
	*** 000bf6	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000bfa	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000bfd	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000c00	2b 47 04 		sub	ax,WORD PTR [bx+4]
					$L20136:
	*** 000c03	89 46 fa 		mov	WORD PTR [bp-6],ax	;nDelta
;|*** 		while (nDelta < -16 || nDelta > 16) nDelta /= 2;
; Line 535
	*** 000c06	3d f0 ff 		cmp	ax,-16
	*** 000c09	7c 05 			jl	$FB1539
	*** 000c0b	3d 10 00 		cmp	ax,16
	*** 000c0e	7e 08 			jle	$L20021
					$FB1539:
	*** 000c10	b9 02 00 		mov	cx,2
	*** 000c13	99 			cwd	
	*** 000c14	f7 f9 			idiv	cx
	*** 000c16	eb eb 			jmp	SHORT $L20136
					$L20021:
;|*** 		npBonus->Vel.x += nDelta - npBonus->Vel.x / 16;
; Line 536
	*** 000c18	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000c1b	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 000c1e	99 			cwd	
	*** 000c1f	33 c2 			xor	ax,dx
	*** 000c21	2b c2 			sub	ax,dx
	*** 000c23	b9 04 00 		mov	cx,4
	*** 000c26	d3 f8 			sar	ax,cl
	*** 000c28	33 c2 			xor	ax,dx
	*** 000c2a	2b c2 			sub	ax,dx
	*** 000c2c	2b 46 fa 		sub	ax,WORD PTR [bp-6]	;nDelta
	*** 000c2f	f7 d8 			neg	ax
	*** 000c31	01 47 08 		add	WORD PTR [bx+8],ax
;|*** 		nDelta = npPlayer->Pos.y - npBonus->Pos.y;
; Line 537
	*** 000c34	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 000c38	8b 44 06 		mov	ax,WORD PTR [si+6]
	*** 000c3b	2b 47 06 		sub	ax,WORD PTR [bx+6]
					$L20137:
	*** 000c3e	89 46 fa 		mov	WORD PTR [bp-6],ax	;nDelta
;|*** 		while (nDelta < -16 || nDelta > 16) nDelta /= 2;
; Line 538
	*** 000c41	3d f0 ff 		cmp	ax,-16
	*** 000c44	7c 05 			jl	$FB1543
	*** 000c46	3d 10 00 		cmp	ax,16
	*** 000c49	7e 09 			jle	$L20022
					$FB1543:
	*** 000c4b	b9 02 00 		mov	cx,2
	*** 000c4e	99 			cwd	
	*** 000c4f	f7 f9 			idiv	cx
	*** 000c51	eb eb 			jmp	SHORT $L20137
	*** 000c53	90 			nop	
					$L20022:
;|*** 		npBonus->Vel.y += nDelta - npBonus->Vel.y / 16;
; Line 539
	*** 000c54	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npBonus
	*** 000c57	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 000c5a	99 			cwd	
	*** 000c5b	33 c2 			xor	ax,dx
	*** 000c5d	2b c2 			sub	ax,dx
	*** 000c5f	b9 04 00 		mov	cx,4
	*** 000c62	d3 f8 			sar	ax,cl
	*** 000c64	33 c2 			xor	ax,dx
	*** 000c66	2b c2 			sub	ax,dx
	*** 000c68	2b 46 fa 		sub	ax,WORD PTR [bp-6]	;nDelta
	*** 000c6b	f7 d8 			neg	ax
	*** 000c6d	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		DrawObject( hDC, npBonus );
; Line 540
	*** 000c70	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000c73	53 			push	bx
	*** 000c74	e8 a7 f4 		call	DRAWOBJECT
	*** 000c77	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 000c7a	89 46 fe 		mov	WORD PTR [bp-2],ax	;npBonus
	*** 000c7d	0b c0 			or	ax,ax
	*** 000c7f	74 03 			je	$JCC3199
	*** 000c81	e9 8c fd 		jmp	$F1505
					$JCC3199:
;|*** 	}
;|*** }
; Line 542
					$EX1500:
	*** 000c84	5e 			pop	si
	*** 000c85	8b e5 			mov	sp,bp
	*** 000c87	5d 			pop	bp
	*** 000c88	c2 02 00 		ret	2
	*** 000c8b	90 			nop	

DRAWBONUSES	ENDP
;|*** 
;|*** //
;|*** // DrawHunterShots - process and draw the hunter shot list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawHunterShots( HDC hDC )
;|*** {
; Line 549
	PUBLIC	DRAWHUNTERSHOTS
DRAWHUNTERSHOTS	PROC NEAR
	*** 000c8c	55 			push	bp
	*** 000c8d	8b ec 			mov	bp,sp
	*** 000c8f	83 ec 0c 		sub	sp,12
;	hDC = 4
;	npShot = -2
;	npNext = -4
;	rect = -12
;|*** 	NPOBJ           npShot, npNext;
;|*** 
;|*** 	for (npShot = HeadObj( &HunterShotList ); npShot; npShot = npNext)
; Line 552
	*** 000c92	a1 00 00 		mov	ax,WORD PTR _HunterShotList
	*** 000c95	89 46 fe 		mov	WORD PTR [bp-2],ax	;npShot
	*** 000c98	0b c0 			or	ax,ax
	*** 000c9a	75 03 			jne	$JCC3226
	*** 000c9c	e9 a8 00 		jmp	$EX1545
					$JCC3226:
					$F1548:
;|*** 	{
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npShot );
; Line 556
	*** 000c9f	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 000ca2	8b 07 			mov	ax,WORD PTR [bx]
	*** 000ca4	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 
;|*** 		MKRECT( &rect, npShot->Pos, 200 );
; Line 558
	*** 000ca7	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000caa	2d c8 00 		sub	ax,200
	*** 000cad	89 46 f4 		mov	WORD PTR [bp-12],ax	;rect
	*** 000cb0	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000cb3	05 c8 00 		add	ax,200
	*** 000cb6	89 46 f8 		mov	WORD PTR [bp-8],ax
	*** 000cb9	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000cbc	2d c8 00 		sub	ax,200
	*** 000cbf	89 46 f6 		mov	WORD PTR [bp-10],ax
	*** 000cc2	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000cc5	05 c8 00 		add	ax,200
	*** 000cc8	89 46 fa 		mov	WORD PTR [bp-6],ax
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ))
; Line 560
	*** 000ccb	8b 46 f4 		mov	ax,WORD PTR [bp-12]	;rect
	*** 000cce	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000cd2	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000cd5	7c 29 			jl	$I1552
	*** 000cd7	8b 46 f8 		mov	ax,WORD PTR [bp-8]
	*** 000cda	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000cdd	7d 21 			jge	$I1552
	*** 000cdf	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000ce2	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000ce5	7c 19 			jl	$I1552
	*** 000ce7	8b 46 fa 		mov	ax,WORD PTR [bp-6]
	*** 000cea	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000ced	7d 11 			jge	$I1552
;|*** 		{
;|*** 			HitPlayer( hDC, npShot );
; Line 562
	*** 000cef	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000cf2	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 000cf5	e8 5e f9 		call	HITPLAYER
;|*** 			npShot->nCount = 1;
; Line 563
	*** 000cf8	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 000cfb	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
;|*** 		}
;|*** 		switch (--npShot->nCount)
; Line 565
					$I1552:
	*** 000d00	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 000d03	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 000d06	8b 47 12 		mov	ax,WORD PTR [bx+18]
;|*** 		{
;|*** 		case 7:
;|*** 			npShot->byColor = DKGREEN;
;|*** 			break;
;|*** 		case 0:
;|*** 			RemoveObj( &HunterShotList, npShot );
;|*** 			AddHeadObj( &FreeList, npShot );
;|*** 			break;
;|*** 		}
; Line 574
	*** 000d09	0b c0 			or	ax,ax
	*** 000d0b	74 07 			je	$SC1558
	*** 000d0d	2d 07 00 		sub	ax,7
	*** 000d10	74 18 			je	$SC1557
	*** 000d12	eb 1d 			jmp	SHORT $SB1554
;|*** 		case 0:
; Line 570
					$SC1558:
;|*** 			RemoveObj( &HunterShotList, npShot );
; Line 571
	*** 000d14	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterShotList
	*** 000d17	50 			push	ax
	*** 000d18	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 000d1b	e8 c8 f3 		call	REMOVE
;|*** 			AddHeadObj( &FreeList, npShot );
; Line 572
	*** 000d1e	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000d21	50 			push	ax
	*** 000d22	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 000d25	e8 3a f3 		call	ADDHEAD
;|*** 			break;
; Line 573
	*** 000d28	eb 07 			jmp	SHORT $SB1554
;|*** 		case 7:
; Line 567
					$SC1557:
;|*** 			npShot->byColor = DKGREEN;
; Line 568
	*** 000d2a	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 000d2d	c6 47 16 06 		mov	BYTE PTR [bx+22],6
;|*** 			break;
;|*** 		case 0:
;|*** 			RemoveObj( &HunterShotList, npShot );
;|*** 			AddHeadObj( &FreeList, npShot );
;|*** 			break;
;|*** 		}
; Line 574
					$SB1554:
;|*** 		DrawObject( hDC, npShot );
; Line 575
	*** 000d31	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000d34	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 000d37	e8 e4 f3 		call	DRAWOBJECT
	*** 000d3a	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 000d3d	89 46 fe 		mov	WORD PTR [bp-2],ax	;npShot
	*** 000d40	0b c0 			or	ax,ax
	*** 000d42	74 03 			je	$JCC3394
	*** 000d44	e9 58 ff 		jmp	$F1548
					$JCC3394:
;|*** 	}
;|*** }
; Line 577
					$EX1545:
	*** 000d47	8b e5 			mov	sp,bp
	*** 000d49	5d 			pop	bp
	*** 000d4a	c2 02 00 		ret	2
	*** 000d4d	90 			nop	

DRAWHUNTERSHOTS	ENDP
;|*** 
;|*** //
;|*** // FireHunterShot - fire a hunter bullet
;|*** //
;|*** 
;|*** VOID NEAR PASCAL FireHunterShot( NPOBJ npHunt )
;|*** {
; Line 584
	PUBLIC	FIREHUNTERSHOT
FIREHUNTERSHOT	PROC NEAR
	*** 000d4e	55 			push	bp
	*** 000d4f	8b ec 			mov	bp,sp
	*** 000d51	83 ec 02 		sub	sp,2
	*** 000d54	56 			push	si
;	npHunt = 4
;	npShot = -2
;|*** 	NPOBJ           npShot;
;|*** 
;|*** 	if (npShot = RemHeadObj( &FreeList ))
; Line 587
	*** 000d55	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000d58	50 			push	ax
	*** 000d59	e8 48 f3 		call	REMHEAD
	*** 000d5c	89 46 fe 		mov	WORD PTR [bp-2],ax	;npShot
	*** 000d5f	0b c0 			or	ax,ax
	*** 000d61	75 03 			jne	$JCC3425
	*** 000d63	e9 c2 00 		jmp	$EX1560
					$JCC3425:
;|*** 	{
;|*** 		npShot->Pos.x = npHunt->Pos.x;
; Line 589
	*** 000d66	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npHunt
	*** 000d69	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000d6c	8b 76 fe 		mov	si,WORD PTR [bp-2]	;npShot
	*** 000d6f	89 44 04 		mov	WORD PTR [si+4],ax
;|*** 		npShot->Pos.y = npHunt->Pos.y;
; Line 590
	*** 000d72	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000d75	89 44 06 		mov	WORD PTR [si+6],ax
;|*** 		npShot->Vel.x = npHunt->Vel.x;
; Line 591
	*** 000d78	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 000d7b	89 44 08 		mov	WORD PTR [si+8],ax
;|*** 		npShot->Vel.y = npHunt->Vel.y;
; Line 592
	*** 000d7e	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 000d81	89 44 0a 		mov	WORD PTR [si+10],ax
;|*** 		npShot->nMass = 8;
; Line 593
	*** 000d84	c7 44 0c 08 00 		mov	WORD PTR [si+12],8
;|*** 		npShot->nDir = npHunt->nDir + arand( 5 ) - 2;
; Line 594
	*** 000d89	b8 05 00 		mov	ax,5
	*** 000d8c	50 			push	ax
	*** 000d8d	e8 70 f2 		call	ARAND
	*** 000d90	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npHunt
	*** 000d93	03 47 0e 		add	ax,WORD PTR [bx+14]
	*** 000d96	48 			dec	ax
	*** 000d97	48 			dec	ax
	*** 000d98	89 44 0e 		mov	WORD PTR [si+14],ax
;|*** 		npShot->nSpin = (arand( 2 ) ? 10 : -10);
; Line 595
	*** 000d9b	b8 02 00 		mov	ax,2
	*** 000d9e	50 			push	ax
	*** 000d9f	e8 5e f2 		call	ARAND
	*** 000da2	3d 01 00 		cmp	ax,1
	*** 000da5	1b c0 			sbb	ax,ax
	*** 000da7	24 ec 			and	al,236
	*** 000da9	05 0a 00 		add	ax,10
	*** 000dac	89 44 10 		mov	WORD PTR [si+16],ax
;|*** 		npShot->nCount = 16 + arand( 8 );
; Line 596
	*** 000daf	b8 08 00 		mov	ax,8
	*** 000db2	50 			push	ax
	*** 000db3	e8 4a f2 		call	ARAND
	*** 000db6	05 10 00 		add	ax,16
	*** 000db9	89 44 12 		mov	WORD PTR [si+18],ax
;|*** 		npShot->byColor = GREEN;
; Line 597
	*** 000dbc	c6 44 16 07 		mov	BYTE PTR [si+22],7
;|*** 		npShot->byPts = 2;
; Line 598
	*** 000dc0	c6 44 17 02 		mov	BYTE PTR [si+23],2
;|*** 		npShot->Pts[0].x = 128;
; Line 599
	*** 000dc4	c7 44 18 80 00 		mov	WORD PTR [si+24],128
;|*** 		npShot->Pts[0].y = 50;
; Line 600
	*** 000dc9	c7 44 1a 32 00 		mov	WORD PTR [si+26],50
;|*** 		npShot->Pts[1].x = 0;
; Line 601
	*** 000dce	c7 44 1c 00 00 		mov	WORD PTR [si+28],0
;|*** 		npShot->Pts[1].y = 50;
; Line 602
	*** 000dd3	c7 44 1e 32 00 		mov	WORD PTR [si+30],50
;|*** 		ACCEL( npShot, npShot->nDir, 200 + npShot->nCount );
; Line 603
	*** 000dd8	b8 00 40 		mov	ax,16384
	*** 000ddb	99 			cwd	
	*** 000ddc	52 			push	dx
	*** 000ddd	50 			push	ax
	*** 000dde	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000de1	2a ff 			sub	bh,bh
	*** 000de3	d1 e3 			shl	bx,1
	*** 000de5	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 000de9	8b 4c 12 		mov	cx,WORD PTR [si+18]
	*** 000dec	81 c1 c8 00 		add	cx,200
	*** 000df0	f7 e9 			imul	cx
	*** 000df2	52 			push	dx
	*** 000df3	50 			push	ax
	*** 000df4	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 000df9	01 44 08 		add	WORD PTR [si+8],ax
	*** 000dfc	b8 00 40 		mov	ax,16384
	*** 000dff	99 			cwd	
	*** 000e00	52 			push	dx
	*** 000e01	50 			push	ax
	*** 000e02	8a 5c 0e 		mov	bl,BYTE PTR [si+14]
	*** 000e05	2a ff 			sub	bh,bh
	*** 000e07	d1 e3 			shl	bx,1
	*** 000e09	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 000e0d	8b 4c 12 		mov	cx,WORD PTR [si+18]
	*** 000e10	81 c1 c8 00 		add	cx,200
	*** 000e14	f7 e9 			imul	cx
	*** 000e16	52 			push	dx
	*** 000e17	50 			push	ax
	*** 000e18	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 000e1d	01 44 0a 		add	WORD PTR [si+10],ax
;|*** 		AddHeadObj( &HunterShotList, npShot );
; Line 604
	*** 000e20	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterShotList
	*** 000e23	50 			push	ax
	*** 000e24	56 			push	si
	*** 000e25	e8 3a f2 		call	ADDHEAD
;|*** 	}
;|*** }
; Line 606
					$EX1560:
	*** 000e28	5e 			pop	si
	*** 000e29	8b e5 			mov	sp,bp
	*** 000e2b	5d 			pop	bp
	*** 000e2c	c2 02 00 		ret	2
	*** 000e2f	90 			nop	

FIREHUNTERSHOT	ENDP
;|*** 
;|*** //
;|*** // CreateHunter - make a new hunter
;|*** //
;|*** 
;|*** VOID NEAR PASCAL CreateHunter( VOID )
;|*** {
; Line 613
	PUBLIC	CREATEHUNTER
CREATEHUNTER	PROC NEAR
	*** 000e30	55 			push	bp
	*** 000e31	8b ec 			mov	bp,sp
	*** 000e33	83 ec 08 		sub	sp,8
;	npHunt = -4
;	nCnt = -2
;|*** 	NPOBJ           npHunt;
;|*** 	INT             nCnt;
;|*** 
;|*** 	if (npHunt = RemHeadObj( &FreeList ))
; Line 617
	*** 000e36	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000e39	50 			push	ax
	*** 000e3a	e8 67 f2 		call	REMHEAD
	*** 000e3d	89 46 fc 		mov	WORD PTR [bp-4],ax	;npHunt
	*** 000e40	0b c0 			or	ax,ax
	*** 000e42	75 03 			jne	$JCC3650
	*** 000e44	e9 e2 00 		jmp	$EX1563
					$JCC3650:
;|*** 	{
;|*** 		npHunt->Pos.x = arand( CLIP_COORD * 2 ) - CLIP_COORD;
; Line 619
	*** 000e47	b8 58 42 		mov	ax,16984
	*** 000e4a	50 			push	ax
	*** 000e4b	e8 b2 f1 		call	ARAND
	*** 000e4e	2d 2c 21 		sub	ax,8492
	*** 000e51	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000e54	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 		npHunt->Pos.y = -CLIP_COORD;
; Line 620
	*** 000e57	c7 47 06 d4 de 		mov	WORD PTR [bx+6],-8492
;|*** 		npHunt->Vel.x = npHunt->Vel.y = 0;
; Line 621
	*** 000e5c	2b c0 			sub	ax,ax
	*** 000e5e	89 47 0a 		mov	WORD PTR [bx+10],ax
	*** 000e61	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 		npHunt->nMass = 256;
;|*** 		npHunt->nDir = arand( DEGREE_SIZE );
; Line 623
	*** 000e64	b8 00 01 		mov	ax,256
	*** 000e67	89 47 0c 		mov	WORD PTR [bx+12],ax
	*** 000e6a	50 			push	ax
	*** 000e6b	e8 92 f1 		call	ARAND
	*** 000e6e	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000e71	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npHunt->nSpin = 0;
; Line 624
	*** 000e74	c7 47 10 00 00 		mov	WORD PTR [bx+16],0
;|*** 		npHunt->nCount = 1 + arand( nLevel );
; Line 625
	*** 000e79	ff 36 00 00 		push	WORD PTR _nLevel
	*** 000e7d	e8 80 f1 		call	ARAND
	*** 000e80	40 			inc	ax
	*** 000e81	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000e84	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npHunt->nDelay = 2 + arand( 10 );
; Line 626
	*** 000e87	b8 0a 00 		mov	ax,10
	*** 000e8a	50 			push	ax
	*** 000e8b	e8 72 f1 		call	ARAND
	*** 000e8e	40 			inc	ax
	*** 000e8f	40 			inc	ax
	*** 000e90	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000e93	89 47 14 		mov	WORD PTR [bx+20],ax
;|*** 		npHunt->byColor = CYAN;
; Line 627
	*** 000e96	c6 47 16 0d 		mov	BYTE PTR [bx+22],13
;|*** 		npHunt->byPts = DIM(Hunter);
; Line 628
	*** 000e9a	c6 47 17 08 		mov	BYTE PTR [bx+23],8
	*** 000e9e	c7 46 fa 3c 00 		mov	WORD PTR [bp-6],OFFSET DGROUP:$S1354_Hunter
	*** 000ea3	8d 47 18 		lea	ax,WORD PTR [bx+24]
	*** 000ea6	89 46 f8 		mov	WORD PTR [bp-8],ax
;|*** 		for (nCnt = 0; nCnt < DIM(Hunter); ++nCnt)
; Line 629
					$F1567:
;|*** 			npHunt->Pts[nCnt] = Hunter[nCnt];
; Line 630
	*** 000ea9	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 000eac	83 46 fa 04 		add	WORD PTR [bp-6],4
	*** 000eb0	8b 07 			mov	ax,WORD PTR [bx]
	*** 000eb2	8b 57 02 		mov	dx,WORD PTR [bx+2]
	*** 000eb5	8b 5e f8 		mov	bx,WORD PTR [bp-8]
	*** 000eb8	83 46 f8 04 		add	WORD PTR [bp-8],4
	*** 000ebc	89 07 			mov	WORD PTR [bx],ax
	*** 000ebe	89 57 02 		mov	WORD PTR [bx+2],dx
	*** 000ec1	81 7e fa 5c 00 		cmp	WORD PTR [bp-6],OFFSET DGROUP:$S1354_Hunter+32
	*** 000ec6	72 e1 			jb	$F1567
;|*** 		ACCEL( npHunt, npHunt->nDir, 30 + nLevel * 2 );
; Line 631
	*** 000ec8	b8 00 40 		mov	ax,16384
	*** 000ecb	99 			cwd	
	*** 000ecc	52 			push	dx
	*** 000ecd	50 			push	ax
	*** 000ece	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000ed1	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 000ed4	2a ff 			sub	bh,bh
	*** 000ed6	d1 e3 			shl	bx,1
	*** 000ed8	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 000edc	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 000ee0	83 c1 0f 		add	cx,15
	*** 000ee3	d1 e1 			shl	cx,1
	*** 000ee5	f7 e9 			imul	cx
	*** 000ee7	52 			push	dx
	*** 000ee8	50 			push	ax
	*** 000ee9	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 000eee	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000ef1	01 47 08 		add	WORD PTR [bx+8],ax
	*** 000ef4	b8 00 40 		mov	ax,16384
	*** 000ef7	99 			cwd	
	*** 000ef8	52 			push	dx
	*** 000ef9	50 			push	ax
	*** 000efa	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 000efd	2a ff 			sub	bh,bh
	*** 000eff	d1 e3 			shl	bx,1
	*** 000f01	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 000f05	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 000f09	83 c1 0f 		add	cx,15
	*** 000f0c	d1 e1 			shl	cx,1
	*** 000f0e	f7 e9 			imul	cx
	*** 000f10	52 			push	dx
	*** 000f11	50 			push	ax
	*** 000f12	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 000f17	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000f1a	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &HunterList, npHunt );
; Line 632
	*** 000f1d	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterList
	*** 000f20	50 			push	ax
	*** 000f21	53 			push	bx
	*** 000f22	e8 3d f1 		call	ADDHEAD
;|*** 		++nBadGuys;
; Line 633
	*** 000f25	ff 06 00 00 		inc	WORD PTR _nBadGuys
;|*** 	}
;|*** }
; Line 635
					$EX1563:
	*** 000f29	8b e5 			mov	sp,bp
	*** 000f2b	5d 			pop	bp
	*** 000f2c	c3 			ret	
	*** 000f2d	90 			nop	

CREATEHUNTER	ENDP
;|*** 
;|*** //
;|*** // DrawHunters - process and draw the hunter list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawHunters( HDC hDC )
;|*** {
; Line 642
	PUBLIC	DRAWHUNTERS
DRAWHUNTERS	PROC NEAR
	*** 000f2e	55 			push	bp
	*** 000f2f	8b ec 			mov	bp,sp
	*** 000f31	83 ec 0e 		sub	sp,14
;	hDC = 4
;	npHunt = -4
;	npNext = -2
;	npShot = -6
;	rect = -14
;|*** 	NPOBJ           npHunt, npNext;
;|*** 	LOCAL INT       nNextHunter = 200;
;|*** 
;|*** 	if (nBadGuys && (--nNextHunter < 0))
; Line 646
	*** 000f34	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 000f39	74 21 			je	$I1575
	*** 000f3b	ff 0e bc 00 		dec	WORD PTR $S1574_nNextHunter
	*** 000f3f	79 1b 			jns	$I1575
;|*** 	{
;|*** 		CreateHunter();
; Line 648
	*** 000f41	e8 ec fe 		call	CREATEHUNTER
;|*** 		nNextHunter = 1000 + arand( 1000 ) - nLevel * 8;
; Line 649
	*** 000f44	b8 e8 03 		mov	ax,1000
	*** 000f47	50 			push	ax
	*** 000f48	e8 b5 f0 		call	ARAND
	*** 000f4b	b1 03 			mov	cl,3
	*** 000f4d	ba 7d 00 		mov	dx,125
	*** 000f50	2b 16 00 00 		sub	dx,WORD PTR _nLevel
	*** 000f54	d3 e2 			shl	dx,cl
	*** 000f56	03 d0 			add	dx,ax
	*** 000f58	89 16 bc 00 		mov	WORD PTR $S1574_nNextHunter,dx
;|*** 	}
;|*** 
;|*** 	for (npHunt = HeadObj( &HunterList ); npHunt; npHunt = npNext)
; Line 652
					$I1575:
	*** 000f5c	a1 00 00 		mov	ax,WORD PTR _HunterList
	*** 000f5f	89 46 fc 		mov	WORD PTR [bp-4],ax	;npHunt
	*** 000f62	0b c0 			or	ax,ax
	*** 000f64	75 03 			jne	$JCC3940
	*** 000f66	e9 0a 02 		jmp	$EX1571
					$JCC3940:
					$F1576:
;|*** 	{
;|*** 		NPOBJ           npShot;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npHunt );
; Line 657
	*** 000f69	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000f6c	8b 07 			mov	ax,WORD PTR [bx]
	*** 000f6e	89 46 fe 		mov	WORD PTR [bp-2],ax	;npNext
;|*** 
;|*** 		MKRECT( &rect, npHunt->Pos, 200 );
; Line 659
	*** 000f71	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000f74	2d c8 00 		sub	ax,200
	*** 000f77	89 46 f2 		mov	WORD PTR [bp-14],ax	;rect
	*** 000f7a	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 000f7d	05 c8 00 		add	ax,200
	*** 000f80	89 46 f6 		mov	WORD PTR [bp-10],ax
	*** 000f83	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000f86	2d c8 00 		sub	ax,200
	*** 000f89	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 000f8c	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 000f8f	05 c8 00 		add	ax,200
	*** 000f92	89 46 f8 		mov	WORD PTR [bp-8],ax
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ))
; Line 661
	*** 000f95	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;rect
	*** 000f98	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 000f9c	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000f9f	7c 79 			jl	$I1581
	*** 000fa1	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 000fa4	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 000fa7	7d 71 			jge	$I1581
	*** 000fa9	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 000fac	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000faf	7c 69 			jl	$I1581
	*** 000fb1	8b 46 f8 		mov	ax,WORD PTR [bp-8]
	*** 000fb4	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 000fb7	7d 61 			jge	$I1581
;|*** 		{
;|*** 			HitPlayer( hDC, npHunt );
; Line 663
	*** 000fb9	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000fbc	ff 76 fc 		push	WORD PTR [bp-4]	;npHunt
	*** 000fbf	e8 94 f6 		call	HITPLAYER
;|*** 			--npHunt->nCount;
;|*** 			if (npHunt->nCount < 1)
; Line 665
	*** 000fc2	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000fc5	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 000fc8	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 000fcc	7d 38 			jge	$I1582
;|*** 			{
;|*** 				KillBadGuy();
; Line 667
					$L20139:
	*** 000fce	ff 0e 00 00 		dec	WORD PTR _nBadGuys
	*** 000fd2	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 000fd7	7f 07 			jg	$L20032
	*** 000fd9	b8 02 00 		mov	ax,2
	*** 000fdc	50 			push	ax
	*** 000fdd	e8 28 f3 		call	SETRESTART
					$L20032:
;|*** 				npHunt->byColor = CYAN;
; Line 668
	*** 000fe0	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 000fe3	c6 47 16 0d 		mov	BYTE PTR [bx+22],13
;|*** 				Explode( hDC, npHunt );
; Line 669
	*** 000fe7	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 000fea	53 			push	bx
	*** 000feb	e8 fc f4 		call	EXPLODE
;|*** 				RemoveObj( &HunterList, npHunt );
; Line 670
	*** 000fee	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterList
	*** 000ff1	50 			push	ax
	*** 000ff2	ff 76 fc 		push	WORD PTR [bp-4]	;npHunt
	*** 000ff5	e8 ee f0 		call	REMOVE
;|*** 				AddHeadObj( &FreeList, npHunt );
; Line 671
	*** 000ff8	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 000ffb	50 			push	ax
	*** 000ffc	ff 76 fc 		push	WORD PTR [bp-4]	;npHunt
	*** 000fff	e8 60 f0 		call	ADDHEAD
;|*** 			}
;|*** 			else if (npHunt->nCount == 1) npHunt->byColor = DKCYAN;
; Line 673
	*** 001002	e9 b0 00 		jmp	$I1585
	*** 001005	90 			nop	
					$I1582:
	*** 001006	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 001009	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 00100d	74 03 			je	$JCC4109
	*** 00100f	e9 a3 00 		jmp	$I1585
					$JCC4109:
	*** 001012	c6 47 16 0c 		mov	BYTE PTR [bx+22],12
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
; Line 675
	*** 001016	e9 9c 00 		jmp	$I1585
	*** 001019	90 			nop	
					$I1581:
	*** 00101a	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 00101d	39 06 28 00 		cmp	WORD PTR $S1350_rectShotClip,ax
	*** 001021	7e 03 			jle	$JCC4129
	*** 001023	e9 8f 00 		jmp	$I1585
					$JCC4129:
	*** 001026	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;rect
	*** 001029	39 06 2c 00 		cmp	WORD PTR $S1350_rectShotClip+4,ax
	*** 00102d	7f 03 			jg	$JCC4141
	*** 00102f	e9 83 00 		jmp	$I1585
					$JCC4141:
	*** 001032	8b 46 f8 		mov	ax,WORD PTR [bp-8]
	*** 001035	39 06 2a 00 		cmp	WORD PTR $S1350_rectShotClip+2,ax
	*** 001039	7f 7a 			jg	$I1585
	*** 00103b	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 00103e	39 06 2e 00 		cmp	WORD PTR $S1350_rectShotClip+6,ax
	*** 001042	7e 71 			jle	$I1585
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 677
	*** 001044	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 001047	89 46 fa 		mov	WORD PTR [bp-6],ax	;npShot
	*** 00104a	0b c0 			or	ax,ax
	*** 00104c	74 67 			je	$I1585
					$F1587:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
; Line 679
	*** 00104e	8b 46 f2 		mov	ax,WORD PTR [bp-14]	;rect
	*** 001051	8b 5e fa 		mov	bx,WORD PTR [bp-6]	;npShot
	*** 001054	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001057	7c 18 			jl	$FC1588
	*** 001059	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 00105c	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 00105f	7d 10 			jge	$FC1588
	*** 001061	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001064	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001067	7c 08 			jl	$FC1588
	*** 001069	8b 46 f8 		mov	ax,WORD PTR [bp-8]
	*** 00106c	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 00106f	7c 0b 			jl	$L20037
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 677
					$FC1588:
	*** 001071	8b 07 			mov	ax,WORD PTR [bx]
	*** 001073	89 46 fa 		mov	WORD PTR [bp-6],ax	;npShot
	*** 001076	0b c0 			or	ax,ax
	*** 001078	75 d4 			jne	$F1587
	*** 00107a	eb 39 			jmp	SHORT $I1585
					$L20037:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				npShot->nCount = 1;
; Line 680
	*** 00107c	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
;|*** 				lScore += npHunt->nCount * 1000;
; Line 681
	*** 001081	b8 e8 03 		mov	ax,1000
	*** 001084	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 001087	f7 6f 12 		imul	WORD PTR [bx+18]
	*** 00108a	99 			cwd	
	*** 00108b	01 06 00 00 		add	WORD PTR _lScore,ax
	*** 00108f	11 16 02 00 		adc	WORD PTR _lScore+2,dx
;|*** 				if (--npHunt->nCount < 1)
; Line 682
	*** 001093	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 001096	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 00109a	7d 03 			jge	$JCC4250
	*** 00109c	e9 2f ff 		jmp	$L20139
					$JCC4250:
;|*** 				{
;|*** 					KillBadGuy();
;|*** 					npHunt->byColor = CYAN;
;|*** 					Explode( hDC, npHunt );
;|*** 					RemoveObj( &HunterList, npHunt );
;|*** 					AddHeadObj( &FreeList, npHunt );
;|*** 				}
;|*** 				else
;|*** 				{
;|*** 					if (npHunt->nCount == 1) npHunt->byColor = DKCYAN;
; Line 692
	*** 00109f	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 0010a2	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 0010a6	75 04 			jne	$I1594
	*** 0010a8	c6 47 16 0c 		mov	BYTE PTR [bx+22],12
;|*** 					Hit( hDC, npHunt );
; Line 693
					$I1594:
	*** 0010ac	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 0010af	ff 76 fc 		push	WORD PTR [bp-4]	;npHunt
	*** 0010b2	e8 65 f3 		call	HIT
;|*** 				}
;|*** 				break;
;|*** 			}
;|*** 		}
;|*** 		ACCEL( npHunt, npHunt->nDir, 8 );
; Line 698
					$I1585:
	*** 0010b5	b8 00 40 		mov	ax,16384
	*** 0010b8	99 			cwd	
	*** 0010b9	52 			push	dx
	*** 0010ba	50 			push	ax
	*** 0010bb	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 0010be	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 0010c1	2a ff 			sub	bh,bh
	*** 0010c3	d1 e3 			shl	bx,1
	*** 0010c5	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 0010c9	99 			cwd	
	*** 0010ca	d1 e0 			shl	ax,1
	*** 0010cc	d1 d2 			rcl	dx,1
	*** 0010ce	d1 e0 			shl	ax,1
	*** 0010d0	d1 d2 			rcl	dx,1
	*** 0010d2	d1 e0 			shl	ax,1
	*** 0010d4	d1 d2 			rcl	dx,1
	*** 0010d6	52 			push	dx
	*** 0010d7	50 			push	ax
	*** 0010d8	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0010dd	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 0010e0	01 47 08 		add	WORD PTR [bx+8],ax
	*** 0010e3	b8 00 40 		mov	ax,16384
	*** 0010e6	99 			cwd	
	*** 0010e7	52 			push	dx
	*** 0010e8	50 			push	ax
	*** 0010e9	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 0010ec	2a ff 			sub	bh,bh
	*** 0010ee	d1 e3 			shl	bx,1
	*** 0010f0	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 0010f4	99 			cwd	
	*** 0010f5	d1 e0 			shl	ax,1
	*** 0010f7	d1 d2 			rcl	dx,1
	*** 0010f9	d1 e0 			shl	ax,1
	*** 0010fb	d1 d2 			rcl	dx,1
	*** 0010fd	d1 e0 			shl	ax,1
	*** 0010ff	d1 d2 			rcl	dx,1
	*** 001101	52 			push	dx
	*** 001102	50 			push	ax
	*** 001103	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001108	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 00110b	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		npHunt->Vel.x -= npHunt->Vel.x / 16;
; Line 699
	*** 00110e	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 001111	99 			cwd	
	*** 001112	33 c2 			xor	ax,dx
	*** 001114	2b c2 			sub	ax,dx
	*** 001116	b9 04 00 		mov	cx,4
	*** 001119	d3 f8 			sar	ax,cl
	*** 00111b	33 c2 			xor	ax,dx
	*** 00111d	2b c2 			sub	ax,dx
	*** 00111f	29 47 08 		sub	WORD PTR [bx+8],ax
;|*** 		npHunt->Vel.y -= npHunt->Vel.y / 16;
; Line 700
	*** 001122	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 001125	99 			cwd	
	*** 001126	33 c2 			xor	ax,dx
	*** 001128	2b c2 			sub	ax,dx
	*** 00112a	d3 f8 			sar	ax,cl
	*** 00112c	33 c2 			xor	ax,dx
	*** 00112e	2b c2 			sub	ax,dx
	*** 001130	29 47 0a 		sub	WORD PTR [bx+10],ax
;|*** 		if (--npHunt->nDelay <= 0)
; Line 701
	*** 001133	ff 4f 14 		dec	WORD PTR [bx+20]
	*** 001136	83 7f 14 00 		cmp	WORD PTR [bx+20],0
	*** 00113a	7f 21 			jg	$I1595
;|*** 		{
;|*** 			npHunt->nDelay = arand( 10 );
; Line 703
	*** 00113c	b8 0a 00 		mov	ax,10
	*** 00113f	50 			push	ax
	*** 001140	e8 bd ee 		call	ARAND
	*** 001143	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 001146	89 47 14 		mov	WORD PTR [bx+20],ax
;|*** 			npHunt->nSpin = arand( 11 ) - 5;
; Line 704
	*** 001149	b8 0b 00 		mov	ax,11
	*** 00114c	50 			push	ax
	*** 00114d	e8 b0 ee 		call	ARAND
	*** 001150	2d 05 00 		sub	ax,5
	*** 001153	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npHunt
	*** 001156	89 47 10 		mov	WORD PTR [bx+16],ax
;|*** 			FireHunterShot( npHunt );
; Line 705
	*** 001159	53 			push	bx
	*** 00115a	e8 f1 fb 		call	FIREHUNTERSHOT
;|*** 		}
;|*** 		DrawObject( hDC, npHunt );
; Line 707
					$I1595:
	*** 00115d	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001160	ff 76 fc 		push	WORD PTR [bp-4]	;npHunt
	*** 001163	e8 b8 ef 		call	DRAWOBJECT
	*** 001166	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;npNext
	*** 001169	89 46 fc 		mov	WORD PTR [bp-4],ax	;npHunt
	*** 00116c	0b c0 			or	ax,ax
	*** 00116e	74 03 			je	$JCC4462
	*** 001170	e9 f6 fd 		jmp	$F1576
					$JCC4462:
;|*** 	}
;|*** }
; Line 709
					$EX1571:
	*** 001173	8b e5 			mov	sp,bp
	*** 001175	5d 			pop	bp
	*** 001176	c2 02 00 		ret	2
	*** 001179	90 			nop	

DRAWHUNTERS	ENDP
;|*** 
;|*** //
;|*** // CreateSwarmer - make a new swarmer
;|*** //
;|*** 
;|*** VOID NEAR PASCAL CreateSwarmer( POINT Pos, INT nDir, INT nCount )
;|*** {
; Line 716
	PUBLIC	CREATESWARMER
CREATESWARMER	PROC NEAR
	*** 00117a	55 			push	bp
	*** 00117b	8b ec 			mov	bp,sp
	*** 00117d	83 ec 0a 		sub	sp,10
;	npSwarm = -4
;	nCnt = -2
;	Pos = 8
;	nDir = 6
;	nCount = 4
;|*** 	NPOBJ           npSwarm;
;|*** 	INT             nCnt;
;|*** 
;|*** 	if (npSwarm = RemHeadObj( &FreeList ))
; Line 720
	*** 001180	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001183	50 			push	ax
	*** 001184	e8 1d ef 		call	REMHEAD
	*** 001187	89 46 fc 		mov	WORD PTR [bp-4],ax	;npSwarm
	*** 00118a	0b c0 			or	ax,ax
	*** 00118c	75 03 			jne	$JCC4492
	*** 00118e	e9 f3 00 		jmp	$EX1600
					$JCC4492:
;|*** 	{
;|*** 		npSwarm->Pos = Pos;
; Line 722
	*** 001191	8b 46 08 		mov	ax,WORD PTR [bp+8]	;Pos
	*** 001194	8b 56 0a 		mov	dx,WORD PTR [bp+10]
	*** 001197	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSwarm
	*** 00119a	89 47 04 		mov	WORD PTR [bx+4],ax
	*** 00119d	89 57 06 		mov	WORD PTR [bx+6],dx
;|*** 		npSwarm->Vel.x = npSwarm->Vel.y = 0;
; Line 723
	*** 0011a0	2b c0 			sub	ax,ax
	*** 0011a2	89 47 0a 		mov	WORD PTR [bx+10],ax
	*** 0011a5	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 		npSwarm->nDir = nDir;
; Line 724
	*** 0011a8	8b 46 06 		mov	ax,WORD PTR [bp+6]	;nDir
	*** 0011ab	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npSwarm->nSpin = arand( 31 ) - 15;
; Line 725
	*** 0011ae	b8 1f 00 		mov	ax,31
	*** 0011b1	50 			push	ax
	*** 0011b2	e8 4b ee 		call	ARAND
	*** 0011b5	2d 0f 00 		sub	ax,15
	*** 0011b8	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSwarm
	*** 0011bb	89 47 10 		mov	WORD PTR [bx+16],ax
;|*** 		npSwarm->nCount = nCount;
; Line 726
	*** 0011be	8b 46 04 		mov	ax,WORD PTR [bp+4]	;nCount
	*** 0011c1	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npSwarm->nDelay = 64 + arand( 64 );
; Line 727
	*** 0011c4	b9 40 00 		mov	cx,64
	*** 0011c7	51 			push	cx
	*** 0011c8	e8 35 ee 		call	ARAND
	*** 0011cb	05 40 00 		add	ax,64
	*** 0011ce	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSwarm
	*** 0011d1	89 47 14 		mov	WORD PTR [bx+20],ax
;|*** 		npSwarm->nMass = 32;
; Line 728
	*** 0011d4	c7 47 0c 20 00 		mov	WORD PTR [bx+12],32
;|*** 		npSwarm->byColor = DKGREEN;
; Line 729
	*** 0011d9	c6 47 16 06 		mov	BYTE PTR [bx+22],6
;|*** 		npSwarm->byPts = DIM(Swarmer);
; Line 730
	*** 0011dd	c6 47 17 05 		mov	BYTE PTR [bx+23],5
	*** 0011e1	8d 47 1a 		lea	ax,WORD PTR [bx+26]
	*** 0011e4	89 46 fa 		mov	WORD PTR [bp-6],ax
	*** 0011e7	c7 46 f8 28 00 		mov	WORD PTR [bp-8],OFFSET DGROUP:$S1353_Swarmer
	*** 0011ec	8b 46 04 		mov	ax,WORD PTR [bp+4]	;nCount
	*** 0011ef	8b c8 			mov	cx,ax
	*** 0011f1	d1 e0 			shl	ax,1
	*** 0011f3	d1 e0 			shl	ax,1
	*** 0011f5	03 c1 			add	ax,cx
	*** 0011f7	d1 e0 			shl	ax,1
	*** 0011f9	89 46 f6 		mov	WORD PTR [bp-10],ax
;|*** 		for (nCnt = 0; nCnt < DIM(Swarmer); ++nCnt)
; Line 731
					$F1604:
;|*** 		{
;|*** 			npSwarm->Pts[nCnt] = Swarmer[nCnt];
; Line 733
	*** 0011fc	8b 5e f8 		mov	bx,WORD PTR [bp-8]
	*** 0011ff	8b 07 			mov	ax,WORD PTR [bx]
	*** 001201	8b 57 02 		mov	dx,WORD PTR [bx+2]
	*** 001204	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 001207	89 47 fe 		mov	WORD PTR [bx-2],ax
	*** 00120a	89 17 			mov	WORD PTR [bx],dx
;|*** 			npSwarm->Pts[nCnt].y += nCount * 10;
; Line 734
	*** 00120c	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 00120f	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 001212	01 07 			add	WORD PTR [bx],ax
	*** 001214	83 46 fa 04 		add	WORD PTR [bp-6],4
	*** 001218	83 46 f8 04 		add	WORD PTR [bp-8],4
	*** 00121c	81 7e f8 3c 00 		cmp	WORD PTR [bp-8],OFFSET DGROUP:$S1353_Swarmer+20
	*** 001221	72 d9 			jb	$F1604
;|*** 		}
;|*** 		ACCEL( npSwarm, npSwarm->nDir, 30 + nLevel * 2 );
; Line 736
	*** 001223	b8 00 40 		mov	ax,16384
	*** 001226	99 			cwd	
	*** 001227	52 			push	dx
	*** 001228	50 			push	ax
	*** 001229	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSwarm
	*** 00122c	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 00122f	2a ff 			sub	bh,bh
	*** 001231	d1 e3 			shl	bx,1
	*** 001233	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 001237	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 00123b	83 c1 0f 		add	cx,15
	*** 00123e	d1 e1 			shl	cx,1
	*** 001240	f7 e9 			imul	cx
	*** 001242	52 			push	dx
	*** 001243	50 			push	ax
	*** 001244	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001249	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSwarm
	*** 00124c	01 47 08 		add	WORD PTR [bx+8],ax
	*** 00124f	b8 00 40 		mov	ax,16384
	*** 001252	99 			cwd	
	*** 001253	52 			push	dx
	*** 001254	50 			push	ax
	*** 001255	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 001258	2a ff 			sub	bh,bh
	*** 00125a	d1 e3 			shl	bx,1
	*** 00125c	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 001260	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 001264	83 c1 0f 		add	cx,15
	*** 001267	d1 e1 			shl	cx,1
	*** 001269	f7 e9 			imul	cx
	*** 00126b	52 			push	dx
	*** 00126c	50 			push	ax
	*** 00126d	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001272	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSwarm
	*** 001275	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &SwarmerList, npSwarm );
; Line 737
	*** 001278	b8 00 00 		mov	ax,OFFSET DGROUP:_SwarmerList
	*** 00127b	50 			push	ax
	*** 00127c	53 			push	bx
	*** 00127d	e8 e2 ed 		call	ADDHEAD
;|*** 		++nBadGuys;
; Line 738
	*** 001280	ff 06 00 00 		inc	WORD PTR _nBadGuys
;|*** 	}
;|*** }
; Line 740
					$EX1600:
	*** 001284	8b e5 			mov	sp,bp
	*** 001286	5d 			pop	bp
	*** 001287	c2 08 00 		ret	8

CREATESWARMER	ENDP
;|*** 
;|*** //
;|*** // DrawSwarmers - process and draw the swarmer list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawSwarmers( HDC hDC )
;|*** {
; Line 747
	PUBLIC	DRAWSWARMERS
DRAWSWARMERS	PROC NEAR
	*** 00128a	55 			push	bp
	*** 00128b	8b ec 			mov	bp,sp
	*** 00128d	83 ec 16 		sub	sp,22
;	hDC = 4
;	npSwarm = -2
;	npNext = -4
;	Pos = -8
;	npShot = -10
;	rect = -18
;	nDir = -22
;	nCount = -20
;|*** 	NPOBJ           npSwarm, npNext;
;|*** 	LOCAL INT       nNextSwarmer = 1000;
;|*** 
;|*** 	if (nBadGuys && (--nNextSwarmer < 0))
; Line 751
	*** 001290	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 001295	74 45 			je	$I1613
	*** 001297	ff 0e be 00 		dec	WORD PTR $S1612_nNextSwarmer
	*** 00129b	79 3f 			jns	$I1613
;|*** 	{
;|*** 		POINT Pos;
;|*** 		Pos.x = arand( CLIP_COORD * 2 ) - CLIP_COORD;
; Line 754
	*** 00129d	b8 58 42 		mov	ax,16984
	*** 0012a0	50 			push	ax
	*** 0012a1	e8 5c ed 		call	ARAND
	*** 0012a4	2d 2c 21 		sub	ax,8492
;|*** 		Pos.y = -CLIP_COORD;
; Line 755
	*** 0012a7	c7 46 fa d4 de 		mov	WORD PTR [bp-6],-8492
;|*** 		CreateSwarmer( Pos, arand( DEGREE_SIZE ), 8 + nLevel * 2 );
; Line 756
	*** 0012ac	ff 76 fa 		push	WORD PTR [bp-6]
	*** 0012af	50 			push	ax
	*** 0012b0	b8 00 01 		mov	ax,256
	*** 0012b3	50 			push	ax
	*** 0012b4	e8 49 ed 		call	ARAND
	*** 0012b7	50 			push	ax
	*** 0012b8	a1 00 00 		mov	ax,WORD PTR _nLevel
	*** 0012bb	05 04 00 		add	ax,4
	*** 0012be	d1 e0 			shl	ax,1
	*** 0012c0	50 			push	ax
	*** 0012c1	e8 b6 fe 		call	CREATESWARMER
;|*** 		nNextSwarmer = 1000 + arand( 500 ) - nLevel * 4;
; Line 757
	*** 0012c4	b8 f4 01 		mov	ax,500
	*** 0012c7	50 			push	ax
	*** 0012c8	e8 35 ed 		call	ARAND
	*** 0012cb	b9 fa 00 		mov	cx,250
	*** 0012ce	2b 0e 00 00 		sub	cx,WORD PTR _nLevel
	*** 0012d2	d1 e1 			shl	cx,1
	*** 0012d4	d1 e1 			shl	cx,1
	*** 0012d6	03 c8 			add	cx,ax
	*** 0012d8	89 0e be 00 		mov	WORD PTR $S1612_nNextSwarmer,cx
;|*** 	}
;|*** 
;|*** 	for (npSwarm = HeadObj( &SwarmerList ); npSwarm; npSwarm = npNext)
; Line 760
					$I1613:
	*** 0012dc	a1 00 00 		mov	ax,WORD PTR _SwarmerList
	*** 0012df	89 46 fe 		mov	WORD PTR [bp-2],ax	;npSwarm
	*** 0012e2	0b c0 			or	ax,ax
	*** 0012e4	75 03 			jne	$JCC4836
	*** 0012e6	e9 bc 01 		jmp	$EX1609
					$JCC4836:
					$F1615:
;|*** 	{
;|*** 		NPOBJ           npShot;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npSwarm );
; Line 765
	*** 0012e9	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 0012ec	8b 07 			mov	ax,WORD PTR [bx]
	*** 0012ee	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 
;|*** 		MKRECT( &rect, npSwarm->Pos, 150 + npSwarm->nCount * 10 );
; Line 767
	*** 0012f1	b8 f1 ff 		mov	ax,-15
	*** 0012f4	2b 47 12 		sub	ax,WORD PTR [bx+18]
	*** 0012f7	8b c8 			mov	cx,ax
	*** 0012f9	d1 e0 			shl	ax,1
	*** 0012fb	d1 e0 			shl	ax,1
	*** 0012fd	03 c1 			add	ax,cx
	*** 0012ff	d1 e0 			shl	ax,1
	*** 001301	03 47 04 		add	ax,WORD PTR [bx+4]
	*** 001304	89 46 ee 		mov	WORD PTR [bp-18],ax	;rect
	*** 001307	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 00130a	05 0f 00 		add	ax,15
	*** 00130d	8b c8 			mov	cx,ax
	*** 00130f	d1 e0 			shl	ax,1
	*** 001311	d1 e0 			shl	ax,1
	*** 001313	03 c1 			add	ax,cx
	*** 001315	d1 e0 			shl	ax,1
	*** 001317	03 47 04 		add	ax,WORD PTR [bx+4]
	*** 00131a	89 46 f2 		mov	WORD PTR [bp-14],ax
	*** 00131d	b8 f1 ff 		mov	ax,-15
	*** 001320	2b 47 12 		sub	ax,WORD PTR [bx+18]
	*** 001323	8b c8 			mov	cx,ax
	*** 001325	d1 e0 			shl	ax,1
	*** 001327	d1 e0 			shl	ax,1
	*** 001329	03 c1 			add	ax,cx
	*** 00132b	d1 e0 			shl	ax,1
	*** 00132d	03 47 06 		add	ax,WORD PTR [bx+6]
	*** 001330	89 46 f0 		mov	WORD PTR [bp-16],ax
	*** 001333	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 001336	05 0f 00 		add	ax,15
	*** 001339	8b c8 			mov	cx,ax
	*** 00133b	d1 e0 			shl	ax,1
	*** 00133d	d1 e0 			shl	ax,1
	*** 00133f	03 c1 			add	ax,cx
	*** 001341	d1 e0 			shl	ax,1
	*** 001343	03 47 06 		add	ax,WORD PTR [bx+6]
	*** 001346	89 46 f4 		mov	WORD PTR [bp-12],ax
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ))
; Line 769
	*** 001349	8b 46 ee 		mov	ax,WORD PTR [bp-18]	;rect
	*** 00134c	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001350	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001353	7c 27 			jl	$I1620
	*** 001355	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 001358	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 00135b	7d 1f 			jge	$I1620
	*** 00135d	8b 46 f0 		mov	ax,WORD PTR [bp-16]
	*** 001360	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001363	7c 17 			jl	$I1620
	*** 001365	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001368	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 00136b	7d 0f 			jge	$I1620
;|*** 		{
;|*** 			HitPlayer( hDC, npSwarm );
; Line 771
	*** 00136d	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001370	ff 76 fe 		push	WORD PTR [bp-2]	;npSwarm
	*** 001373	e8 e0 f2 		call	HITPLAYER
;|*** 			npSwarm->nCount = 0;
; Line 772
	*** 001376	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 001379	eb 76 			jmp	SHORT $L20140
	*** 00137b	90 			nop	
					$I1620:
	*** 00137c	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 00137f	39 06 28 00 		cmp	WORD PTR $S1350_rectShotClip,ax
	*** 001383	7f 71 			jg	$I1621
	*** 001385	8b 46 ee 		mov	ax,WORD PTR [bp-18]	;rect
	*** 001388	39 06 2c 00 		cmp	WORD PTR $S1350_rectShotClip+4,ax
	*** 00138c	7e 68 			jle	$I1621
	*** 00138e	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001391	39 06 2a 00 		cmp	WORD PTR $S1350_rectShotClip+2,ax
	*** 001395	7f 5f 			jg	$I1621
	*** 001397	8b 46 f0 		mov	ax,WORD PTR [bp-16]
	*** 00139a	39 06 2e 00 		cmp	WORD PTR $S1350_rectShotClip+6,ax
	*** 00139e	7e 56 			jle	$I1621
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 776
	*** 0013a0	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 0013a3	89 46 f6 		mov	WORD PTR [bp-10],ax	;npShot
	*** 0013a6	0b c0 			or	ax,ax
	*** 0013a8	74 4c 			je	$I1621
					$F1623:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
; Line 778
	*** 0013aa	8b 46 ee 		mov	ax,WORD PTR [bp-18]	;rect
	*** 0013ad	8b 5e f6 		mov	bx,WORD PTR [bp-10]	;npShot
	*** 0013b0	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 0013b3	7c 18 			jl	$FC1624
	*** 0013b5	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 0013b8	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 0013bb	7d 10 			jge	$FC1624
	*** 0013bd	8b 46 f0 		mov	ax,WORD PTR [bp-16]
	*** 0013c0	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 0013c3	7c 08 			jl	$FC1624
	*** 0013c5	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 0013c8	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 0013cb	7c 0d 			jl	$L20046
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 776
					$FC1624:
	*** 0013cd	8b 07 			mov	ax,WORD PTR [bx]
	*** 0013cf	89 46 f6 		mov	WORD PTR [bp-10],ax	;npShot
	*** 0013d2	0b c0 			or	ax,ax
	*** 0013d4	75 d4 			jne	$F1623
	*** 0013d6	eb 1e 			jmp	SHORT $I1621
	*** 0013d8	90 			nop	
	*** 0013d9	90 			nop	
					$L20046:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				npShot->nCount = 1;
; Line 779
	*** 0013da	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
;|*** 				lScore += npSwarm->nCount * 25;
; Line 780
	*** 0013df	b8 19 00 		mov	ax,25
	*** 0013e2	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 0013e5	f7 6f 12 		imul	WORD PTR [bx+18]
	*** 0013e8	99 			cwd	
	*** 0013e9	01 06 00 00 		add	WORD PTR _lScore,ax
	*** 0013ed	11 16 02 00 		adc	WORD PTR _lScore+2,dx
;|*** 				npSwarm->nCount = 0;
; Line 781
					$L20140:
	*** 0013f1	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 				break;
;|*** 			}
;|*** 		}
;|*** 		if (npSwarm->nCount <= 0)
; Line 785
					$I1621:
	*** 0013f6	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 0013f9	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 0013fd	7f 35 			jg	$I1628
;|*** 		{
;|*** 			npSwarm->byColor = GREEN;
; Line 787
	*** 0013ff	c6 47 16 07 		mov	BYTE PTR [bx+22],7
;|*** 			KillBadGuy();
; Line 788
	*** 001403	ff 0e 00 00 		dec	WORD PTR _nBadGuys
	*** 001407	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 00140c	7f 07 			jg	$L20043
	*** 00140e	b8 02 00 		mov	ax,2
	*** 001411	50 			push	ax
	*** 001412	e8 f3 ee 		call	SETRESTART
					$L20043:
;|*** 			Explode( hDC, npSwarm );
; Line 789
	*** 001415	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001418	ff 76 fe 		push	WORD PTR [bp-2]	;npSwarm
	*** 00141b	e8 cc f0 		call	EXPLODE
;|*** 			RemoveObj( &SwarmerList, npSwarm );
; Line 790
	*** 00141e	b8 00 00 		mov	ax,OFFSET DGROUP:_SwarmerList
	*** 001421	50 			push	ax
	*** 001422	ff 76 fe 		push	WORD PTR [bp-2]	;npSwarm
	*** 001425	e8 be ec 		call	REMOVE
;|*** 			AddHeadObj( &FreeList, npSwarm );
; Line 791
	*** 001428	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 00142b	50 			push	ax
	*** 00142c	ff 76 fe 		push	WORD PTR [bp-2]	;npSwarm
	*** 00142f	e8 30 ec 		call	ADDHEAD
;|*** 		}
;|*** 		else
; Line 793
	*** 001432	eb 64 			jmp	SHORT $FC1616
					$I1628:
;|*** 		{
;|*** 			if ((npSwarm->nCount > 1) && (--npSwarm->nDelay <= 0))
; Line 795
	*** 001434	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 001438	7e 55 			jle	$I1630
	*** 00143a	ff 4f 14 		dec	WORD PTR [bx+20]
	*** 00143d	83 7f 14 00 		cmp	WORD PTR [bx+20],0
	*** 001441	7f 4c 			jg	$I1630
;|*** 			{
;|*** 				INT nDir = arand( DEGREE_SIZE );
; Line 797
	*** 001443	b8 00 01 		mov	ax,256
	*** 001446	50 			push	ax
	*** 001447	e8 b6 eb 		call	ARAND
	*** 00144a	89 46 ea 		mov	WORD PTR [bp-22],ax	;nDir
;|*** 				INT nCount = npSwarm->nCount / 2;
; Line 798
	*** 00144d	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 001450	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 001453	99 			cwd	
	*** 001454	2b c2 			sub	ax,dx
	*** 001456	d1 f8 			sar	ax,1
	*** 001458	89 46 ec 		mov	WORD PTR [bp-20],ax	;nCount
;|*** 				CreateSwarmer( npSwarm->Pos, nDir, nCount );
; Line 799
	*** 00145b	ff 77 06 		push	WORD PTR [bx+6]
	*** 00145e	ff 77 04 		push	WORD PTR [bx+4]
	*** 001461	ff 76 ea 		push	WORD PTR [bp-22]	;nDir
	*** 001464	50 			push	ax
	*** 001465	e8 12 fd 		call	CREATESWARMER
;|*** 				nCount = npSwarm->nCount - nCount;
; Line 800
	*** 001468	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 00146b	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 00146e	2b 46 ec 		sub	ax,WORD PTR [bp-20]	;nCount
	*** 001471	89 46 ec 		mov	WORD PTR [bp-20],ax	;nCount
;|*** 				CreateSwarmer( npSwarm->Pos, nDir + 128, nCount );
; Line 801
	*** 001474	ff 77 06 		push	WORD PTR [bx+6]
	*** 001477	ff 77 04 		push	WORD PTR [bx+4]
	*** 00147a	8b 46 ea 		mov	ax,WORD PTR [bp-22]	;nDir
	*** 00147d	05 80 00 		add	ax,128
	*** 001480	50 			push	ax
	*** 001481	ff 76 ec 		push	WORD PTR [bp-20]	;nCount
	*** 001484	e8 f3 fc 		call	CREATESWARMER
;|*** 				npSwarm->nCount = 0;
; Line 802
	*** 001487	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSwarm
	*** 00148a	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 			}
;|*** 			DrawObject( hDC, npSwarm );
; Line 804
					$I1630:
	*** 00148f	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001492	ff 76 fe 		push	WORD PTR [bp-2]	;npSwarm
	*** 001495	e8 86 ec 		call	DRAWOBJECT
;|*** 	for (npSwarm = HeadObj( &SwarmerList ); npSwarm; npSwarm = npNext)
; Line 760
					$FC1616:
	*** 001498	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 00149b	89 46 fe 		mov	WORD PTR [bp-2],ax	;npSwarm
	*** 00149e	0b c0 			or	ax,ax
	*** 0014a0	74 03 			je	$JCC5280
	*** 0014a2	e9 44 fe 		jmp	$F1615
					$JCC5280:
;|*** 	{
;|*** 		NPOBJ           npShot;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npSwarm );
;|*** 
;|*** 		MKRECT( &rect, npSwarm->Pos, 150 + npSwarm->nCount * 10 );
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ))
;|*** 		{
;|*** 			HitPlayer( hDC, npSwarm );
;|*** 			npSwarm->nCount = 0;
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				npShot->nCount = 1;
;|*** 				lScore += npSwarm->nCount * 25;
;|*** 				npSwarm->nCount = 0;
;|*** 				break;
;|*** 			}
;|*** 		}
;|*** 		if (npSwarm->nCount <= 0)
;|*** 		{
;|*** 			npSwarm->byColor = GREEN;
;|*** 			KillBadGuy();
;|*** 			Explode( hDC, npSwarm );
;|*** 			RemoveObj( &SwarmerList, npSwarm );
;|*** 			AddHeadObj( &FreeList, npSwarm );
;|*** 		}
;|*** 		else
;|*** 		{
;|*** 			if ((npSwarm->nCount > 1) && (--npSwarm->nDelay <= 0))
;|*** 			{
;|*** 				INT nDir = arand( DEGREE_SIZE );
;|*** 				INT nCount = npSwarm->nCount / 2;
;|*** 				CreateSwarmer( npSwarm->Pos, nDir, nCount );
;|*** 				nCount = npSwarm->nCount - nCount;
;|*** 				CreateSwarmer( npSwarm->Pos, nDir + 128, nCount );
;|*** 				npSwarm->nCount = 0;
;|*** 			}
;|*** 			DrawObject( hDC, npSwarm );
;|*** 		}
;|*** 	}
;|*** }
; Line 807
					$EX1609:
	*** 0014a5	8b e5 			mov	sp,bp
	*** 0014a7	5d 			pop	bp
	*** 0014a8	c2 02 00 		ret	2
	*** 0014ab	90 			nop	

DRAWSWARMERS	ENDP
;|*** 
;|*** //
;|*** // CreateSpinner - make a new spinner
;|*** //
;|*** 
;|*** VOID NEAR PASCAL CreateSpinner( VOID )
;|*** {
; Line 814
	PUBLIC	CREATESPINNER
CREATESPINNER	PROC NEAR
	*** 0014ac	55 			push	bp
	*** 0014ad	8b ec 			mov	bp,sp
	*** 0014af	83 ec 08 		sub	sp,8
;	npSpin = -4
;	nCnt = -2
;|*** 	NPOBJ           npSpin;
;|*** 	INT             nCnt;
;|*** 
;|*** 	if (npSpin = RemHeadObj( &FreeList ))
; Line 818
	*** 0014b2	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 0014b5	50 			push	ax
	*** 0014b6	e8 eb eb 		call	REMHEAD
	*** 0014b9	89 46 fc 		mov	WORD PTR [bp-4],ax	;npSpin
	*** 0014bc	0b c0 			or	ax,ax
	*** 0014be	75 03 			jne	$JCC5310
	*** 0014c0	e9 dc 00 		jmp	$EX1633
					$JCC5310:
;|*** 	{
;|*** 		npSpin->Pos.x = arand( CLIP_COORD * 2 ) - CLIP_COORD;
; Line 820
	*** 0014c3	b8 58 42 		mov	ax,16984
	*** 0014c6	50 			push	ax
	*** 0014c7	e8 36 eb 		call	ARAND
	*** 0014ca	2d 2c 21 		sub	ax,8492
	*** 0014cd	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSpin
	*** 0014d0	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 		npSpin->Pos.y = -CLIP_COORD;
; Line 821
	*** 0014d3	c7 47 06 d4 de 		mov	WORD PTR [bx+6],-8492
;|*** 		npSpin->Vel.x = npSpin->Vel.y = 0;
; Line 822
	*** 0014d8	2b c0 			sub	ax,ax
	*** 0014da	89 47 0a 		mov	WORD PTR [bx+10],ax
	*** 0014dd	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 		npSpin->nDir = arand( DEGREE_SIZE );
; Line 823
	*** 0014e0	b8 00 01 		mov	ax,256
	*** 0014e3	50 			push	ax
	*** 0014e4	e8 19 eb 		call	ARAND
	*** 0014e7	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSpin
	*** 0014ea	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npSpin->nSpin = -12;
; Line 824
	*** 0014ed	c7 47 10 f4 ff 		mov	WORD PTR [bx+16],-12
;|*** 		npSpin->nCount = 1 + arand( nLevel );
; Line 825
	*** 0014f2	ff 36 00 00 		push	WORD PTR _nLevel
	*** 0014f6	e8 07 eb 		call	ARAND
	*** 0014f9	40 			inc	ax
	*** 0014fa	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSpin
	*** 0014fd	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npSpin->nMass = 64 + npSpin->nCount * 32;
; Line 826
	*** 001500	b1 05 			mov	cl,5
	*** 001502	40 			inc	ax
	*** 001503	40 			inc	ax
	*** 001504	d3 e0 			shl	ax,cl
	*** 001506	89 47 0c 		mov	WORD PTR [bx+12],ax
;|*** 		npSpin->byColor = (BYTE)(MAGENTA - npSpin->nCount);
; Line 827
	*** 001509	b0 0f 			mov	al,15
	*** 00150b	2a 47 12 		sub	al,BYTE PTR [bx+18]
	*** 00150e	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 		npSpin->byPts = DIM(Spinner);
; Line 828
	*** 001511	88 4f 17 		mov	BYTE PTR [bx+23],cl
	*** 001514	c7 46 fa 14 00 		mov	WORD PTR [bp-6],OFFSET DGROUP:$S1352_Spinner
	*** 001519	8d 47 18 		lea	ax,WORD PTR [bx+24]
	*** 00151c	89 46 f8 		mov	WORD PTR [bp-8],ax
;|*** 		for (nCnt = 0; nCnt < DIM(Spinner); ++nCnt)
; Line 829
					$F1637:
;|*** 			npSpin->Pts[nCnt] = Spinner[nCnt];
; Line 830
	*** 00151f	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 001522	83 46 fa 04 		add	WORD PTR [bp-6],4
	*** 001526	8b 07 			mov	ax,WORD PTR [bx]
	*** 001528	8b 57 02 		mov	dx,WORD PTR [bx+2]
	*** 00152b	8b 5e f8 		mov	bx,WORD PTR [bp-8]
	*** 00152e	83 46 f8 04 		add	WORD PTR [bp-8],4
	*** 001532	89 07 			mov	WORD PTR [bx],ax
	*** 001534	89 57 02 		mov	WORD PTR [bx+2],dx
	*** 001537	81 7e fa 28 00 		cmp	WORD PTR [bp-6],OFFSET DGROUP:$S1352_Spinner+20
	*** 00153c	72 e1 			jb	$F1637
;|*** 		ACCEL( npSpin, npSpin->nDir, 30 + nLevel * 2 );
; Line 831
	*** 00153e	b8 00 40 		mov	ax,16384
	*** 001541	99 			cwd	
	*** 001542	52 			push	dx
	*** 001543	50 			push	ax
	*** 001544	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSpin
	*** 001547	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 00154a	2a ff 			sub	bh,bh
	*** 00154c	d1 e3 			shl	bx,1
	*** 00154e	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 001552	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 001556	83 c1 0f 		add	cx,15
	*** 001559	d1 e1 			shl	cx,1
	*** 00155b	f7 e9 			imul	cx
	*** 00155d	52 			push	dx
	*** 00155e	50 			push	ax
	*** 00155f	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001564	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSpin
	*** 001567	01 47 08 		add	WORD PTR [bx+8],ax
	*** 00156a	b8 00 40 		mov	ax,16384
	*** 00156d	99 			cwd	
	*** 00156e	52 			push	dx
	*** 00156f	50 			push	ax
	*** 001570	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 001573	2a ff 			sub	bh,bh
	*** 001575	d1 e3 			shl	bx,1
	*** 001577	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 00157b	8b 0e 00 00 		mov	cx,WORD PTR _nLevel
	*** 00157f	83 c1 0f 		add	cx,15
	*** 001582	d1 e1 			shl	cx,1
	*** 001584	f7 e9 			imul	cx
	*** 001586	52 			push	dx
	*** 001587	50 			push	ax
	*** 001588	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 00158d	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npSpin
	*** 001590	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &SpinnerList, npSpin );
; Line 832
	*** 001593	b8 00 00 		mov	ax,OFFSET DGROUP:_SpinnerList
	*** 001596	50 			push	ax
	*** 001597	53 			push	bx
	*** 001598	e8 c7 ea 		call	ADDHEAD
;|*** 		++nBadGuys;
; Line 833
	*** 00159b	ff 06 00 00 		inc	WORD PTR _nBadGuys
;|*** 	}
;|*** }
; Line 835
					$EX1633:
	*** 00159f	8b e5 			mov	sp,bp
	*** 0015a1	5d 			pop	bp
	*** 0015a2	c3 			ret	
	*** 0015a3	90 			nop	

CREATESPINNER	ENDP
;|*** 
;|*** //
;|*** // DrawSpinners - process and draw the spinner list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawSpinners( HDC hDC )
;|*** {
; Line 842
	PUBLIC	DRAWSPINNERS
DRAWSPINNERS	PROC NEAR
	*** 0015a4	55 			push	bp
	*** 0015a5	8b ec 			mov	bp,sp
	*** 0015a7	83 ec 10 		sub	sp,16
	*** 0015aa	56 			push	si
;	hDC = 4
;	npSpin = -2
;	npNext = -4
;	npShot = -8
;	nDelta = -6
;	rect = -16
;|*** 	NPOBJ           npSpin, npNext;
;|*** 	LOCAL INT       nNextSpinner = 1000;
;|*** 
;|*** 	if (nBadGuys && (--nNextSpinner < 0))
; Line 846
	*** 0015ab	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 0015b0	74 1e 			je	$I1645
	*** 0015b2	ff 0e c0 00 		dec	WORD PTR $S1644_nNextSpinner
	*** 0015b6	79 18 			jns	$I1645
;|*** 	{
;|*** 		CreateSpinner();
; Line 848
	*** 0015b8	e8 f1 fe 		call	CREATESPINNER
;|*** 		nNextSpinner = 100 + arand( 900 ) - nLevel * 2;
; Line 849
	*** 0015bb	b8 84 03 		mov	ax,900
	*** 0015be	50 			push	ax
	*** 0015bf	e8 3e ea 		call	ARAND
	*** 0015c2	b9 32 00 		mov	cx,50
	*** 0015c5	2b 0e 00 00 		sub	cx,WORD PTR _nLevel
	*** 0015c9	d1 e1 			shl	cx,1
	*** 0015cb	03 c1 			add	ax,cx
	*** 0015cd	a3 c0 00 		mov	WORD PTR $S1644_nNextSpinner,ax
;|*** 	}
;|*** 
;|*** 	for (npSpin = HeadObj( &SpinnerList ); npSpin; npSpin = npNext)
; Line 852
					$I1645:
	*** 0015d0	a1 00 00 		mov	ax,WORD PTR _SpinnerList
	*** 0015d3	89 46 fe 		mov	WORD PTR [bp-2],ax	;npSpin
	*** 0015d6	0b c0 			or	ax,ax
	*** 0015d8	75 03 			jne	$JCC5592
	*** 0015da	e9 c9 01 		jmp	$EX1641
					$JCC5592:
					$F1646:
;|*** 	{
;|*** 		NPOBJ           npShot;
;|*** 		INT             nDelta;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npSpin );
; Line 858
	*** 0015dd	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSpin
	*** 0015e0	8b 07 			mov	ax,WORD PTR [bx]
	*** 0015e2	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 
;|*** 		MKRECT( &rect, npSpin->Pos, 150 );
; Line 860
	*** 0015e5	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 0015e8	2d 96 00 		sub	ax,150
	*** 0015eb	89 46 f0 		mov	WORD PTR [bp-16],ax	;rect
	*** 0015ee	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 0015f1	05 96 00 		add	ax,150
	*** 0015f4	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 0015f7	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 0015fa	2d 96 00 		sub	ax,150
	*** 0015fd	89 46 f2 		mov	WORD PTR [bp-14],ax
	*** 001600	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 001603	05 96 00 		add	ax,150
	*** 001606	89 46 f6 		mov	WORD PTR [bp-10],ax
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ))
; Line 862
	*** 001609	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 00160c	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001610	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001613	7c 6b 			jl	$I1652
	*** 001615	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001618	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 00161b	7d 63 			jge	$I1652
	*** 00161d	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 001620	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001623	7c 5b 			jl	$I1652
	*** 001625	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 001628	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 00162b	7d 53 			jge	$I1652
;|*** 		{
;|*** 			HitPlayer( hDC, npSpin );
; Line 864
	*** 00162d	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001630	ff 76 fe 		push	WORD PTR [bp-2]	;npSpin
	*** 001633	e8 20 f0 		call	HITPLAYER
;|*** 			--npSpin->nCount;
;|*** 			npSpin->byColor = (BYTE)(MAGENTA - npSpin->nCount);
; Line 866
	*** 001636	b0 0f 			mov	al,15
	*** 001638	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSpin
	*** 00163b	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 00163e	2a 47 12 		sub	al,BYTE PTR [bx+18]
	*** 001641	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 			if (npSpin->nCount < 1)
; Line 867
	*** 001644	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 001648	7c 03 			jl	$JCC5704
	*** 00164a	e9 cb 00 		jmp	$I1654
					$JCC5704:
;|*** 			{
;|*** 				KillBadGuy();
; Line 869
					$L20144:
	*** 00164d	ff 0e 00 00 		dec	WORD PTR _nBadGuys
	*** 001651	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 001656	7f 07 			jg	$L20052
	*** 001658	b8 02 00 		mov	ax,2
	*** 00165b	50 			push	ax
	*** 00165c	e8 a9 ec 		call	SETRESTART
					$L20052:
;|*** 				Explode( hDC, npSpin );
; Line 870
	*** 00165f	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001662	ff 76 fe 		push	WORD PTR [bp-2]	;npSpin
	*** 001665	e8 82 ee 		call	EXPLODE
;|*** 				RemoveObj( &SpinnerList, npSpin );
; Line 871
	*** 001668	b8 00 00 		mov	ax,OFFSET DGROUP:_SpinnerList
	*** 00166b	50 			push	ax
	*** 00166c	ff 76 fe 		push	WORD PTR [bp-2]	;npSpin
	*** 00166f	e8 74 ea 		call	REMOVE
;|*** 				AddHeadObj( &FreeList, npSpin );
; Line 872
	*** 001672	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001675	50 			push	ax
	*** 001676	ff 76 fe 		push	WORD PTR [bp-2]	;npSpin
	*** 001679	e8 e6 e9 		call	ADDHEAD
;|*** 			}
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
; Line 875
	*** 00167c	e9 99 00 		jmp	$I1654
	*** 00167f	90 			nop	
					$I1652:
	*** 001680	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001683	39 06 28 00 		cmp	WORD PTR $S1350_rectShotClip,ax
	*** 001687	7e 03 			jle	$JCC5767
	*** 001689	e9 8c 00 		jmp	$I1654
					$JCC5767:
	*** 00168c	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 00168f	39 06 2c 00 		cmp	WORD PTR $S1350_rectShotClip+4,ax
	*** 001693	7f 03 			jg	$JCC5779
	*** 001695	e9 80 00 		jmp	$I1654
					$JCC5779:
	*** 001698	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 00169b	39 06 2a 00 		cmp	WORD PTR $S1350_rectShotClip+2,ax
	*** 00169f	7f 77 			jg	$I1654
	*** 0016a1	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 0016a4	39 06 2e 00 		cmp	WORD PTR $S1350_rectShotClip+6,ax
	*** 0016a8	7e 6e 			jle	$I1654
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 877
	*** 0016aa	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 0016ad	89 46 f8 		mov	WORD PTR [bp-8],ax	;npShot
	*** 0016b0	0b c0 			or	ax,ax
	*** 0016b2	74 64 			je	$I1654
					$F1656:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
; Line 879
	*** 0016b4	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 0016b7	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;npShot
	*** 0016ba	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 0016bd	7c 18 			jl	$FC1657
	*** 0016bf	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 0016c2	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 0016c5	7d 10 			jge	$FC1657
	*** 0016c7	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 0016ca	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 0016cd	7c 08 			jl	$FC1657
	*** 0016cf	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 0016d2	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 0016d5	7c 0d 			jl	$L20059
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 877
					$FC1657:
	*** 0016d7	8b 07 			mov	ax,WORD PTR [bx]
	*** 0016d9	89 46 f8 		mov	WORD PTR [bp-8],ax	;npShot
	*** 0016dc	0b c0 			or	ax,ax
	*** 0016de	75 d4 			jne	$F1656
	*** 0016e0	eb 36 			jmp	SHORT $I1654
	*** 0016e2	90 			nop	
	*** 0016e3	90 			nop	
					$L20059:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				npShot->nCount = 1;
; Line 880
	*** 0016e4	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
;|*** 				lScore += npSpin->nCount * 500;
; Line 881
	*** 0016e9	b8 f4 01 		mov	ax,500
	*** 0016ec	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSpin
	*** 0016ef	f7 6f 12 		imul	WORD PTR [bx+18]
	*** 0016f2	99 			cwd	
	*** 0016f3	01 06 00 00 		add	WORD PTR _lScore,ax
	*** 0016f7	11 16 02 00 		adc	WORD PTR _lScore+2,dx
;|*** 				npSpin->byColor = (BYTE)(MAGENTA - (--npSpin->nCount));
; Line 882
	*** 0016fb	b0 0f 			mov	al,15
	*** 0016fd	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 001700	2a 47 12 		sub	al,BYTE PTR [bx+18]
	*** 001703	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 				if (npSpin->nCount < 1)
; Line 883
	*** 001706	83 7f 12 01 		cmp	WORD PTR [bx+18],1
	*** 00170a	7d 03 			jge	$JCC5898
	*** 00170c	e9 3e ff 		jmp	$L20144
					$JCC5898:
	*** 00170f	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001712	ff 76 fe 		push	WORD PTR [bp-2]	;npSpin
	*** 001715	e8 02 ed 		call	HIT
;|*** 				{
;|*** 					KillBadGuy();
;|*** 					Explode( hDC, npSpin );
;|*** 					RemoveObj( &SpinnerList, npSpin );
;|*** 					AddHeadObj( &FreeList, npSpin );
;|*** 				}
;|*** 				else Hit( hDC, npSpin );
;|*** 				break;
;|*** 			}
;|*** 		}
;|*** 		nDelta = npPlayer->Pos.x - npSpin->Pos.x;
; Line 894
					$I1654:
	*** 001718	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00171c	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 00171f	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSpin
	*** 001722	2b 47 04 		sub	ax,WORD PTR [bx+4]
					$L20142:
	*** 001725	89 46 fa 		mov	WORD PTR [bp-6],ax	;nDelta
;|*** 		while (nDelta < -16 || nDelta > 16) nDelta /= 2;
; Line 895
	*** 001728	3d f0 ff 		cmp	ax,-16
	*** 00172b	7c 05 			jl	$FB1666
	*** 00172d	3d 10 00 		cmp	ax,16
	*** 001730	7e 08 			jle	$L20060
					$FB1666:
	*** 001732	b9 02 00 		mov	cx,2
	*** 001735	99 			cwd	
	*** 001736	f7 f9 			idiv	cx
	*** 001738	eb eb 			jmp	SHORT $L20142
					$L20060:
;|*** 		npSpin->Vel.x += nDelta - npSpin->Vel.x / 16;
; Line 896
	*** 00173a	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSpin
	*** 00173d	8b 47 08 		mov	ax,WORD PTR [bx+8]
	*** 001740	99 			cwd	
	*** 001741	33 c2 			xor	ax,dx
	*** 001743	2b c2 			sub	ax,dx
	*** 001745	b9 04 00 		mov	cx,4
	*** 001748	d3 f8 			sar	ax,cl
	*** 00174a	33 c2 			xor	ax,dx
	*** 00174c	2b c2 			sub	ax,dx
	*** 00174e	2b 46 fa 		sub	ax,WORD PTR [bp-6]	;nDelta
	*** 001751	f7 d8 			neg	ax
	*** 001753	01 47 08 		add	WORD PTR [bx+8],ax
;|*** 		nDelta = npPlayer->Pos.y - npSpin->Pos.y;
; Line 897
	*** 001756	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 00175a	8b 44 06 		mov	ax,WORD PTR [si+6]
	*** 00175d	2b 47 06 		sub	ax,WORD PTR [bx+6]
					$L20143:
	*** 001760	89 46 fa 		mov	WORD PTR [bp-6],ax	;nDelta
;|*** 		while (nDelta < -16 || nDelta > 16) nDelta /= 2;
; Line 898
	*** 001763	3d f0 ff 		cmp	ax,-16
	*** 001766	7c 05 			jl	$FB1670
	*** 001768	3d 10 00 		cmp	ax,16
	*** 00176b	7e 09 			jle	$L20061
					$FB1670:
	*** 00176d	b9 02 00 		mov	cx,2
	*** 001770	99 			cwd	
	*** 001771	f7 f9 			idiv	cx
	*** 001773	eb eb 			jmp	SHORT $L20143
	*** 001775	90 			nop	
					$L20061:
;|*** 		npSpin->Vel.y += nDelta - npSpin->Vel.y / 16;
; Line 899
	*** 001776	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npSpin
	*** 001779	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 00177c	99 			cwd	
	*** 00177d	33 c2 			xor	ax,dx
	*** 00177f	2b c2 			sub	ax,dx
	*** 001781	b9 04 00 		mov	cx,4
	*** 001784	d3 f8 			sar	ax,cl
	*** 001786	33 c2 			xor	ax,dx
	*** 001788	2b c2 			sub	ax,dx
	*** 00178a	2b 46 fa 		sub	ax,WORD PTR [bp-6]	;nDelta
	*** 00178d	f7 d8 			neg	ax
	*** 00178f	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		DrawObject( hDC, npSpin );
; Line 900
	*** 001792	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001795	53 			push	bx
	*** 001796	e8 85 e9 		call	DRAWOBJECT
	*** 001799	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 00179c	89 46 fe 		mov	WORD PTR [bp-2],ax	;npSpin
	*** 00179f	0b c0 			or	ax,ax
	*** 0017a1	74 03 			je	$JCC6049
	*** 0017a3	e9 37 fe 		jmp	$F1646
					$JCC6049:
;|*** 	}
;|*** }
; Line 902
					$EX1641:
	*** 0017a6	5e 			pop	si
	*** 0017a7	8b e5 			mov	sp,bp
	*** 0017a9	5d 			pop	bp
	*** 0017aa	c2 02 00 		ret	2
	*** 0017ad	90 			nop	

DRAWSPINNERS	ENDP
;|*** 
;|*** //
;|*** // CreateRoid - make a new asteroid
;|*** //
;|*** 
;|*** VOID NEAR PASCAL CreateRoid( POINT Pos, POINT Vel, INT nSides, BYTE byColor,
;|*** 							 INT nDir, INT nSpeed, INT nSpin )
;|*** {
; Line 910
	PUBLIC	CREATEROID
CREATEROID	PROC NEAR
	*** 0017ae	55 			push	bp
	*** 0017af	8b ec 			mov	bp,sp
	*** 0017b1	83 ec 0e 		sub	sp,14
	*** 0017b4	57 			push	di
	*** 0017b5	56 			push	si
;	Pos = 18
;	Vel = 14
;	nSides = 12
;	byColor = 10
;	nDir = 8
;	nSpeed = 6
;	nSpin = 4
;	npRoid = -4
;	nCnt = -2
;|*** 	NPOBJ           npRoid;
;|*** 	INT             nCnt;
;|*** 
;|*** 	if (npRoid = RemHeadObj( &FreeList ))
; Line 914
	*** 0017b6	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 0017b9	50 			push	ax
	*** 0017ba	e8 e7 e8 		call	REMHEAD
	*** 0017bd	89 46 fc 		mov	WORD PTR [bp-4],ax	;npRoid
	*** 0017c0	0b c0 			or	ax,ax
	*** 0017c2	75 03 			jne	$JCC6082
	*** 0017c4	e9 2a 01 		jmp	$EX1678
					$JCC6082:
;|*** 	{
;|*** 		npRoid->Pos = Pos;
; Line 916
	*** 0017c7	8b 46 12 		mov	ax,WORD PTR [bp+18]	;Pos
	*** 0017ca	8b 56 14 		mov	dx,WORD PTR [bp+20]
	*** 0017cd	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npRoid
	*** 0017d0	89 47 04 		mov	WORD PTR [bx+4],ax
	*** 0017d3	89 57 06 		mov	WORD PTR [bx+6],dx
;|*** 		npRoid->Vel = Vel;
; Line 917
	*** 0017d6	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;Vel
	*** 0017d9	8b 56 10 		mov	dx,WORD PTR [bp+16]
	*** 0017dc	89 47 08 		mov	WORD PTR [bx+8],ax
	*** 0017df	89 57 0a 		mov	WORD PTR [bx+10],dx
;|*** 		npRoid->nMass = nSides * 128;
; Line 918
	*** 0017e2	b1 07 			mov	cl,7
	*** 0017e4	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;nSides
	*** 0017e7	d3 e0 			shl	ax,cl
	*** 0017e9	89 47 0c 		mov	WORD PTR [bx+12],ax
;|*** 		npRoid->nDir = nDir;
; Line 919
	*** 0017ec	8b 46 08 		mov	ax,WORD PTR [bp+8]	;nDir
	*** 0017ef	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npRoid->nSpin = nSpin + arand( 11 ) - 5;
; Line 920
	*** 0017f2	b8 0b 00 		mov	ax,11
	*** 0017f5	50 			push	ax
	*** 0017f6	e8 07 e8 		call	ARAND
	*** 0017f9	03 46 04 		add	ax,WORD PTR [bp+4]	;nSpin
	*** 0017fc	2d 05 00 		sub	ax,5
	*** 0017ff	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npRoid
	*** 001802	89 47 10 		mov	WORD PTR [bx+16],ax
;|*** 		npRoid->nCount = nSides * 100;
; Line 921
	*** 001805	b8 64 00 		mov	ax,100
	*** 001808	f7 6e 0c 		imul	WORD PTR [bp+12]	;nSides
	*** 00180b	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npRoid->byColor = byColor;
; Line 922
	*** 00180e	8a 46 0a 		mov	al,BYTE PTR [bp+10]	;byColor
	*** 001811	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 		npRoid->byPts = (BYTE)(nSides + 1);
; Line 923
	*** 001814	8a 46 0c 		mov	al,BYTE PTR [bp+12]	;nSides
	*** 001817	fe c0 			inc	al
	*** 001819	88 47 17 		mov	BYTE PTR [bx+23],al
;|*** 		for (nCnt = 0; nCnt < nSides; ++nCnt)
; Line 924
	*** 00181c	83 7e 0c 00 		cmp	WORD PTR [bp+12],0	;nSides
	*** 001820	7e 54 			jle	$FB1684
	*** 001822	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npRoid
	*** 001825	05 18 00 		add	ax,24
	*** 001828	89 46 fa 		mov	WORD PTR [bp-6],ax
	*** 00182b	c7 46 f8 00 00 		mov	WORD PTR [bp-8],0
	*** 001830	b8 64 00 		mov	ax,100
	*** 001833	f7 6e 0c 		imul	WORD PTR [bp+12]	;nSides
	*** 001836	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 001839	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;nSides
	*** 00183c	89 46 f6 		mov	WORD PTR [bp-10],ax
					$F1682:
;|*** 		{
;|*** 			npRoid->Pts[nCnt].x = nCnt * DEGREE_SIZE / nSides + arand( 30 );
; Line 926
	*** 00183f	b8 1e 00 		mov	ax,30
	*** 001842	50 			push	ax
	*** 001843	e8 ba e7 		call	ARAND
	*** 001846	8b c8 			mov	cx,ax
	*** 001848	8b 46 f8 		mov	ax,WORD PTR [bp-8]
	*** 00184b	99 			cwd	
	*** 00184c	f7 7e 0c 		idiv	WORD PTR [bp+12]	;nSides
	*** 00184f	03 c8 			add	cx,ax
	*** 001851	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 001854	89 0f 			mov	WORD PTR [bx],cx
;|*** 			npRoid->Pts[nCnt].y = (nSides - 1) * 100 + 20 + arand( 80 );
; Line 927
	*** 001856	b8 50 00 		mov	ax,80
	*** 001859	50 			push	ax
	*** 00185a	e8 a3 e7 		call	ARAND
	*** 00185d	03 46 f4 		add	ax,WORD PTR [bp-12]
	*** 001860	2d 50 00 		sub	ax,80
	*** 001863	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 001866	89 47 02 		mov	WORD PTR [bx+2],ax
	*** 001869	83 46 fa 04 		add	WORD PTR [bp-6],4
	*** 00186d	80 46 f9 01 		add	BYTE PTR [bp-7],1
	*** 001871	ff 4e f6 		dec	WORD PTR [bp-10]
	*** 001874	75 c9 			jne	$F1682
;|*** 		}
; Line 928
					$FB1684:
;|*** 		npRoid->Pts[nSides] = npRoid->Pts[0];
; Line 929
	*** 001876	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npRoid
	*** 001879	8b 47 18 		mov	ax,WORD PTR [bx+24]
	*** 00187c	8b 57 1a 		mov	dx,WORD PTR [bx+26]
	*** 00187f	8b 76 0c 		mov	si,WORD PTR [bp+12]	;nSides
	*** 001882	d1 e6 			shl	si,1
	*** 001884	d1 e6 			shl	si,1
	*** 001886	89 40 18 		mov	WORD PTR [bx+24][si],ax
	*** 001889	89 50 1a 		mov	WORD PTR [bx+26][si],dx
;|*** 		ACCEL( npRoid, nDir, nSpeed );
; Line 930
	*** 00188c	b8 00 40 		mov	ax,16384
	*** 00188f	99 			cwd	
	*** 001890	52 			push	dx
	*** 001891	50 			push	ax
	*** 001892	8b 46 06 		mov	ax,WORD PTR [bp+6]	;nSpeed
	*** 001895	99 			cwd	
	*** 001896	52 			push	dx
	*** 001897	50 			push	ax
	*** 001898	8a 5e 08 		mov	bl,BYTE PTR [bp+8]	;nDir
	*** 00189b	2a ff 			sub	bh,bh
	*** 00189d	d1 e3 			shl	bx,1
	*** 00189f	8b c8 			mov	cx,ax
	*** 0018a1	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 0018a5	8b f2 			mov	si,dx
	*** 0018a7	99 			cwd	
	*** 0018a8	52 			push	dx
	*** 0018a9	50 			push	ax
	*** 0018aa	8b f9 			mov	di,cx
	*** 0018ac	89 5e f2 		mov	WORD PTR [bp-14],bx
	*** 0018af	9a 00 00 00 00 		call	FAR PTR __aFlmul
	*** 0018b4	52 			push	dx
	*** 0018b5	50 			push	ax
	*** 0018b6	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0018bb	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npRoid
	*** 0018be	01 47 08 		add	WORD PTR [bx+8],ax
	*** 0018c1	b8 00 40 		mov	ax,16384
	*** 0018c4	99 			cwd	
	*** 0018c5	52 			push	dx
	*** 0018c6	50 			push	ax
	*** 0018c7	56 			push	si
	*** 0018c8	57 			push	di
	*** 0018c9	8b 76 f2 		mov	si,WORD PTR [bp-14]
	*** 0018cc	8b 84 00 00 		mov	ax,WORD PTR _nSin[si]
	*** 0018d0	99 			cwd	
	*** 0018d1	52 			push	dx
	*** 0018d2	50 			push	ax
	*** 0018d3	9a 00 00 00 00 		call	FAR PTR __aFlmul
	*** 0018d8	52 			push	dx
	*** 0018d9	50 			push	ax
	*** 0018da	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 0018df	8b 5e fc 		mov	bx,WORD PTR [bp-4]	;npRoid
	*** 0018e2	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &RoidList, npRoid );
; Line 931
	*** 0018e5	b8 00 00 		mov	ax,OFFSET DGROUP:_RoidList
	*** 0018e8	50 			push	ax
	*** 0018e9	53 			push	bx
	*** 0018ea	e8 75 e7 		call	ADDHEAD
;|*** 		++nBadGuys;
; Line 932
	*** 0018ed	ff 06 00 00 		inc	WORD PTR _nBadGuys
;|*** 	}
;|*** }
; Line 934
					$EX1678:
	*** 0018f1	5e 			pop	si
	*** 0018f2	5f 			pop	di
	*** 0018f3	8b e5 			mov	sp,bp
	*** 0018f5	5d 			pop	bp
	*** 0018f6	c2 12 00 		ret	18
	*** 0018f9	90 			nop	

CREATEROID	ENDP
;|*** 
;|*** //
;|*** // BreakRoid - break up an asteroid
;|*** //
;|*** 
;|*** VOID NEAR PASCAL BreakRoid( HDC hDC, NPOBJ npRoid, NPOBJ npShot )
;|*** {
; Line 941
	PUBLIC	BREAKROID
BREAKROID	PROC NEAR
	*** 0018fa	55 			push	bp
	*** 0018fb	8b ec 			mov	bp,sp
	*** 0018fd	83 ec 12 		sub	sp,18
	*** 001900	56 			push	si
;	hDC = 8
;	npRoid = 6
;	npShot = 4
;	nCnt = -2
;	nNew = -4
;	Pt = -8
;	nSpeed = -10
;	Pt = -14
;|*** 	INT             nCnt, nNew;
;|*** 
;|*** 	lScore += npRoid->nCount;
; Line 944
	*** 001901	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 001904	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 001907	99 			cwd	
	*** 001908	01 06 00 00 		add	WORD PTR _lScore,ax
	*** 00190c	11 16 02 00 		adc	WORD PTR _lScore+2,dx
;|*** 	if (npShot) npShot->nCount = 1;
; Line 945
	*** 001910	83 7e 04 00 		cmp	WORD PTR [bp+4],0	;npShot
	*** 001914	74 08 			je	$I1691
	*** 001916	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npShot
	*** 001919	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
;|*** 	switch (npRoid->byPts)
; Line 946
					$I1691:
	*** 00191e	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 001921	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 001924	2a e4 			sub	ah,ah
;|*** 	{
;|*** 	case 8:
;|*** 		nNew = 2 + arand( 3 );
;|*** 		break;
;|*** 	case 7:
;|*** 		nNew = 1 + arand( 3 );
;|*** 		break;
;|*** 	case 6:
;|*** 		nNew = 1 + arand( 2 );
;|*** 		break;
;|*** 	case 5:
;|*** 		nNew = arand( 2 );
;|*** 		break;
;|*** 	default:
;|*** 		nNew = 0;
;|*** 		break;
;|*** 	}
; Line 963
	*** 001926	2d 05 00 		sub	ax,5
	*** 001929	74 11 			je	$SC1699
	*** 00192b	48 			dec	ax
	*** 00192c	74 18 			je	$SC1698
	*** 00192e	48 			dec	ax
	*** 00192f	74 1b 			je	$SC1697
	*** 001931	48 			dec	ax
	*** 001932	74 22 			je	$SC1696
;|*** 		nNew = 0;
; Line 961
	*** 001934	c7 46 fc 00 00 		mov	WORD PTR [bp-4],0	;nNew
;|*** 		break;
; Line 962
	*** 001939	eb 27 			jmp	SHORT $SB1693
	*** 00193b	90 			nop	
;|*** 	case 5:
; Line 957
					$SC1699:
;|*** 		nNew = arand( 2 );
; Line 958
	*** 00193c	b8 02 00 		mov	ax,2
	*** 00193f	50 			push	ax
	*** 001940	e8 bd e6 		call	ARAND
	*** 001943	eb 1a 			jmp	SHORT $L20145
	*** 001945	90 			nop	
;|*** 	case 6:
; Line 954
					$SC1698:
;|*** 		nNew = 1 + arand( 2 );
; Line 955
	*** 001946	b8 02 00 		mov	ax,2
	*** 001949	eb 04 			jmp	SHORT $L20146
	*** 00194b	90 			nop	
;|*** 	case 7:
; Line 951
					$SC1697:
;|*** 		nNew = 1 + arand( 3 );
; Line 952
	*** 00194c	b8 03 00 		mov	ax,3
					$L20146:
	*** 00194f	50 			push	ax
	*** 001950	e8 ad e6 		call	ARAND
	*** 001953	40 			inc	ax
	*** 001954	eb 09 			jmp	SHORT $L20145
;|*** 	case 8:
; Line 948
					$SC1696:
;|*** 		nNew = 2 + arand( 3 );
; Line 949
	*** 001956	b8 03 00 		mov	ax,3
	*** 001959	50 			push	ax
	*** 00195a	e8 a3 e6 		call	ARAND
	*** 00195d	40 			inc	ax
	*** 00195e	40 			inc	ax
					$L20145:
	*** 00195f	89 46 fc 		mov	WORD PTR [bp-4],ax	;nNew
;|*** 		break;
;|*** 	case 7:
;|*** 		nNew = 1 + arand( 3 );
;|*** 		break;
;|*** 	case 6:
;|*** 		nNew = 1 + arand( 2 );
;|*** 		break;
;|*** 	case 5:
;|*** 		nNew = arand( 2 );
;|*** 		break;
;|*** 	default:
;|*** 		nNew = 0;
;|*** 		break;
;|*** 	}
; Line 963
					$SB1693:
;|*** 	if (nNew == 1) // don't explode outward
; Line 964
	*** 001962	83 7e fc 01 		cmp	WORD PTR [bp-4],1	;nNew
	*** 001966	75 5a 			jne	$I1701
;|*** 	{
;|*** 		POINT Pt = npRoid->Pos;
; Line 966
	*** 001968	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 00196b	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 00196e	8b 57 06 		mov	dx,WORD PTR [bx+6]
	*** 001971	89 46 f8 		mov	WORD PTR [bp-8],ax	;Pt
	*** 001974	89 56 fa 		mov	WORD PTR [bp-6],dx
;|*** 		Pt.x += arand( 301 ) - 150; Pt.y += arand( 301 ) - 150;
; Line 967
	*** 001977	b8 2d 01 		mov	ax,301
	*** 00197a	50 			push	ax
	*** 00197b	e8 82 e6 		call	ARAND
	*** 00197e	2d 96 00 		sub	ax,150
	*** 001981	01 46 f8 		add	WORD PTR [bp-8],ax	;Pt
	*** 001984	b8 2d 01 		mov	ax,301
	*** 001987	50 			push	ax
	*** 001988	e8 75 e6 		call	ARAND
	*** 00198b	2d 96 00 		sub	ax,150
	*** 00198e	01 46 fa 		add	WORD PTR [bp-6],ax
;|*** 		CreateRoid( Pt, npRoid->Vel, npRoid->byPts - (nNew + 1),
;|*** 					npRoid->byColor, npShot->nDir, 8, npRoid->nSpin );
; Line 969
	*** 001991	ff 76 fa 		push	WORD PTR [bp-6]
	*** 001994	ff 76 f8 		push	WORD PTR [bp-8]	;Pt
	*** 001997	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 00199a	ff 77 0a 		push	WORD PTR [bx+10]
	*** 00199d	ff 77 08 		push	WORD PTR [bx+8]
	*** 0019a0	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 0019a3	2a e4 			sub	ah,ah
	*** 0019a5	2b 46 fc 		sub	ax,WORD PTR [bp-4]	;nNew
	*** 0019a8	48 			dec	ax
	*** 0019a9	50 			push	ax
	*** 0019aa	8a 47 16 		mov	al,BYTE PTR [bx+22]
	*** 0019ad	50 			push	ax
	*** 0019ae	8b 76 04 		mov	si,WORD PTR [bp+4]	;npShot
	*** 0019b1	ff 74 0e 		push	WORD PTR [si+14]
	*** 0019b4	b8 08 00 		mov	ax,8
	*** 0019b7	50 			push	ax
	*** 0019b8	ff 77 10 		push	WORD PTR [bx+16]
	*** 0019bb	e8 f0 fd 		call	CREATEROID
;|*** 	}
;|*** 	else if (nNew > 0)
; Line 971
	*** 0019be	e9 ba 00 		jmp	$I1703
	*** 0019c1	90 			nop	
					$I1701:
	*** 0019c2	83 7e fc 00 		cmp	WORD PTR [bp-4],0	;nNew
	*** 0019c6	7f 03 			jg	$JCC6598
	*** 0019c8	e9 b0 00 		jmp	$I1703
					$JCC6598:
;|*** 	{
;|*** 		INT nSpeed = npRoid->nSpin * npRoid->nSpin * nNew + 16;
; Line 973
	*** 0019cb	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 0019ce	8b 47 10 		mov	ax,WORD PTR [bx+16]
	*** 0019d1	8b c8 			mov	cx,ax
	*** 0019d3	f7 e9 			imul	cx
	*** 0019d5	f7 6e fc 		imul	WORD PTR [bp-4]	;nNew
	*** 0019d8	05 10 00 		add	ax,16
	*** 0019db	89 46 f6 		mov	WORD PTR [bp-10],ax	;nSpeed
;|*** 		for (nCnt = 0; nCnt < nNew; ++nCnt)
; Line 974
	*** 0019de	83 7e fc 00 		cmp	WORD PTR [bp-4],0	;nNew
	*** 0019e2	7f 03 			jg	$JCC6626
	*** 0019e4	e9 94 00 		jmp	$I1703
					$JCC6626:
	*** 0019e7	c7 46 f0 00 00 		mov	WORD PTR [bp-16],0
	*** 0019ec	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;nNew
	*** 0019ef	89 46 ee 		mov	WORD PTR [bp-18],ax
					$F1706:
;|*** 		{
;|*** 			POINT Pt = npRoid->Pos;
; Line 976
	*** 0019f2	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 0019f5	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 0019f8	8b 57 06 		mov	dx,WORD PTR [bx+6]
	*** 0019fb	89 46 f2 		mov	WORD PTR [bp-14],ax	;Pt
	*** 0019fe	89 56 f4 		mov	WORD PTR [bp-12],dx
;|*** 			Pt.x += arand( 601 ) - 300; Pt.y += arand( 601 ) - 300;
; Line 977
	*** 001a01	b8 59 02 		mov	ax,601
	*** 001a04	50 			push	ax
	*** 001a05	e8 f8 e5 		call	ARAND
	*** 001a08	2d 2c 01 		sub	ax,300
	*** 001a0b	01 46 f2 		add	WORD PTR [bp-14],ax	;Pt
	*** 001a0e	b8 59 02 		mov	ax,601
	*** 001a11	50 			push	ax
	*** 001a12	e8 eb e5 		call	ARAND
	*** 001a15	2d 2c 01 		sub	ax,300
	*** 001a18	01 46 f4 		add	WORD PTR [bp-12],ax
;|*** 			CreateRoid( Pt, npRoid->Vel, npRoid->byPts - (nNew + 1),
;|*** 						npRoid->byColor,
;|*** 						npRoid->nDir + nCnt * DEGREE_SIZE / nNew + arand( 32 ),
;|*** 						nSpeed + arand( nLevel * 4 ),
;|*** 						npRoid->nSpin / 2 );
; Line 982
	*** 001a1b	ff 76 f4 		push	WORD PTR [bp-12]
	*** 001a1e	ff 76 f2 		push	WORD PTR [bp-14]	;Pt
	*** 001a21	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 001a24	ff 77 0a 		push	WORD PTR [bx+10]
	*** 001a27	ff 77 08 		push	WORD PTR [bx+8]
	*** 001a2a	8a 47 17 		mov	al,BYTE PTR [bx+23]
	*** 001a2d	2a e4 			sub	ah,ah
	*** 001a2f	2b 46 fc 		sub	ax,WORD PTR [bp-4]	;nNew
	*** 001a32	48 			dec	ax
	*** 001a33	50 			push	ax
	*** 001a34	8a 47 16 		mov	al,BYTE PTR [bx+22]
	*** 001a37	50 			push	ax
	*** 001a38	b8 20 00 		mov	ax,32
	*** 001a3b	50 			push	ax
	*** 001a3c	e8 c1 e5 		call	ARAND
	*** 001a3f	8b c8 			mov	cx,ax
	*** 001a41	8b 46 f0 		mov	ax,WORD PTR [bp-16]
	*** 001a44	99 			cwd	
	*** 001a45	f7 7e fc 		idiv	WORD PTR [bp-4]	;nNew
	*** 001a48	03 c8 			add	cx,ax
	*** 001a4a	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 001a4d	03 4f 0e 		add	cx,WORD PTR [bx+14]
	*** 001a50	51 			push	cx
	*** 001a51	a1 00 00 		mov	ax,WORD PTR _nLevel
	*** 001a54	d1 e0 			shl	ax,1
	*** 001a56	d1 e0 			shl	ax,1
	*** 001a58	50 			push	ax
	*** 001a59	e8 a4 e5 		call	ARAND
	*** 001a5c	03 46 f6 		add	ax,WORD PTR [bp-10]	;nSpeed
	*** 001a5f	50 			push	ax
	*** 001a60	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 001a63	8b 47 10 		mov	ax,WORD PTR [bx+16]
	*** 001a66	99 			cwd	
	*** 001a67	2b c2 			sub	ax,dx
	*** 001a69	d1 f8 			sar	ax,1
	*** 001a6b	50 			push	ax
	*** 001a6c	e8 3f fd 		call	CREATEROID
	*** 001a6f	80 46 f1 01 		add	BYTE PTR [bp-15],1
	*** 001a73	ff 4e ee 		dec	WORD PTR [bp-18]
	*** 001a76	74 03 			je	$JCC6774
	*** 001a78	e9 77 ff 		jmp	$F1706
					$JCC6774:
;|*** 		}
;|*** 	}
;|*** 	KillBadGuy();
; Line 985
					$I1703:
	*** 001a7b	ff 0e 00 00 		dec	WORD PTR _nBadGuys
	*** 001a7f	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 001a84	7f 07 			jg	$L20068
	*** 001a86	b8 02 00 		mov	ax,2
	*** 001a89	50 			push	ax
	*** 001a8a	e8 7b e8 		call	SETRESTART
					$L20068:
;|*** 	++npRoid->byColor;
; Line 986
	*** 001a8d	8b 5e 06 		mov	bx,WORD PTR [bp+6]	;npRoid
	*** 001a90	fe 47 16 		inc	BYTE PTR [bx+22]
;|*** 	npRoid->nCount = 0;
; Line 987
	*** 001a93	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 	if (nNew)
; Line 988
	*** 001a98	83 7e fc 00 		cmp	WORD PTR [bp-4],0	;nNew
	*** 001a9c	74 14 			je	$I1710
;|*** 	{
;|*** 		Hit( hDC, npRoid );
; Line 990
	*** 001a9e	ff 76 08 		push	WORD PTR [bp+8]	;hDC
	*** 001aa1	ff 76 06 		push	WORD PTR [bp+6]	;npRoid
	*** 001aa4	e8 73 e9 		call	HIT
;|*** 		DrawObject( hDC, npRoid );
; Line 991
	*** 001aa7	ff 76 08 		push	WORD PTR [bp+8]	;hDC
	*** 001aaa	ff 76 06 		push	WORD PTR [bp+6]	;npRoid
	*** 001aad	e8 6e e6 		call	DRAWOBJECT
;|*** 	}
;|*** 	else Explode( hDC, npRoid );
; Line 993
	*** 001ab0	eb 09 			jmp	SHORT $I1711
					$I1710:
	*** 001ab2	ff 76 08 		push	WORD PTR [bp+8]	;hDC
	*** 001ab5	ff 76 06 		push	WORD PTR [bp+6]	;npRoid
	*** 001ab8	e8 2f ea 		call	EXPLODE
					$I1711:
;|*** 	RemoveObj( &RoidList, npRoid );
; Line 994
	*** 001abb	b8 00 00 		mov	ax,OFFSET DGROUP:_RoidList
	*** 001abe	50 			push	ax
	*** 001abf	ff 76 06 		push	WORD PTR [bp+6]	;npRoid
	*** 001ac2	e8 21 e6 		call	REMOVE
;|*** 	AddHeadObj( &FreeList, npRoid );
; Line 995
	*** 001ac5	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001ac8	50 			push	ax
	*** 001ac9	ff 76 06 		push	WORD PTR [bp+6]	;npRoid
	*** 001acc	e8 93 e5 		call	ADDHEAD
;|*** }
; Line 996
	*** 001acf	5e 			pop	si
	*** 001ad0	8b e5 			mov	sp,bp
	*** 001ad2	5d 			pop	bp
	*** 001ad3	c2 06 00 		ret	6

BREAKROID	ENDP
;|*** 
;|*** //
;|*** // DrawRoids - process and draw the asteroid list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawRoids( HDC hDC )
;|*** {
; Line 1003
	PUBLIC	DRAWROIDS
DRAWROIDS	PROC NEAR
	*** 001ad6	55 			push	bp
	*** 001ad7	8b ec 			mov	bp,sp
	*** 001ad9	83 ec 10 		sub	sp,16
;	hDC = 4
;	npRoid = -2
;	npNext = -4
;	nSize = -6
;	npShot = -8
;	rect = -16
;|*** 	NPOBJ           npRoid, npNext;
;|*** 
;|*** 	for (npRoid = HeadObj( &RoidList ); npRoid; npRoid = npNext)
; Line 1006
	*** 001adc	a1 00 00 		mov	ax,WORD PTR _RoidList
	*** 001adf	89 46 fe 		mov	WORD PTR [bp-2],ax	;npRoid
	*** 001ae2	0b c0 			or	ax,ax
	*** 001ae4	75 03 			jne	$JCC6884
	*** 001ae6	e9 1c 01 		jmp	$EX1713
					$JCC6884:
					$F1716:
;|*** 	{
;|*** 		INT             nSize = npRoid->nCount;
; Line 1008
	*** 001ae9	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npRoid
	*** 001aec	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 001aef	89 46 fa 		mov	WORD PTR [bp-6],ax	;nSize
;|*** 		NPOBJ           npShot;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npRoid );
; Line 1012
	*** 001af2	8b 07 			mov	ax,WORD PTR [bx]
	*** 001af4	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 
;|*** 		DrawObject( hDC, npRoid );
; Line 1014
	*** 001af7	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001afa	53 			push	bx
	*** 001afb	e8 20 e6 		call	DRAWOBJECT
;|*** 
;|*** 		MKRECT( &rect, npRoid->Pos, nSize );
; Line 1016
	*** 001afe	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npRoid
	*** 001b01	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001b04	2b 46 fa 		sub	ax,WORD PTR [bp-6]	;nSize
	*** 001b07	89 46 f0 		mov	WORD PTR [bp-16],ax	;rect
	*** 001b0a	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001b0d	03 46 fa 		add	ax,WORD PTR [bp-6]	;nSize
	*** 001b10	89 46 f4 		mov	WORD PTR [bp-12],ax
	*** 001b13	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 001b16	2b 46 fa 		sub	ax,WORD PTR [bp-6]	;nSize
	*** 001b19	89 46 f2 		mov	WORD PTR [bp-14],ax
	*** 001b1c	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 001b1f	03 46 fa 		add	ax,WORD PTR [bp-6]	;nSize
	*** 001b22	89 46 f6 		mov	WORD PTR [bp-10],ax
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ) && HitPlayer( hDC, npRoid ))
; Line 1018
	*** 001b25	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 001b28	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001b2c	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001b2f	7c 61 			jl	$I1722
	*** 001b31	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001b34	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001b37	7d 59 			jge	$I1722
	*** 001b39	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 001b3c	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001b3f	7c 51 			jl	$I1722
	*** 001b41	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 001b44	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001b47	7d 49 			jge	$I1722
	*** 001b49	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001b4c	ff 76 fe 		push	WORD PTR [bp-2]	;npRoid
	*** 001b4f	e8 04 eb 		call	HITPLAYER
	*** 001b52	0b c0 			or	ax,ax
	*** 001b54	74 3c 			je	$I1722
;|*** 		{
;|*** 			npPlayer->nCount = -npPlayer->nCount;
; Line 1020
	*** 001b56	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001b5a	f7 5f 12 		neg	WORD PTR [bx+18]
;|*** 			npPlayer->byColor = WHITE;
; Line 1021
	*** 001b5d	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001b61	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** 			Explode( hDC, npPlayer );
; Line 1022
	*** 001b65	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001b68	ff 36 00 00 		push	WORD PTR _npPlayer
	*** 001b6c	e8 7b e9 		call	EXPLODE
;|*** 			BreakRoid( hDC, npRoid, NULL );
; Line 1023
	*** 001b6f	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001b72	ff 76 fe 		push	WORD PTR [bp-2]	;npRoid
	*** 001b75	2b c0 			sub	ax,ax
	*** 001b77	50 			push	ax
	*** 001b78	e8 7f fd 		call	BREAKROID
;|*** 			if (nBadGuys) SetRestart( RESTART_LEVEL );
; Line 1024
	*** 001b7b	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 001b80	74 0a 			je	$I1723
	*** 001b82	b8 01 00 		mov	ax,1
					$L20147:
	*** 001b85	50 			push	ax
	*** 001b86	e8 7f e7 		call	SETRESTART
;|*** 			else SetRestart( RESTART_NEXTLEVEL );
; Line 1025
	*** 001b89	eb 6d 			jmp	SHORT $FC1717
	*** 001b8b	90 			nop	
					$I1723:
	*** 001b8c	b8 02 00 		mov	ax,2
	*** 001b8f	eb f4 			jmp	SHORT $L20147
	*** 001b91	90 			nop	
					$I1722:
	*** 001b92	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001b95	39 06 28 00 		cmp	WORD PTR $S1350_rectShotClip,ax
	*** 001b99	7f 5d 			jg	$FC1717
	*** 001b9b	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 001b9e	39 06 2c 00 		cmp	WORD PTR $S1350_rectShotClip+4,ax
	*** 001ba2	7e 54 			jle	$FC1717
	*** 001ba4	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 001ba7	39 06 2a 00 		cmp	WORD PTR $S1350_rectShotClip+2,ax
	*** 001bab	7f 4b 			jg	$FC1717
	*** 001bad	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 001bb0	39 06 2e 00 		cmp	WORD PTR $S1350_rectShotClip+6,ax
	*** 001bb4	7e 42 			jle	$FC1717
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 1029
	*** 001bb6	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 001bb9	89 46 f8 		mov	WORD PTR [bp-8],ax	;npShot
	*** 001bbc	0b c0 			or	ax,ax
	*** 001bbe	74 38 			je	$FC1717
					$F1727:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
; Line 1031
	*** 001bc0	8b 46 f0 		mov	ax,WORD PTR [bp-16]	;rect
	*** 001bc3	8b 5e f8 		mov	bx,WORD PTR [bp-8]	;npShot
	*** 001bc6	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001bc9	7c 18 			jl	$FC1728
	*** 001bcb	8b 46 f4 		mov	ax,WORD PTR [bp-12]
	*** 001bce	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001bd1	7d 10 			jge	$FC1728
	*** 001bd3	8b 46 f2 		mov	ax,WORD PTR [bp-14]
	*** 001bd6	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001bd9	7c 08 			jl	$FC1728
	*** 001bdb	8b 46 f6 		mov	ax,WORD PTR [bp-10]
	*** 001bde	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001be1	7c 0b 			jl	$L20073
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 1029
					$FC1728:
	*** 001be3	8b 07 			mov	ax,WORD PTR [bx]
	*** 001be5	89 46 f8 		mov	WORD PTR [bp-8],ax	;npShot
	*** 001be8	0b c0 			or	ax,ax
	*** 001bea	75 d4 			jne	$F1727
	*** 001bec	eb 0a 			jmp	SHORT $FC1717
					$L20073:
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				BreakRoid( hDC, npRoid, npShot );
; Line 1032
	*** 001bee	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001bf1	ff 76 fe 		push	WORD PTR [bp-2]	;npRoid
	*** 001bf4	53 			push	bx
	*** 001bf5	e8 02 fd 		call	BREAKROID
;|*** 	for (npRoid = HeadObj( &RoidList ); npRoid; npRoid = npNext)
; Line 1006
					$FC1717:
	*** 001bf8	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 001bfb	89 46 fe 		mov	WORD PTR [bp-2],ax	;npRoid
	*** 001bfe	0b c0 			or	ax,ax
	*** 001c00	74 03 			je	$JCC7168
	*** 001c02	e9 e4 fe 		jmp	$F1716
					$JCC7168:
;|*** 	{
;|*** 		INT             nSize = npRoid->nCount;
;|*** 		NPOBJ           npShot;
;|*** 		RECT            rect;
;|*** 
;|*** 		npNext = NextObj( npRoid );
;|*** 
;|*** 		DrawObject( hDC, npRoid );
;|*** 
;|*** 		MKRECT( &rect, npRoid->Pos, nSize );
;|*** 
;|*** 		if (PTINRECT( &rect, npPlayer->Pos ) && HitPlayer( hDC, npRoid ))
;|*** 		{
;|*** 			npPlayer->nCount = -npPlayer->nCount;
;|*** 			npPlayer->byColor = WHITE;
;|*** 			Explode( hDC, npPlayer );
;|*** 			BreakRoid( hDC, npRoid, NULL );
;|*** 			if (nBadGuys) SetRestart( RESTART_LEVEL );
;|*** 			else SetRestart( RESTART_NEXTLEVEL );
;|*** 		}
;|*** 		else if (INTRECT(&rect, &rectShotClip))
;|*** 		{
;|*** 			for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
;|*** 			{
;|*** 				if (!PTINRECT( &rect, npShot->Pos )) continue;
;|*** 				BreakRoid( hDC, npRoid, npShot );
;|*** 				break;
;|*** 			}
;|*** 		}
;|*** 	}
;|*** }
; Line 1037
					$EX1713:
	*** 001c05	8b e5 			mov	sp,bp
	*** 001c07	5d 			pop	bp
	*** 001c08	c2 02 00 		ret	2
	*** 001c0b	90 			nop	

DRAWROIDS	ENDP
;|*** 
;|*** //
;|*** // DrawShots - process and draw the player shot list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawShots( HDC hDC )
;|*** {
; Line 1044
	PUBLIC	DRAWSHOTS
DRAWSHOTS	PROC NEAR
	*** 001c0c	55 			push	bp
	*** 001c0d	8b ec 			mov	bp,sp
	*** 001c0f	83 ec 04 		sub	sp,4
;	hDC = 4
;	npShot = -2
;	npNext = -4
;|*** 	NPOBJ           npShot, npNext;
;|*** 
;|*** 	if (npShot = HeadObj( &ShotList ))
; Line 1047
	*** 001c12	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 001c15	89 46 fe 		mov	WORD PTR [bp-2],ax	;npShot
	*** 001c18	0b c0 			or	ax,ax
	*** 001c1a	75 03 			jne	$JCC7194
	*** 001c1c	e9 bf 00 		jmp	$I1736
					$JCC7194:
;|*** 	{
;|*** 		rectShotClip.left = rectShotClip.right = npShot->Pos.x;
; Line 1049
	*** 001c1f	8b d8 			mov	bx,ax
	*** 001c21	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001c24	a3 2c 00 		mov	WORD PTR $S1350_rectShotClip+4,ax
	*** 001c27	a3 28 00 		mov	WORD PTR $S1350_rectShotClip,ax
;|*** 		rectShotClip.top = rectShotClip.bottom = npShot->Pos.y;
; Line 1050
	*** 001c2a	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 001c2d	a3 2e 00 		mov	WORD PTR $S1350_rectShotClip+6,ax
	*** 001c30	a3 2a 00 		mov	WORD PTR $S1350_rectShotClip+2,ax
;|*** 		while (npShot)
; Line 1051
	*** 001c33	0b db 			or	bx,bx
	*** 001c35	75 03 			jne	$JCC7221
	*** 001c37	e9 b3 00 		jmp	$EX1733
					$JCC7221:
					$FC1738:
;|*** 		{
;|*** 			npNext = NextObj( npShot );
; Line 1053
	*** 001c3a	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001c3d	8b 07 			mov	ax,WORD PTR [bx]
	*** 001c3f	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 			switch (--npShot->nCount)
; Line 1054
	*** 001c42	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 001c45	8b 47 12 		mov	ax,WORD PTR [bx+18]
;|*** 			{
;|*** 			case 10:
;|*** 				npShot->byColor = DKCYAN;
;|*** 				break;
;|*** 			case 5:
;|*** 				npShot->byColor = DKBLUE;
;|*** 				break;
;|*** 			case 0:
;|*** 				RemoveObj( &ShotList, npShot );
;|*** 				AddHeadObj( &FreeList, npShot );
;|*** 				break;
;|*** 			}
; Line 1066
	*** 001c48	3d 0a 00 		cmp	ax,10
	*** 001c4b	74 2d 			je	$SC1744
	*** 001c4d	77 32 			ja	$SB1741
	*** 001c4f	0a c0 			or	al,al
	*** 001c51	74 07 			je	$SC1746
	*** 001c53	2c 05 			sub	al,5
	*** 001c55	74 19 			je	$SC1745
	*** 001c57	eb 28 			jmp	SHORT $SB1741
	*** 001c59	90 			nop	
;|*** 			case 0:
; Line 1062
					$SC1746:
;|*** 				RemoveObj( &ShotList, npShot );
; Line 1063
	*** 001c5a	b8 00 00 		mov	ax,OFFSET DGROUP:_ShotList
	*** 001c5d	50 			push	ax
	*** 001c5e	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 001c61	e8 82 e4 		call	REMOVE
;|*** 				AddHeadObj( &FreeList, npShot );
; Line 1064
	*** 001c64	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001c67	50 			push	ax
	*** 001c68	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 001c6b	e8 f4 e3 		call	ADDHEAD
;|*** 				break;
; Line 1065
	*** 001c6e	eb 11 			jmp	SHORT $SB1741
;|*** 			case 5:
; Line 1059
					$SC1745:
;|*** 				npShot->byColor = DKBLUE;
; Line 1060
	*** 001c70	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001c73	c6 47 16 08 		mov	BYTE PTR [bx+22],8
;|*** 				break;
; Line 1061
	*** 001c77	eb 08 			jmp	SHORT $SB1741
	*** 001c79	90 			nop	
;|*** 			case 10:
; Line 1056
					$SC1744:
;|*** 				npShot->byColor = DKCYAN;
; Line 1057
	*** 001c7a	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001c7d	c6 47 16 0c 		mov	BYTE PTR [bx+22],12
;|*** 				break;
;|*** 			case 5:
;|*** 				npShot->byColor = DKBLUE;
;|*** 				break;
;|*** 			case 0:
;|*** 				RemoveObj( &ShotList, npShot );
;|*** 				AddHeadObj( &FreeList, npShot );
;|*** 				break;
;|*** 			}
; Line 1066
					$SB1741:
;|*** 			DrawObject( hDC, npShot );
; Line 1067
	*** 001c81	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001c84	ff 76 fe 		push	WORD PTR [bp-2]	;npShot
	*** 001c87	e8 94 e4 		call	DRAWOBJECT
;|*** 			if (npShot->Pos.x < rectShotClip.left) rectShotClip.left = npShot->Pos.x;
; Line 1068
	*** 001c8a	a1 28 00 		mov	ax,WORD PTR $S1350_rectShotClip
	*** 001c8d	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001c90	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001c93	7d 09 			jge	$I1747
	*** 001c95	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001c98	a3 28 00 		mov	WORD PTR $S1350_rectShotClip,ax
;|*** 			else if (npShot->Pos.x > rectShotClip.right) rectShotClip.right = npShot->Pos.x;
; Line 1069
	*** 001c9b	eb 0f 			jmp	SHORT $I1748
	*** 001c9d	90 			nop	
					$I1747:
	*** 001c9e	a1 2c 00 		mov	ax,WORD PTR $S1350_rectShotClip+4
	*** 001ca1	39 47 04 		cmp	WORD PTR [bx+4],ax
	*** 001ca4	7e 06 			jle	$I1748
	*** 001ca6	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001ca9	a3 2c 00 		mov	WORD PTR $S1350_rectShotClip+4,ax
;|*** 			if (npShot->Pos.y < rectShotClip.top) rectShotClip.top = npShot->Pos.y;
; Line 1070
					$I1748:
	*** 001cac	a1 2a 00 		mov	ax,WORD PTR $S1350_rectShotClip+2
	*** 001caf	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001cb2	7d 08 			jge	$I1750
	*** 001cb4	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 001cb7	a3 2a 00 		mov	WORD PTR $S1350_rectShotClip+2,ax
;|*** 			else if (npShot->Pos.y > rectShotClip.bottom) rectShotClip.bottom = npShot->Pos.y;
; Line 1071
	*** 001cba	eb 0e 			jmp	SHORT $I1751
					$I1750:
	*** 001cbc	a1 2e 00 		mov	ax,WORD PTR $S1350_rectShotClip+6
	*** 001cbf	39 47 06 		cmp	WORD PTR [bx+6],ax
	*** 001cc2	7e 06 			jle	$I1751
	*** 001cc4	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 001cc7	a3 2e 00 		mov	WORD PTR $S1350_rectShotClip+6,ax
;|*** 			npShot = npNext;
; Line 1072
					$I1751:
;|*** 		}
; Line 1073
	*** 001cca	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 001ccd	89 46 fe 		mov	WORD PTR [bp-2],ax	;npShot
	*** 001cd0	0b c0 			or	ax,ax
	*** 001cd2	74 03 			je	$JCC7378
	*** 001cd4	e9 63 ff 		jmp	$FC1738
					$JCC7378:
	*** 001cd7	8b e5 			mov	sp,bp
	*** 001cd9	5d 			pop	bp
	*** 001cda	c2 02 00 		ret	2
	*** 001cdd	90 			nop	
;|*** 	}
;|*** 	else rectShotClip.left = rectShotClip.right = rectShotClip.top = rectShotClip.bottom = 32767;
; Line 1075
					$I1736:
	*** 001cde	b8 ff 7f 		mov	ax,32767
	*** 001ce1	a3 2e 00 		mov	WORD PTR $S1350_rectShotClip+6,ax
	*** 001ce4	a3 2a 00 		mov	WORD PTR $S1350_rectShotClip+2,ax
	*** 001ce7	a3 2c 00 		mov	WORD PTR $S1350_rectShotClip+4,ax
	*** 001cea	a3 28 00 		mov	WORD PTR $S1350_rectShotClip,ax
;|*** }
; Line 1076
					$EX1733:
	*** 001ced	8b e5 			mov	sp,bp
	*** 001cef	5d 			pop	bp
	*** 001cf0	c2 02 00 		ret	2
	*** 001cf3	90 			nop	

DRAWSHOTS	ENDP
;|*** 
;|*** //
;|*** // DrawFlames - process and draw the flame list
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawFlames( HDC hDC )
;|*** {
; Line 1083
	PUBLIC	DRAWFLAMES
DRAWFLAMES	PROC NEAR
	*** 001cf4	55 			push	bp
	*** 001cf5	8b ec 			mov	bp,sp
	*** 001cf7	83 ec 04 		sub	sp,4
;	hDC = 4
;	npFlame = -2
;	npNext = -4
;|*** 	NPOBJ           npFlame, npNext;
;|*** 
;|*** 	for (npFlame = HeadObj( &FlameList ); npFlame; npFlame = npNext)
; Line 1086
	*** 001cfa	a1 00 00 		mov	ax,WORD PTR _FlameList
	*** 001cfd	89 46 fe 		mov	WORD PTR [bp-2],ax	;npFlame
	*** 001d00	0b c0 			or	ax,ax
	*** 001d02	74 5a 			je	$EX1755
					$F1758:
;|*** 	{
;|*** 		npNext = NextObj( npFlame );
; Line 1088
	*** 001d04	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001d07	8b 07 			mov	ax,WORD PTR [bx]
	*** 001d09	89 46 fc 		mov	WORD PTR [bp-4],ax	;npNext
;|*** 		switch (--npFlame->nCount)
; Line 1089
	*** 001d0c	ff 4f 12 		dec	WORD PTR [bx+18]
	*** 001d0f	8b 47 12 		mov	ax,WORD PTR [bx+18]
;|*** 		{
;|*** 		case 7:
;|*** 			npFlame->byColor = RED;
;|*** 			break;
;|*** 		case 3:
;|*** 			npFlame->byColor = DKRED;
;|*** 			break;
;|*** 		case 0:
;|*** 			RemoveObj( &FlameList, npFlame );
;|*** 			AddHeadObj( &FreeList, npFlame );
;|*** 			break;
;|*** 		}
; Line 1101
	*** 001d12	3d 07 00 		cmp	ax,7
	*** 001d15	74 2d 			je	$SC1765
	*** 001d17	77 32 			ja	$SB1762
	*** 001d19	0a c0 			or	al,al
	*** 001d1b	74 07 			je	$SC1767
	*** 001d1d	2c 03 			sub	al,3
	*** 001d1f	74 19 			je	$SC1766
	*** 001d21	eb 28 			jmp	SHORT $SB1762
	*** 001d23	90 			nop	
;|*** 		case 0:
; Line 1097
					$SC1767:
;|*** 			RemoveObj( &FlameList, npFlame );
; Line 1098
	*** 001d24	b8 00 00 		mov	ax,OFFSET DGROUP:_FlameList
	*** 001d27	50 			push	ax
	*** 001d28	ff 76 fe 		push	WORD PTR [bp-2]	;npFlame
	*** 001d2b	e8 b8 e3 		call	REMOVE
;|*** 			AddHeadObj( &FreeList, npFlame );
; Line 1099
	*** 001d2e	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001d31	50 			push	ax
	*** 001d32	ff 76 fe 		push	WORD PTR [bp-2]	;npFlame
	*** 001d35	e8 2a e3 		call	ADDHEAD
;|*** 			break;
; Line 1100
	*** 001d38	eb 11 			jmp	SHORT $SB1762
;|*** 		case 3:
; Line 1094
					$SC1766:
;|*** 			npFlame->byColor = DKRED;
; Line 1095
	*** 001d3a	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001d3d	c6 47 16 04 		mov	BYTE PTR [bx+22],4
;|*** 			break;
; Line 1096
	*** 001d41	eb 08 			jmp	SHORT $SB1762
	*** 001d43	90 			nop	
;|*** 		case 7:
; Line 1091
					$SC1765:
;|*** 			npFlame->byColor = RED;
; Line 1092
	*** 001d44	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001d47	c6 47 16 05 		mov	BYTE PTR [bx+22],5
;|*** 			break;
;|*** 		case 3:
;|*** 			npFlame->byColor = DKRED;
;|*** 			break;
;|*** 		case 0:
;|*** 			RemoveObj( &FlameList, npFlame );
;|*** 			AddHeadObj( &FreeList, npFlame );
;|*** 			break;
;|*** 		}
; Line 1101
					$SB1762:
;|*** 		DrawObject( hDC, npFlame );
; Line 1102
	*** 001d4b	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 001d4e	ff 76 fe 		push	WORD PTR [bp-2]	;npFlame
	*** 001d51	e8 ca e3 		call	DRAWOBJECT
	*** 001d54	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;npNext
	*** 001d57	89 46 fe 		mov	WORD PTR [bp-2],ax	;npFlame
	*** 001d5a	0b c0 			or	ax,ax
	*** 001d5c	75 a6 			jne	$F1758
;|*** 	}
;|*** }
; Line 1104
					$EX1755:
	*** 001d5e	8b e5 			mov	sp,bp
	*** 001d60	5d 			pop	bp
	*** 001d61	c2 02 00 		ret	2

DRAWFLAMES	ENDP
;|*** 
;|*** //
;|*** // FireShot - fire a bullet
;|*** //
;|*** 
;|*** VOID NEAR PASCAL FireShot( VOID )
;|*** {
; Line 1111
	PUBLIC	FIRESHOT
FIRESHOT	PROC NEAR
	*** 001d64	55 			push	bp
	*** 001d65	8b ec 			mov	bp,sp
	*** 001d67	83 ec 02 		sub	sp,2
	*** 001d6a	56 			push	si
;	npShot = -2
;|*** 	NPOBJ           npShot;
;|*** 
;|*** 	if (npShot = RemHeadObj( &FreeList ))
; Line 1114
	*** 001d6b	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001d6e	50 			push	ax
	*** 001d6f	e8 32 e3 		call	REMHEAD
	*** 001d72	89 46 fe 		mov	WORD PTR [bp-2],ax	;npShot
	*** 001d75	0b c0 			or	ax,ax
	*** 001d77	75 03 			jne	$JCC7543
	*** 001d79	e9 d3 00 		jmp	$EX1768
					$JCC7543:
;|*** 	{
;|*** 		npShot->Pos.x = npPlayer->Pos.x;
; Line 1116
	*** 001d7c	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001d80	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001d83	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001d86	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 		npShot->Pos.y = npPlayer->Pos.y;
; Line 1117
	*** 001d89	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 001d8d	8b 44 06 		mov	ax,WORD PTR [si+6]
	*** 001d90	89 47 06 		mov	WORD PTR [bx+6],ax
;|*** 		npShot->Vel.x = npPlayer->Vel.x;
; Line 1118
	*** 001d93	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 001d97	8b 44 08 		mov	ax,WORD PTR [si+8]
	*** 001d9a	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 		npShot->Vel.y = npPlayer->Vel.y;
; Line 1119
	*** 001d9d	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 001da1	8b 44 0a 		mov	ax,WORD PTR [si+10]
	*** 001da4	89 47 0a 		mov	WORD PTR [bx+10],ax
;|*** 		npShot->nMass = 8;
; Line 1120
	*** 001da7	c7 47 0c 08 00 		mov	WORD PTR [bx+12],8
;|*** 		npShot->nDir = npPlayer->nDir + arand( 5 ) - 2;
; Line 1121
	*** 001dac	b8 05 00 		mov	ax,5
	*** 001daf	50 			push	ax
	*** 001db0	e8 4d e2 		call	ARAND
	*** 001db3	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001db7	03 47 0e 		add	ax,WORD PTR [bx+14]
	*** 001dba	48 			dec	ax
	*** 001dbb	48 			dec	ax
	*** 001dbc	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001dbf	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npShot->nSpin = 0;
; Line 1122
	*** 001dc2	c7 47 10 00 00 		mov	WORD PTR [bx+16],0
;|*** 		npShot->nCount = 16 + arand( 8 );
; Line 1123
	*** 001dc7	b8 08 00 		mov	ax,8
	*** 001dca	50 			push	ax
	*** 001dcb	e8 32 e2 		call	ARAND
	*** 001dce	05 10 00 		add	ax,16
	*** 001dd1	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001dd4	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npShot->byColor = CYAN;
; Line 1124
	*** 001dd7	c6 47 16 0d 		mov	BYTE PTR [bx+22],13
;|*** 		npShot->byPts = 2;
; Line 1125
	*** 001ddb	c6 47 17 02 		mov	BYTE PTR [bx+23],2
;|*** 		npShot->Pts[0].x = 128;
; Line 1126
	*** 001ddf	c7 47 18 80 00 		mov	WORD PTR [bx+24],128
;|*** 		npShot->Pts[0].y = 50;
; Line 1127
	*** 001de4	c7 47 1a 32 00 		mov	WORD PTR [bx+26],50
;|*** 		npShot->Pts[1].x = 0;
; Line 1128
	*** 001de9	c7 47 1c 00 00 		mov	WORD PTR [bx+28],0
;|*** 		npShot->Pts[1].y = 50;
; Line 1129
	*** 001dee	c7 47 1e 32 00 		mov	WORD PTR [bx+30],50
;|*** 		ACCEL( npShot, npShot->nDir, 200 + npShot->nCount );
; Line 1130
	*** 001df3	b8 00 40 		mov	ax,16384
	*** 001df6	99 			cwd	
	*** 001df7	52 			push	dx
	*** 001df8	50 			push	ax
	*** 001df9	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 001dfc	2a ff 			sub	bh,bh
	*** 001dfe	d1 e3 			shl	bx,1
	*** 001e00	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 001e04	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001e07	8b 4f 12 		mov	cx,WORD PTR [bx+18]
	*** 001e0a	81 c1 c8 00 		add	cx,200
	*** 001e0e	f7 e9 			imul	cx
	*** 001e10	52 			push	dx
	*** 001e11	50 			push	ax
	*** 001e12	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001e17	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001e1a	01 47 08 		add	WORD PTR [bx+8],ax
	*** 001e1d	b8 00 40 		mov	ax,16384
	*** 001e20	99 			cwd	
	*** 001e21	52 			push	dx
	*** 001e22	50 			push	ax
	*** 001e23	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 001e26	2a ff 			sub	bh,bh
	*** 001e28	d1 e3 			shl	bx,1
	*** 001e2a	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 001e2e	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001e31	8b 4f 12 		mov	cx,WORD PTR [bx+18]
	*** 001e34	81 c1 c8 00 		add	cx,200
	*** 001e38	f7 e9 			imul	cx
	*** 001e3a	52 			push	dx
	*** 001e3b	50 			push	ax
	*** 001e3c	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001e41	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npShot
	*** 001e44	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &ShotList, npShot );
; Line 1131
	*** 001e47	b8 00 00 		mov	ax,OFFSET DGROUP:_ShotList
	*** 001e4a	50 			push	ax
	*** 001e4b	53 			push	bx
	*** 001e4c	e8 13 e2 		call	ADDHEAD
;|*** 	}
;|*** }
; Line 1133
					$EX1768:
	*** 001e4f	5e 			pop	si
	*** 001e50	8b e5 			mov	sp,bp
	*** 001e52	5d 			pop	bp
	*** 001e53	c3 			ret	

FIRESHOT	ENDP
;|*** 
;|*** //
;|*** // AccelPlayer - move the player forward
;|*** //
;|*** 
;|*** VOID NEAR PASCAL AccelPlayer( INT nDir, INT nAccel )
;|*** {
; Line 1140
	PUBLIC	ACCELPLAYER
ACCELPLAYER	PROC NEAR
	*** 001e54	55 			push	bp
	*** 001e55	8b ec 			mov	bp,sp
	*** 001e57	83 ec 04 		sub	sp,4
	*** 001e5a	57 			push	di
	*** 001e5b	56 			push	si
;	nDir = 6
;	nAccel = 4
;	npFlame = -2
;|*** 	NPOBJ           npFlame;
;|*** 
;|*** 	nDir += npPlayer->nDir;
; Line 1143
	*** 001e5c	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001e60	8b 47 0e 		mov	ax,WORD PTR [bx+14]
	*** 001e63	01 46 06 		add	WORD PTR [bp+6],ax	;nDir
;|*** 	if (nAccel) ACCEL( npPlayer, nDir, nAccel );
; Line 1144
	*** 001e66	83 7e 04 00 		cmp	WORD PTR [bp+4],0	;nAccel
	*** 001e6a	74 5b 			je	$I1775
	*** 001e6c	b8 00 40 		mov	ax,16384
	*** 001e6f	99 			cwd	
	*** 001e70	52 			push	dx
	*** 001e71	50 			push	ax
	*** 001e72	8b 46 04 		mov	ax,WORD PTR [bp+4]	;nAccel
	*** 001e75	99 			cwd	
	*** 001e76	52 			push	dx
	*** 001e77	50 			push	ax
	*** 001e78	8a 5e 06 		mov	bl,BYTE PTR [bp+6]	;nDir
	*** 001e7b	2a ff 			sub	bh,bh
	*** 001e7d	d1 e3 			shl	bx,1
	*** 001e7f	8b c8 			mov	cx,ax
	*** 001e81	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 001e85	8b f2 			mov	si,dx
	*** 001e87	99 			cwd	
	*** 001e88	52 			push	dx
	*** 001e89	50 			push	ax
	*** 001e8a	8b f9 			mov	di,cx
	*** 001e8c	89 5e fc 		mov	WORD PTR [bp-4],bx
	*** 001e8f	9a 00 00 00 00 		call	FAR PTR __aFlmul
	*** 001e94	52 			push	dx
	*** 001e95	50 			push	ax
	*** 001e96	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001e9b	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001e9f	01 47 08 		add	WORD PTR [bx+8],ax
	*** 001ea2	b8 00 40 		mov	ax,16384
	*** 001ea5	99 			cwd	
	*** 001ea6	52 			push	dx
	*** 001ea7	50 			push	ax
	*** 001ea8	56 			push	si
	*** 001ea9	57 			push	di
	*** 001eaa	8b 5e fc 		mov	bx,WORD PTR [bp-4]
	*** 001ead	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 001eb1	99 			cwd	
	*** 001eb2	52 			push	dx
	*** 001eb3	50 			push	ax
	*** 001eb4	9a 00 00 00 00 		call	FAR PTR __aFlmul
	*** 001eb9	52 			push	dx
	*** 001eba	50 			push	ax
	*** 001ebb	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001ec0	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001ec4	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 	if (npFlame = RemHeadObj( &FreeList ))
; Line 1145
					$I1775:
	*** 001ec7	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 001eca	50 			push	ax
	*** 001ecb	e8 d6 e1 		call	REMHEAD
	*** 001ece	89 46 fe 		mov	WORD PTR [bp-2],ax	;npFlame
	*** 001ed1	0b c0 			or	ax,ax
	*** 001ed3	75 03 			jne	$JCC7891
	*** 001ed5	e9 c9 00 		jmp	$EX1773
					$JCC7891:
;|*** 	{
;|*** 		npFlame->Pos.x = npPlayer->Pos.x;
; Line 1147
	*** 001ed8	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001edc	8b 47 04 		mov	ax,WORD PTR [bx+4]
	*** 001edf	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001ee2	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 		npFlame->Pos.y = npPlayer->Pos.y;
; Line 1148
	*** 001ee5	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 001ee9	8b 44 06 		mov	ax,WORD PTR [si+6]
	*** 001eec	89 47 06 		mov	WORD PTR [bx+6],ax
;|*** 		npFlame->Vel.x = npPlayer->Vel.x;
; Line 1149
	*** 001eef	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 001ef3	8b 44 08 		mov	ax,WORD PTR [si+8]
	*** 001ef6	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 		npFlame->Vel.y = npPlayer->Vel.y;
; Line 1150
	*** 001ef9	8b 36 00 00 		mov	si,WORD PTR _npPlayer
	*** 001efd	8b 44 0a 		mov	ax,WORD PTR [si+10]
	*** 001f00	89 47 0a 		mov	WORD PTR [bx+10],ax
;|*** 		npFlame->nDir = nDir + 100 + arand( 57 );
; Line 1151
	*** 001f03	b8 39 00 		mov	ax,57
	*** 001f06	50 			push	ax
	*** 001f07	e8 f6 e0 		call	ARAND
	*** 001f0a	03 46 06 		add	ax,WORD PTR [bp+6]	;nDir
	*** 001f0d	05 64 00 		add	ax,100
	*** 001f10	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001f13	89 47 0e 		mov	WORD PTR [bx+14],ax
;|*** 		npFlame->nSpin = 0;
; Line 1152
	*** 001f16	c7 47 10 00 00 		mov	WORD PTR [bx+16],0
;|*** 		npFlame->nCount = nAccel + arand( 7 );
; Line 1153
	*** 001f1b	b8 07 00 		mov	ax,7
	*** 001f1e	50 			push	ax
	*** 001f1f	e8 de e0 		call	ARAND
	*** 001f22	03 46 04 		add	ax,WORD PTR [bp+4]	;nAccel
	*** 001f25	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001f28	89 47 12 		mov	WORD PTR [bx+18],ax
;|*** 		npFlame->byColor = YELLOW;
; Line 1154
	*** 001f2b	c6 47 16 0b 		mov	BYTE PTR [bx+22],11
;|*** 		npFlame->byPts = 1;
; Line 1155
	*** 001f2f	c6 47 17 01 		mov	BYTE PTR [bx+23],1
;|*** 		npFlame->Pts[0].x = npFlame->Pts[0].y = 0;
; Line 1156
	*** 001f33	2b c0 			sub	ax,ax
	*** 001f35	89 47 1a 		mov	WORD PTR [bx+26],ax
	*** 001f38	89 47 18 		mov	WORD PTR [bx+24],ax
;|*** 		ACCEL( npFlame, npFlame->nDir, 50 + arand( 10 ) );
; Line 1157
	*** 001f3b	b8 00 40 		mov	ax,16384
	*** 001f3e	99 			cwd	
	*** 001f3f	52 			push	dx
	*** 001f40	50 			push	ax
	*** 001f41	b9 0a 00 		mov	cx,10
	*** 001f44	51 			push	cx
	*** 001f45	e8 b8 e0 		call	ARAND
	*** 001f48	8b c8 			mov	cx,ax
	*** 001f4a	83 c1 32 		add	cx,50
	*** 001f4d	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001f50	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 001f53	2a ff 			sub	bh,bh
	*** 001f55	d1 e3 			shl	bx,1
	*** 001f57	8b 87 00 00 		mov	ax,WORD PTR _nCos[bx]
	*** 001f5b	f7 e9 			imul	cx
	*** 001f5d	52 			push	dx
	*** 001f5e	50 			push	ax
	*** 001f5f	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001f64	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001f67	01 47 08 		add	WORD PTR [bx+8],ax
	*** 001f6a	b8 00 40 		mov	ax,16384
	*** 001f6d	99 			cwd	
	*** 001f6e	52 			push	dx
	*** 001f6f	50 			push	ax
	*** 001f70	b8 0a 00 		mov	ax,10
	*** 001f73	50 			push	ax
	*** 001f74	e8 89 e0 		call	ARAND
	*** 001f77	8b c8 			mov	cx,ax
	*** 001f79	83 c1 32 		add	cx,50
	*** 001f7c	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001f7f	8a 5f 0e 		mov	bl,BYTE PTR [bx+14]
	*** 001f82	2a ff 			sub	bh,bh
	*** 001f84	d1 e3 			shl	bx,1
	*** 001f86	8b 87 00 00 		mov	ax,WORD PTR _nSin[bx]
	*** 001f8a	f7 e9 			imul	cx
	*** 001f8c	52 			push	dx
	*** 001f8d	50 			push	ax
	*** 001f8e	9a 00 00 00 00 		call	FAR PTR __aFldiv
	*** 001f93	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npFlame
	*** 001f96	01 47 0a 		add	WORD PTR [bx+10],ax
;|*** 		AddHeadObj( &FlameList, npFlame );
; Line 1158
	*** 001f99	b8 00 00 		mov	ax,OFFSET DGROUP:_FlameList
	*** 001f9c	50 			push	ax
	*** 001f9d	53 			push	bx
	*** 001f9e	e8 c1 e0 		call	ADDHEAD
;|*** 	}
;|*** }
; Line 1160
					$EX1773:
	*** 001fa1	5e 			pop	si
	*** 001fa2	5f 			pop	di
	*** 001fa3	8b e5 			mov	sp,bp
	*** 001fa5	5d 			pop	bp
	*** 001fa6	c2 04 00 		ret	4
	*** 001fa9	90 			nop	

ACCELPLAYER	ENDP
;|*** 
;|*** //
;|*** // DrawPlayer - process and draw the player
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawPlayer( HDC hDC )
;|*** {
; Line 1167
	PUBLIC	DRAWPLAYER
DRAWPLAYER	PROC NEAR
	*** 001faa	55 			push	bp
	*** 001fab	8b ec 			mov	bp,sp
;	hDC = 4
;|*** 	LOCAL INT       nBombing = 0;
;|*** 	LOCAL INT       nShotDelay = 0;
;|*** 
;|*** 	if (npPlayer->nCount <= 0) return;
; Line 1171
	*** 001fad	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001fb1	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 001fb5	7f 03 			jg	$JCC8117
	*** 001fb7	e9 58 01 		jmp	$EX1778
					$JCC8117:
;|*** 
;|*** 	if (nSafe > 0)
; Line 1173
	*** 001fba	83 3e 00 00 00 		cmp	WORD PTR _nSafe,0
	*** 001fbf	7e 1d 			jle	$I1782
;|*** 	{
;|*** 		if (--nSafe == 0)
; Line 1175
	*** 001fc1	ff 0e 00 00 		dec	WORD PTR _nSafe
	*** 001fc5	75 4a 			jne	$I1785
;|*** 		{
;|*** 			npPlayer->byColor = (BYTE)(BLACK + npPlayer->nCount);
; Line 1177
	*** 001fc7	8a 47 12 		mov	al,BYTE PTR [bx+18]
	*** 001fca	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 			if (npPlayer->byColor > WHITE) npPlayer->byColor = WHITE;
; Line 1178
	*** 001fcd	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 001fd1	80 7f 16 03 		cmp	BYTE PTR [bx+22],3
	*** 001fd5	76 3a 			jbe	$I1785
	*** 001fd7	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** 		}
;|*** 	}
;|*** 	else if (IsKeyDown( vkShld ) && nShield > 0)
; Line 1181
	*** 001fdb	eb 34 			jmp	SHORT $I1785
	*** 001fdd	90 			nop	
					$I1782:
	*** 001fde	ff 36 00 00 		push	WORD PTR _vkShld
	*** 001fe2	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 001fe7	0b c0 			or	ax,ax
	*** 001fe9	7d 26 			jge	$I1785
	*** 001feb	83 3e 00 00 00 		cmp	WORD PTR _nShield,0
	*** 001ff0	7e 1f 			jle	$I1785
;|*** 	{
;|*** 		nSafe = 15;
; Line 1183
	*** 001ff2	c7 06 00 00 0f 00 	mov	WORD PTR _nSafe,15
;|*** 		if (--nShield > 0) npPlayer->byColor = GREEN;
; Line 1184
	*** 001ff8	ff 0e 00 00 		dec	WORD PTR _nShield
	*** 001ffc	83 3e 00 00 00 		cmp	WORD PTR _nShield,0
	*** 002001	7e 05 			jle	$I1787
	*** 002003	b0 07 			mov	al,7
	*** 002005	eb 03 			jmp	SHORT $L20080
	*** 002007	90 			nop	
					$I1787:
	*** 002008	b0 06 			mov	al,6
					$L20080:
	*** 00200a	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00200e	88 47 16 		mov	BYTE PTR [bx+22],al
;|*** 		else npPlayer->byColor = DKGREEN;
;|*** 	}
;|*** 
;|*** 	if (nBombing > 0)
; Line 1188
					$I1785:
	*** 002011	83 3e c2 00 00 		cmp	WORD PTR $S1779_nBombing,0
	*** 002016	7e 46 			jle	$I1789
;|*** 	{
;|*** 		if (--nBombing == 0)
; Line 1190
	*** 002018	ff 0e c2 00 		dec	WORD PTR $S1779_nBombing
	*** 00201c	75 20 			jne	$I1790
;|*** 		{
;|*** 			ExplodeBadguys( hDC, &SpinnerList );
; Line 1192
	*** 00201e	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002021	b8 00 00 		mov	ax,OFFSET DGROUP:_SpinnerList
	*** 002024	50 			push	ax
	*** 002025	e8 00 00 		call	EXPLODEBADGUYS
;|*** 			ExplodeBadguys( hDC, &SwarmerList );
; Line 1193
	*** 002028	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 00202b	b8 00 00 		mov	ax,OFFSET DGROUP:_SwarmerList
	*** 00202e	50 			push	ax
	*** 00202f	e8 00 00 		call	EXPLODEBADGUYS
;|*** 			ExplodeBadguys( hDC, &HunterList );
; Line 1194
	*** 002032	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002035	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterList
	*** 002038	50 			push	ax
	*** 002039	e8 00 00 		call	EXPLODEBADGUYS
;|*** 		}
;|*** 		else
; Line 1196
	*** 00203c	eb 3e 			jmp	SHORT $I1792
					$I1790:
;|*** 		{
;|*** 			HitList( hDC, &SpinnerList );
; Line 1198
	*** 00203e	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002041	b8 00 00 		mov	ax,OFFSET DGROUP:_SpinnerList
	*** 002044	50 			push	ax
	*** 002045	e8 00 00 		call	HITLIST
;|*** 			HitList( hDC, &SwarmerList );
; Line 1199
	*** 002048	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 00204b	b8 00 00 		mov	ax,OFFSET DGROUP:_SwarmerList
	*** 00204e	50 			push	ax
	*** 00204f	e8 00 00 		call	HITLIST
;|*** 			HitList( hDC, &HunterList );
; Line 1200
	*** 002052	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002055	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterList
	*** 002058	50 			push	ax
	*** 002059	e8 00 00 		call	HITLIST
;|*** 		}
;|*** 	}
;|*** 	else if (nBomb && IsKeyDown( vkBomb )) --nBomb, nBombing = 5;
; Line 1203
	*** 00205c	eb 1e 			jmp	SHORT $I1792
					$I1789:
	*** 00205e	83 3e 00 00 00 		cmp	WORD PTR _nBomb,0
	*** 002063	74 17 			je	$I1792
	*** 002065	ff 36 00 00 		push	WORD PTR _vkBomb
	*** 002069	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 00206e	0b c0 			or	ax,ax
	*** 002070	7d 0a 			jge	$I1792
	*** 002072	ff 0e 00 00 		dec	WORD PTR _nBomb
	*** 002076	c7 06 c2 00 05 00 	mov	WORD PTR $S1779_nBombing,5
;|*** 
;|*** 	if (IsKeyDown( vkClkw )) npPlayer->nSpin += 8;
; Line 1205
					$I1792:
	*** 00207c	ff 36 00 00 		push	WORD PTR _vkClkw
	*** 002080	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 002085	0b c0 			or	ax,ax
	*** 002087	7d 08 			jge	$I1794
	*** 002089	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00208d	83 47 10 08 		add	WORD PTR [bx+16],8
;|*** 	if (IsKeyDown( vkCtrClkw )) npPlayer->nSpin -= 8;
; Line 1206
					$I1794:
	*** 002091	ff 36 00 00 		push	WORD PTR _vkCtrClkw
	*** 002095	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 00209a	0b c0 			or	ax,ax
	*** 00209c	7d 08 			jge	$I1795
	*** 00209e	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0020a2	83 6f 10 08 		sub	WORD PTR [bx+16],8
;|*** 	if (IsKeyDown( vkThrst )) AccelPlayer( 0, 12 );
; Line 1207
					$I1795:
	*** 0020a6	ff 36 00 00 		push	WORD PTR _vkThrst
	*** 0020aa	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 0020af	0b c0 			or	ax,ax
	*** 0020b1	7d 0a 			jge	$I1796
	*** 0020b3	2b c0 			sub	ax,ax
	*** 0020b5	50 			push	ax
	*** 0020b6	b8 0c 00 		mov	ax,12
	*** 0020b9	50 			push	ax
	*** 0020ba	e8 97 fd 		call	ACCELPLAYER
;|*** 	if (IsKeyDown( vkRvThrst )) AccelPlayer( 128, 12 );
; Line 1208
					$I1796:
	*** 0020bd	ff 36 00 00 		push	WORD PTR _vkRvThrst
	*** 0020c1	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 0020c6	0b c0 			or	ax,ax
	*** 0020c8	7d 0b 			jge	$I1797
	*** 0020ca	b8 80 00 		mov	ax,128
	*** 0020cd	50 			push	ax
	*** 0020ce	b8 0c 00 		mov	ax,12
	*** 0020d1	50 			push	ax
	*** 0020d2	e8 7f fd 		call	ACCELPLAYER
;|*** 	if (nShotDelay) --nShotDelay;
; Line 1209
					$I1797:
	*** 0020d5	83 3e c4 00 00 		cmp	WORD PTR $S1780_nShotDelay,0
	*** 0020da	74 06 			je	$I1798
	*** 0020dc	ff 0e c4 00 		dec	WORD PTR $S1780_nShotDelay
;|*** 	else if (IsKeyDown( vkFire )) FireShot(), nShotDelay = 2;
; Line 1210
	*** 0020e0	eb 16 			jmp	SHORT $I1799
					$I1798:
	*** 0020e2	ff 36 00 00 		push	WORD PTR _vkFire
	*** 0020e6	9a 00 00 00 00 		call	FAR PTR GETASYNCKEYSTATE
	*** 0020eb	0b c0 			or	ax,ax
	*** 0020ed	7d 09 			jge	$I1799
	*** 0020ef	e8 72 fc 		call	FIRESHOT
	*** 0020f2	c7 06 c4 00 02 00 	mov	WORD PTR $S1780_nShotDelay,2
;|*** 	DrawObject( hDC, npPlayer );
; Line 1211
					$I1799:
	*** 0020f8	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 0020fb	ff 36 00 00 		push	WORD PTR _npPlayer
	*** 0020ff	e8 1c e0 		call	DRAWOBJECT
;|*** 	npPlayer->nSpin /= 2;
; Line 1212
	*** 002102	b9 02 00 		mov	cx,2
	*** 002105	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002109	8b 47 10 		mov	ax,WORD PTR [bx+16]
	*** 00210c	99 			cwd	
	*** 00210d	f7 f9 			idiv	cx
	*** 00210f	89 47 10 		mov	WORD PTR [bx+16],ax
;|*** }
; Line 1213
					$EX1778:
	*** 002112	8b e5 			mov	sp,bp
	*** 002114	5d 			pop	bp
	*** 002115	c2 02 00 		ret	2

DRAWPLAYER	ENDP
;|*** 
;|*** //
;|*** // GetHyperoidDC - get the correct DC for hyperoid rendering
;|*** //
;|*** 
;|*** HDC NEAR PASCAL GetHyperoidDC( HWND hWnd )
;|*** {
; Line 1220
	PUBLIC	GETHYPEROIDDC
GETHYPEROIDDC	PROC NEAR
	*** 002118	55 			push	bp
	*** 002119	8b ec 			mov	bp,sp
	*** 00211b	83 ec 10 		sub	sp,16
	*** 00211e	57 			push	di
	*** 00211f	56 			push	si
;	hWnd = 4
;	hDC = -14
;	cx = -2
;	cy = -4
;	rect = -12
;|*** 	HDC             hDC;
;|*** 	INT             cx, cy;
;|*** 	RECT            rect;
;|*** 
;|*** 	GetClientRect( hWnd, &rect );
; Line 1225
	*** 002120	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 002123	8d 46 f4 		lea	ax,WORD PTR [bp-12]	;rect
	*** 002126	16 			push	ss
	*** 002127	50 			push	ax
	*** 002128	9a 00 00 00 00 		call	FAR PTR GETCLIENTRECT
;|*** 	cx = rect.right - rect.left;
; Line 1226
	*** 00212d	8b 46 f8 		mov	ax,WORD PTR [bp-8]
	*** 002130	2b 46 f4 		sub	ax,WORD PTR [bp-12]	;rect
	*** 002133	89 46 fe 		mov	WORD PTR [bp-2],ax	;cx
;|*** 	cy = rect.bottom - rect.top;
; Line 1227
	*** 002136	8b 46 fa 		mov	ax,WORD PTR [bp-6]
	*** 002139	2b 46 f6 		sub	ax,WORD PTR [bp-10]
	*** 00213c	89 46 fc 		mov	WORD PTR [bp-4],ax	;cy
;|*** 
;|*** 	hDC = GetDC( hWnd );
;|*** 
;|*** 	// set up the mapping mode
;|*** 	SetMapMode( hDC, MM_ISOTROPIC );
; Line 1232
	*** 00213f	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 002142	9a 00 00 00 00 		call	FAR PTR GETDC
	*** 002147	50 			push	ax
	*** 002148	b9 07 00 		mov	cx,7
	*** 00214b	51 			push	cx
	*** 00214c	8b f0 			mov	si,ax
	*** 00214e	9a 00 00 00 00 		call	FAR PTR SETMAPMODE
;|*** 	SetWindowExt( hDC, MAX_COORD, MAX_COORD );
; Line 1233
	*** 002153	56 			push	si
	*** 002154	b8 00 20 		mov	ax,8192
	*** 002157	50 			push	ax
	*** 002158	50 			push	ax
	*** 002159	9a 00 00 00 00 		call	FAR PTR SETWINDOWEXT
;|*** 	SetViewportExt( hDC, cx / 2, -cy / 2 );
; Line 1234
	*** 00215e	56 			push	si
	*** 00215f	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;cx
	*** 002162	99 			cwd	
	*** 002163	2b c2 			sub	ax,dx
	*** 002165	d1 f8 			sar	ax,1
	*** 002167	50 			push	ax
	*** 002168	8b c8 			mov	cx,ax
	*** 00216a	8b 46 fc 		mov	ax,WORD PTR [bp-4]	;cy
	*** 00216d	99 			cwd	
	*** 00216e	2b c2 			sub	ax,dx
	*** 002170	d1 f8 			sar	ax,1
	*** 002172	8b d0 			mov	dx,ax
	*** 002174	f7 d8 			neg	ax
	*** 002176	50 			push	ax
	*** 002177	8b f9 			mov	di,cx
	*** 002179	89 56 f0 		mov	WORD PTR [bp-16],dx
	*** 00217c	9a 00 00 00 00 		call	FAR PTR SETVIEWPORTEXT
;|*** 	SetViewportOrg( hDC, cx / 2, cy / 2 );
; Line 1235
	*** 002181	56 			push	si
	*** 002182	57 			push	di
	*** 002183	ff 76 f0 		push	WORD PTR [bp-16]
	*** 002186	9a 00 00 00 00 		call	FAR PTR SETVIEWPORTORG
;|*** 
;|*** 	// realize the palette
;|*** 	SelectPalette( hDC, hAppPalette, 0 );
; Line 1238
	*** 00218b	56 			push	si
	*** 00218c	ff 36 00 00 		push	WORD PTR _hAppPalette
	*** 002190	2b c0 			sub	ax,ax
	*** 002192	50 			push	ax
	*** 002193	9a 00 00 00 00 		call	FAR PTR SELECTPALETTE
;|*** 	RealizePalette( hDC );
; Line 1239
	*** 002198	56 			push	si
	*** 002199	9a 00 00 00 00 		call	FAR PTR REALIZEPALETTE
;|*** 
;|*** 	return( hDC );
; Line 1241
	*** 00219e	8b c6 			mov	ax,si
;|*** }
; Line 1242
	*** 0021a0	5e 			pop	si
	*** 0021a1	5f 			pop	di
	*** 0021a2	8b e5 			mov	sp,bp
	*** 0021a4	5d 			pop	bp
	*** 0021a5	c2 02 00 		ret	2

GETHYPEROIDDC	ENDP
;|*** 
;|*** //
;|*** // DrawObjects - transform and redraw everything in the system
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawObjects( HWND hWnd )
;|*** {
; Line 1249
	PUBLIC	DRAWOBJECTS
DRAWOBJECTS	PROC NEAR
	*** 0021a8	55 			push	bp
	*** 0021a9	8b ec 			mov	bp,sp
	*** 0021ab	83 ec 02 		sub	sp,2
	*** 0021ae	56 			push	si
;	hWnd = 4
;	hDC = -2
;|*** 	HDC             hDC = GetHyperoidDC( hWnd );
;|*** 
;|*** 	// move and draw things (I don't think the order is important...)
;|*** 	DrawPlayer( hDC );
; Line 1253
	*** 0021af	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 0021b2	e8 63 ff 		call	GETHYPEROIDDC
	*** 0021b5	50 			push	ax
	*** 0021b6	8b f0 			mov	si,ax
	*** 0021b8	e8 ef fd 		call	DRAWPLAYER
;|*** 	DrawFlames( hDC );
; Line 1254
	*** 0021bb	56 			push	si
	*** 0021bc	e8 35 fb 		call	DRAWFLAMES
;|*** 	DrawShots( hDC );
; Line 1255
	*** 0021bf	56 			push	si
	*** 0021c0	e8 49 fa 		call	DRAWSHOTS
;|*** 	DrawRoids( hDC );
; Line 1256
	*** 0021c3	56 			push	si
	*** 0021c4	e8 0f f9 		call	DRAWROIDS
;|*** 	DrawSpinners( hDC );
; Line 1257
	*** 0021c7	56 			push	si
	*** 0021c8	e8 d9 f3 		call	DRAWSPINNERS
;|*** 	DrawSwarmers( hDC );
; Line 1258
	*** 0021cb	56 			push	si
	*** 0021cc	e8 bb f0 		call	DRAWSWARMERS
;|*** 	DrawHunters( hDC );
; Line 1259
	*** 0021cf	56 			push	si
	*** 0021d0	e8 5b ed 		call	DRAWHUNTERS
;|*** 	DrawHunterShots( hDC );
; Line 1260
	*** 0021d3	56 			push	si
	*** 0021d4	e8 b5 ea 		call	DRAWHUNTERSHOTS
;|*** 	DrawLetters( hDC );
; Line 1261
	*** 0021d7	56 			push	si
	*** 0021d8	e8 97 e6 		call	DRAWLETTERS
;|*** 	DrawBonuses( hDC );
; Line 1262
	*** 0021db	56 			push	si
	*** 0021dc	e8 07 e8 		call	DRAWBONUSES
;|*** 	// (...but I'm not changing it!!! :-)
;|*** 
;|*** 	ReleaseDC( hWnd, hDC );
; Line 1265
	*** 0021df	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 0021e2	56 			push	si
	*** 0021e3	9a 00 00 00 00 		call	FAR PTR RELEASEDC
;|*** }
; Line 1266
	*** 0021e8	5e 			pop	si
	*** 0021e9	8b e5 			mov	sp,bp
	*** 0021eb	5d 			pop	bp
	*** 0021ec	c2 02 00 		ret	2
	*** 0021ef	90 			nop	

DRAWOBJECTS	ENDP
;|*** 
;|*** //
;|*** // SetIndicator - set a quantity indicator
;|*** //
;|*** 
;|*** INT NEAR PASCAL SetIndicator( NPSTR npBuff, CHAR IDBitmap, INT nQuant )
;|*** {
; Line 1273
	PUBLIC	SETINDICATOR
SETINDICATOR	PROC NEAR
	*** 0021f0	55 			push	bp
	*** 0021f1	8b ec 			mov	bp,sp
	*** 0021f3	83 ec 06 		sub	sp,6
;	npBuff = 8
;	IDBitmap = 6
;	nQuant = 4
;	nBlank = -2
;|*** 	if (nQuant > 5)
; Line 1274
	*** 0021f6	83 7e 04 05 		cmp	WORD PTR [bp+4],5	;nQuant
	*** 0021fa	7e 2c 			jle	$I1816
;|*** 	{
;|*** 		*npBuff++ = IDBitmap; *npBuff++ = IDBitmap;
; Line 1276
	*** 0021fc	8a 46 06 		mov	al,BYTE PTR [bp+6]	;IDBitmap
	*** 0021ff	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 002202	ff 46 08 		inc	WORD PTR [bp+8]	;npBuff
	*** 002205	88 07 			mov	BYTE PTR [bx],al
	*** 002207	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 00220a	ff 46 08 		inc	WORD PTR [bp+8]	;npBuff
	*** 00220d	88 07 			mov	BYTE PTR [bx],al
;|*** 		*npBuff++ = IDBitmap; *npBuff++ = IDBitmap;
; Line 1277
	*** 00220f	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 002212	ff 46 08 		inc	WORD PTR [bp+8]	;npBuff
	*** 002215	88 07 			mov	BYTE PTR [bx],al
	*** 002217	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 00221a	ff 46 08 		inc	WORD PTR [bp+8]	;npBuff
	*** 00221d	88 07 			mov	BYTE PTR [bx],al
;|*** 		*npBuff++ = IDB_plus;
; Line 1278
	*** 00221f	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 002222	c6 07 40 		mov	BYTE PTR [bx],64
;|*** 	}
;|*** 	else
; Line 1280
	*** 002225	eb 37 			jmp	SHORT $I1817
	*** 002227	90 			nop	
					$I1816:
;|*** 	{
;|*** 		INT nBlank = 5 - nQuant;
; Line 1282
	*** 002228	b8 05 00 		mov	ax,5
	*** 00222b	2b 46 04 		sub	ax,WORD PTR [bp+4]	;nQuant
	*** 00222e	89 46 fe 		mov	WORD PTR [bp-2],ax	;nBlank
;|*** 		while (nQuant--) *npBuff++ = IDBitmap;
; Line 1283
	*** 002231	eb 0c 			jmp	SHORT $L20148
	*** 002233	90 			nop	
					$FC1820:
	*** 002234	8a 46 06 		mov	al,BYTE PTR [bp+6]	;IDBitmap
	*** 002237	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 00223a	ff 46 08 		inc	WORD PTR [bp+8]	;npBuff
	*** 00223d	88 07 			mov	BYTE PTR [bx],al
					$L20148:
	*** 00223f	8b 46 04 		mov	ax,WORD PTR [bp+4]	;nQuant
	*** 002242	ff 4e 04 		dec	WORD PTR [bp+4]	;nQuant
	*** 002245	0b c0 			or	ax,ax
	*** 002247	75 eb 			jne	$FC1820
;|*** 		while (nBlank--) *npBuff++ = IDB_blank;
; Line 1284
					$FC1823:
	*** 002249	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;nBlank
	*** 00224c	ff 4e fe 		dec	WORD PTR [bp-2]	;nBlank
	*** 00224f	0b c0 			or	ax,ax
	*** 002251	74 0b 			je	$I1817
	*** 002253	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npBuff
	*** 002256	ff 46 08 		inc	WORD PTR [bp+8]	;npBuff
	*** 002259	c6 07 32 		mov	BYTE PTR [bx],50
	*** 00225c	eb eb 			jmp	SHORT $FC1823
;|*** 	}
; Line 1285
					$I1817:
;|*** 	return( 5 );
; Line 1286
	*** 00225e	b8 05 00 		mov	ax,5
;|*** }
; Line 1287
	*** 002261	8b e5 			mov	sp,bp
	*** 002263	5d 			pop	bp
	*** 002264	c2 06 00 		ret	6
	*** 002267	90 			nop	

SETINDICATOR	ENDP
;|*** 
;|*** //
;|*** // CheckScore - show the score and such stuff
;|*** //
;|*** 
;|*** VOID NEAR PASCAL CheckScore( HWND hWnd )
;|*** {
; Line 1294
	PUBLIC	CHECKSCORE
CHECKSCORE	PROC NEAR
	*** 002268	55 			push	bp
	*** 002269	8b ec 			mov	bp,sp
	*** 00226b	83 ec 3a 		sub	sp,58
	*** 00226e	56 			push	si
;	hWnd = 4
;	szBuff = -40
;	npBuff = -44
;	nLives = -42
;	nLen = -54
;	nCnt = -46
;	x = -50
;	y = -52
;	hbmOld = -48
;	hDC = -58
;	hDCMem = -56
;|*** 	CHAR            szBuff[sizeof(szScore)];
;|*** 	NPSTR           npBuff = szBuff;
; Line 1296
	*** 00226f	8d 46 d8 		lea	ax,WORD PTR [bp-40]	;szBuff
	*** 002272	89 46 d4 		mov	WORD PTR [bp-44],ax	;npBuff
;|*** 	INT             nLives, nLen, nCnt, x, y;
;|*** 	HBITMAP         hbmOld;
;|*** 	HDC             hDC, hDCMem;
;|*** 
;|*** 	if (IsIconic( hWnd )) return;
; Line 1301
	*** 002275	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 002278	9a 00 00 00 00 		call	FAR PTR ISICONIC
	*** 00227d	0b c0 			or	ax,ax
	*** 00227f	74 03 			je	$JCC8831
	*** 002281	e9 35 02 		jmp	$EX1826
					$JCC8831:
;|*** 	if (lScore - lLastLife > EXTRA_LIFE)
; Line 1302
	*** 002284	a1 00 00 		mov	ax,WORD PTR _lScore
	*** 002287	8b 16 02 00 		mov	dx,WORD PTR _lScore+2
	*** 00228b	2b 06 00 00 		sub	ax,WORD PTR _lLastLife
	*** 00228f	1b 16 02 00 		sbb	dx,WORD PTR _lLastLife+2
	*** 002293	83 fa 01 		cmp	dx,1
	*** 002296	7c 18 			jl	$I1838
	*** 002298	7f 05 			jg	$L20090
	*** 00229a	3d a0 86 		cmp	ax,-31072
	*** 00229d	76 11 			jbe	$I1838
					$L20090:
;|*** 	{
;|*** 		AddExtraLife();
; Line 1304
	*** 00229f	e8 50 e1 		call	ADDEXTRALIFE
;|*** 		lLastLife = lScore;
; Line 1305
	*** 0022a2	a1 00 00 		mov	ax,WORD PTR _lScore
	*** 0022a5	8b 16 02 00 		mov	dx,WORD PTR _lScore+2
	*** 0022a9	a3 00 00 		mov	WORD PTR _lLastLife,ax
	*** 0022ac	89 16 02 00 		mov	WORD PTR _lLastLife+2,dx
;|*** 	}
;|*** 	nLives = ((npPlayer->nCount > 0) ? npPlayer->nCount : -npPlayer->nCount);
; Line 1307
					$I1838:
	*** 0022b0	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0022b4	8b 47 12 		mov	ax,WORD PTR [bx+18]
	*** 0022b7	99 			cwd	
	*** 0022b8	33 c2 			xor	ax,dx
	*** 0022ba	2b c2 			sub	ax,dx
	*** 0022bc	89 46 d6 		mov	WORD PTR [bp-42],ax	;nLives
;|*** 
;|*** 	*npBuff++ = IDB_level;
; Line 1309
	*** 0022bf	c6 46 d8 34 		mov	BYTE PTR [bp-40],52	;szBuff
;|*** 	wsprintf( npBuff, "%2.2u", nLevel );
; Line 1310
	*** 0022c3	ff 36 00 00 		push	WORD PTR _nLevel
	*** 0022c7	b8 c6 00 		mov	ax,OFFSET DGROUP:$SG1839
	*** 0022ca	1e 			push	ds
	*** 0022cb	50 			push	ax
	*** 0022cc	8d 46 d9 		lea	ax,WORD PTR [bp-39]
	*** 0022cf	89 46 d4 		mov	WORD PTR [bp-44],ax	;npBuff
	*** 0022d2	1e 			push	ds
	*** 0022d3	50 			push	ax
	*** 0022d4	9a 00 00 00 00 		call	FAR PTR _wsprintf
	*** 0022d9	83 c4 0a 		add	sp,10
;|*** 	while (isdigit( *npBuff ))
; Line 1311
	*** 0022dc	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 0022df	8a 07 			mov	al,BYTE PTR [bx]
	*** 0022e1	98 			cbw	
	*** 0022e2	8b d8 			mov	bx,ax
	*** 0022e4	f6 87 01 00 04 		test	BYTE PTR __ctype[bx+1],4
	*** 0022e9	74 18 			je	$FB1842
					$FC1841:
;|*** 		*npBuff = (CHAR)(*npBuff + IDB_num0 - '0'), ++npBuff;
; Line 1312
	*** 0022eb	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 0022ee	80 07 06 		add	BYTE PTR [bx],6
	*** 0022f1	ff 46 d4 		inc	WORD PTR [bp-44]	;npBuff
	*** 0022f4	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 0022f7	8a 07 			mov	al,BYTE PTR [bx]
	*** 0022f9	98 			cbw	
	*** 0022fa	8b d8 			mov	bx,ax
	*** 0022fc	f6 87 01 00 04 		test	BYTE PTR __ctype[bx+1],4
	*** 002301	75 e8 			jne	$FC1841
					$FB1842:
;|*** 	*npBuff++ = IDB_blank; *npBuff++ = IDB_score;
; Line 1313
	*** 002303	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 002306	ff 46 d4 		inc	WORD PTR [bp-44]	;npBuff
	*** 002309	c6 07 32 		mov	BYTE PTR [bx],50
	*** 00230c	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 00230f	ff 46 d4 		inc	WORD PTR [bp-44]	;npBuff
	*** 002312	c6 07 41 		mov	BYTE PTR [bx],65
;|*** 	wsprintf( npBuff, "%7.7lu", lScore );
; Line 1314
	*** 002315	ff 36 02 00 		push	WORD PTR _lScore+2
	*** 002319	ff 36 00 00 		push	WORD PTR _lScore
	*** 00231d	b8 cc 00 		mov	ax,OFFSET DGROUP:$SG1843
	*** 002320	1e 			push	ds
	*** 002321	50 			push	ax
	*** 002322	1e 			push	ds
	*** 002323	ff 76 d4 		push	WORD PTR [bp-44]	;npBuff
	*** 002326	9a 00 00 00 00 		call	FAR PTR _wsprintf
	*** 00232b	83 c4 0c 		add	sp,12
;|*** 	while (isdigit( *npBuff ))
; Line 1315
	*** 00232e	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 002331	8a 07 			mov	al,BYTE PTR [bx]
	*** 002333	98 			cbw	
	*** 002334	8b d8 			mov	bx,ax
	*** 002336	f6 87 01 00 04 		test	BYTE PTR __ctype[bx+1],4
	*** 00233b	74 18 			je	$FB1846
					$FC1845:
;|*** 		*npBuff = (CHAR)(*npBuff + IDB_num0 - '0'), ++npBuff;
; Line 1316
	*** 00233d	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 002340	80 07 06 		add	BYTE PTR [bx],6
	*** 002343	ff 46 d4 		inc	WORD PTR [bp-44]	;npBuff
	*** 002346	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 002349	8a 07 			mov	al,BYTE PTR [bx]
	*** 00234b	98 			cbw	
	*** 00234c	8b d8 			mov	bx,ax
	*** 00234e	f6 87 01 00 04 		test	BYTE PTR __ctype[bx+1],4
	*** 002353	75 e8 			jne	$FC1845
					$FB1846:
;|*** 	*npBuff++ = IDB_blank;
; Line 1317
	*** 002355	8b 5e d4 		mov	bx,WORD PTR [bp-44]	;npBuff
	*** 002358	ff 46 d4 		inc	WORD PTR [bp-44]	;npBuff
	*** 00235b	c6 07 32 		mov	BYTE PTR [bx],50
;|*** 	npBuff += SetIndicator( npBuff, IDB_life, nLives );
; Line 1318
	*** 00235e	ff 76 d4 		push	WORD PTR [bp-44]	;npBuff
	*** 002361	b0 35 			mov	al,53
	*** 002363	50 			push	ax
	*** 002364	ff 76 d6 		push	WORD PTR [bp-42]	;nLives
	*** 002367	e8 86 fe 		call	SETINDICATOR
	*** 00236a	01 46 d4 		add	WORD PTR [bp-44],ax	;npBuff
;|*** 	npBuff += SetIndicator( npBuff, IDB_shield, nShield );
; Line 1319
	*** 00236d	ff 76 d4 		push	WORD PTR [bp-44]	;npBuff
	*** 002370	b0 42 			mov	al,66
	*** 002372	50 			push	ax
	*** 002373	ff 36 00 00 		push	WORD PTR _nShield
	*** 002377	e8 76 fe 		call	SETINDICATOR
	*** 00237a	01 46 d4 		add	WORD PTR [bp-44],ax	;npBuff
;|*** 	npBuff += SetIndicator( npBuff, IDB_bomb, nBomb );
;|*** 	nLen = npBuff - szBuff;
; Line 1321
	*** 00237d	ff 76 d4 		push	WORD PTR [bp-44]	;npBuff
	*** 002380	b0 33 			mov	al,51
	*** 002382	50 			push	ax
	*** 002383	ff 36 00 00 		push	WORD PTR _nBomb
	*** 002387	e8 66 fe 		call	SETINDICATOR
	*** 00238a	01 46 d4 		add	WORD PTR [bp-44],ax	;npBuff
	*** 00238d	8b 46 d4 		mov	ax,WORD PTR [bp-44]	;npBuff
	*** 002390	8d 4e d8 		lea	cx,WORD PTR [bp-40]	;szBuff
	*** 002393	2b c1 			sub	ax,cx
	*** 002395	89 46 ca 		mov	WORD PTR [bp-54],ax	;nLen
;|*** 
;|*** 	hDC = GetWindowDC( hWnd );
; Line 1323
	*** 002398	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 00239b	8b f0 			mov	si,ax
	*** 00239d	9a 00 00 00 00 		call	FAR PTR GETWINDOWDC
	*** 0023a2	89 46 c6 		mov	WORD PTR [bp-58],ax	;hDC
;|*** 	IntersectClipRect( hDC, rectScoreClip.left, rectScoreClip.top,
;|*** 							rectScoreClip.right, rectScoreClip.bottom );
; Line 1325
	*** 0023a5	50 			push	ax
	*** 0023a6	ff 36 36 00 		push	WORD PTR $S1349_rectScoreClip
	*** 0023aa	ff 36 38 00 		push	WORD PTR $S1349_rectScoreClip+2
	*** 0023ae	ff 36 3a 00 		push	WORD PTR $S1349_rectScoreClip+4
	*** 0023b2	ff 36 3c 00 		push	WORD PTR $S1349_rectScoreClip+6
	*** 0023b6	9a 00 00 00 00 		call	FAR PTR INTERSECTCLIPRECT
;|*** 	hDCMem = CreateCompatibleDC( hDC );
; Line 1326
	*** 0023bb	ff 76 c6 		push	WORD PTR [bp-58]	;hDC
	*** 0023be	9a 00 00 00 00 		call	FAR PTR CREATECOMPATIBLEDC
	*** 0023c3	89 46 c8 		mov	WORD PTR [bp-56],ax	;hDCMem
;|*** 	hbmOld = SelectObject( hDCMem, hBitmap[0] );
; Line 1327
	*** 0023c6	50 			push	ax
	*** 0023c7	ff 36 00 00 		push	WORD PTR _hBitmap
	*** 0023cb	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
	*** 0023d0	89 46 d0 		mov	WORD PTR [bp-48],ax	;hbmOld
;|*** 	x = rectScoreClip.left;
; Line 1328
	*** 0023d3	a1 36 00 		mov	ax,WORD PTR $S1349_rectScoreClip
	*** 0023d6	89 46 ce 		mov	WORD PTR [bp-50],ax	;x
;|*** 	y = rectScoreClip.top;
; Line 1329
	*** 0023d9	a1 38 00 		mov	ax,WORD PTR $S1349_rectScoreClip+2
	*** 0023dc	89 46 cc 		mov	WORD PTR [bp-52],ax	;y
;|*** 
;|*** 	for (nCnt = 0; nCnt < nLen; ++nCnt)
; Line 1331
	*** 0023df	c7 46 d2 00 00 		mov	WORD PTR [bp-46],0	;nCnt
	*** 0023e4	0b f6 			or	si,si
	*** 0023e6	7e 55 			jle	$FB1849
					$F1847:
;|*** 	{
;|*** 		if (szBuff[nCnt] != szScore[nCnt])
; Line 1333
	*** 0023e8	8b 76 d2 		mov	si,WORD PTR [bp-46]	;nCnt
	*** 0023eb	8a 42 d8 		mov	al,BYTE PTR [bp-40][si]
	*** 0023ee	38 84 00 00 		cmp	BYTE PTR $S1348_szScore[si],al
	*** 0023f2	74 3a 			je	$I1850
;|*** 		{
;|*** 			SelectObject( hDCMem, hBitmap[szBuff[nCnt] - IDB_blank] );
; Line 1335
	*** 0023f4	ff 76 c8 		push	WORD PTR [bp-56]	;hDCMem
	*** 0023f7	98 			cbw	
	*** 0023f8	8b d8 			mov	bx,ax
	*** 0023fa	d1 e3 			shl	bx,1
	*** 0023fc	ff b7 9c ff 		push	WORD PTR _hBitmap[bx-100]
	*** 002400	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 			BitBlt( hDC, x, y, CX_BITMAP, CY_BITMAP, hDCMem, 0, 0, SRCCOPY );
; Line 1336
	*** 002405	ff 76 c6 		push	WORD PTR [bp-58]	;hDC
	*** 002408	ff 76 ce 		push	WORD PTR [bp-50]	;x
	*** 00240b	ff 76 cc 		push	WORD PTR [bp-52]	;y
	*** 00240e	b8 10 00 		mov	ax,16
	*** 002411	50 			push	ax
	*** 002412	50 			push	ax
	*** 002413	ff 76 c8 		push	WORD PTR [bp-56]	;hDCMem
	*** 002416	2b c0 			sub	ax,ax
	*** 002418	50 			push	ax
	*** 002419	50 			push	ax
	*** 00241a	b8 20 00 		mov	ax,32
	*** 00241d	ba cc 00 		mov	dx,204
	*** 002420	52 			push	dx
	*** 002421	50 			push	ax
	*** 002422	9a 00 00 00 00 		call	FAR PTR BITBLT
;|*** 			szScore[nCnt] = szBuff[nCnt];
; Line 1337
	*** 002427	8a 42 d8 		mov	al,BYTE PTR [bp-40][si]
	*** 00242a	88 84 00 00 		mov	BYTE PTR $S1348_szScore[si],al
;|*** 		}
;|*** 		x += CX_BITMAP;
; Line 1339
					$I1850:
	*** 00242e	83 46 ce 10 		add	WORD PTR [bp-50],16	;x
	*** 002432	8b 46 ca 		mov	ax,WORD PTR [bp-54]	;nLen
	*** 002435	ff 46 d2 		inc	WORD PTR [bp-46]	;nCnt
	*** 002438	39 46 d2 		cmp	WORD PTR [bp-46],ax	;nCnt
	*** 00243b	7c ab 			jl	$F1847
;|*** 	}
; Line 1340
					$FB1849:
;|*** 	if (nCnt < nScoreLen)
; Line 1341
	*** 00243d	8b 46 d2 		mov	ax,WORD PTR [bp-46]	;nCnt
	*** 002440	39 06 30 00 		cmp	WORD PTR $S1347_nScoreLen,ax
	*** 002444	7e 4f 			jle	$I1851
;|*** 	{
;|*** 		SelectObject( hDCMem, hBitmap[0] );
; Line 1343
	*** 002446	ff 76 c8 		push	WORD PTR [bp-56]	;hDCMem
	*** 002449	ff 36 00 00 		push	WORD PTR _hBitmap
	*** 00244d	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 		do {
; Line 1344
					$D1852:
;|*** 			if (szScore[nCnt] != IDB_blank)
; Line 1345
	*** 002452	8b 5e d2 		mov	bx,WORD PTR [bp-46]	;nCnt
	*** 002455	80 bf 00 00 32 		cmp	BYTE PTR $S1348_szScore[bx],50
	*** 00245a	74 2a 			je	$I1855
;|*** 			{
;|*** 				BitBlt( hDC, x, y, CX_BITMAP, CY_BITMAP, hDCMem, 0, 0, SRCCOPY );
; Line 1347
	*** 00245c	ff 76 c6 		push	WORD PTR [bp-58]	;hDC
	*** 00245f	ff 76 ce 		push	WORD PTR [bp-50]	;x
	*** 002462	ff 76 cc 		push	WORD PTR [bp-52]	;y
	*** 002465	b8 10 00 		mov	ax,16
	*** 002468	50 			push	ax
	*** 002469	50 			push	ax
	*** 00246a	ff 76 c8 		push	WORD PTR [bp-56]	;hDCMem
	*** 00246d	2b c0 			sub	ax,ax
	*** 00246f	50 			push	ax
	*** 002470	50 			push	ax
	*** 002471	b8 20 00 		mov	ax,32
	*** 002474	ba cc 00 		mov	dx,204
	*** 002477	52 			push	dx
	*** 002478	50 			push	ax
	*** 002479	9a 00 00 00 00 		call	FAR PTR BITBLT
;|*** 				szScore[nCnt] = IDB_blank;
; Line 1348
	*** 00247e	8b 5e d2 		mov	bx,WORD PTR [bp-46]	;nCnt
	*** 002481	c6 87 00 00 32 		mov	BYTE PTR $S1348_szScore[bx],50
;|*** 			}
;|*** 			x += CX_BITMAP;
; Line 1350
					$I1855:
	*** 002486	83 46 ce 10 		add	WORD PTR [bp-50],16	;x
;|*** 		} while (++nCnt < nScoreLen);
; Line 1351
	*** 00248a	a1 30 00 		mov	ax,WORD PTR $S1347_nScoreLen
	*** 00248d	ff 46 d2 		inc	WORD PTR [bp-46]	;nCnt
	*** 002490	39 46 d2 		cmp	WORD PTR [bp-46],ax	;nCnt
	*** 002493	7c bd 			jl	$D1852
;|*** 	}
;|*** 	nScoreLen = nLen;
; Line 1353
					$I1851:
	*** 002495	8b 46 ca 		mov	ax,WORD PTR [bp-54]	;nLen
	*** 002498	a3 30 00 		mov	WORD PTR $S1347_nScoreLen,ax
;|*** 
;|*** 	SelectObject( hDCMem, hbmOld );
; Line 1355
	*** 00249b	ff 76 c8 		push	WORD PTR [bp-56]	;hDCMem
	*** 00249e	ff 76 d0 		push	WORD PTR [bp-48]	;hbmOld
	*** 0024a1	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 	DeleteDC( hDCMem );
; Line 1356
	*** 0024a6	ff 76 c8 		push	WORD PTR [bp-56]	;hDCMem
	*** 0024a9	9a 00 00 00 00 		call	FAR PTR DELETEDC
;|*** 	ReleaseDC( hWnd, hDC );
; Line 1357
	*** 0024ae	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 0024b1	ff 76 c6 		push	WORD PTR [bp-58]	;hDC
	*** 0024b4	9a 00 00 00 00 		call	FAR PTR RELEASEDC
;|*** }
; Line 1358
					$EX1826:
	*** 0024b9	5e 			pop	si
	*** 0024ba	8b e5 			mov	sp,bp
	*** 0024bc	5d 			pop	bp
	*** 0024bd	c2 02 00 		ret	2

CHECKSCORE	ENDP
;|*** 
;|*** //
;|*** // HitList - Hit() a list of things
;|*** //
;|*** 
;|*** VOID NEAR PASCAL HitList( HDC hDC, NPLIST npList )
;|*** {
; Line 1365
	PUBLIC	HITLIST
HITLIST	PROC NEAR
	*** 0024c0	55 			push	bp
	*** 0024c1	8b ec 			mov	bp,sp
	*** 0024c3	83 ec 02 		sub	sp,2
;	hDC = 6
;	npList = 4
;	npObj = -2
;|*** 	NPOBJ           npObj;
;|*** 
;|*** 	for (npObj = HeadObj( npList ); npObj; npObj = NextObj( npObj ))
; Line 1368
	*** 0024c6	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npList
	*** 0024c9	8b 07 			mov	ax,WORD PTR [bx]
	*** 0024cb	89 46 fe 		mov	WORD PTR [bp-2],ax	;npObj
	*** 0024ce	0b c0 			or	ax,ax
	*** 0024d0	74 1b 			je	$EX1858
					$F1860:
;|*** 		if (npObj->nCount) Hit( hDC, npObj );
; Line 1369
	*** 0024d2	8b d8 			mov	bx,ax
	*** 0024d4	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 0024d8	74 07 			je	$FC1861
	*** 0024da	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 0024dd	53 			push	bx
	*** 0024de	e8 39 df 		call	HIT
;|*** 	for (npObj = HeadObj( npList ); npObj; npObj = NextObj( npObj ))
; Line 1368
					$FC1861:
	*** 0024e1	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npObj
	*** 0024e4	8b 07 			mov	ax,WORD PTR [bx]
	*** 0024e6	89 46 fe 		mov	WORD PTR [bp-2],ax	;npObj
	*** 0024e9	0b c0 			or	ax,ax
	*** 0024eb	75 e5 			jne	$F1860
;|*** 		if (npObj->nCount) Hit( hDC, npObj );
;|*** }
; Line 1370
					$EX1858:
	*** 0024ed	8b e5 			mov	sp,bp
	*** 0024ef	5d 			pop	bp
	*** 0024f0	c2 04 00 		ret	4
	*** 0024f3	90 			nop	

HITLIST	ENDP
;|*** 
;|*** //
;|*** // ExplodeBadguys - explode a list of badguys
;|*** //
;|*** 
;|*** VOID NEAR PASCAL ExplodeBadguys( HDC hDC, NPLIST npList )
;|*** {
; Line 1377
	PUBLIC	EXPLODEBADGUYS
EXPLODEBADGUYS	PROC NEAR
	*** 0024f4	55 			push	bp
	*** 0024f5	8b ec 			mov	bp,sp
	*** 0024f7	83 ec 02 		sub	sp,2
;	hDC = 6
;	npList = 4
;	npObj = -2
;|*** 	NPOBJ           npObj;
;|*** 
;|*** 	while (npObj = HeadObj( npList ))
; Line 1380
	*** 0024fa	eb 34 			jmp	SHORT $L20149
					$FC1869:
;|*** 	{
;|*** 		KillBadGuy();
; Line 1382
	*** 0024fc	ff 0e 00 00 		dec	WORD PTR _nBadGuys
	*** 002500	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 002505	7f 07 			jg	$L20094
	*** 002507	b8 02 00 		mov	ax,2
	*** 00250a	50 			push	ax
	*** 00250b	e8 fa dd 		call	SETRESTART
					$L20094:
;|*** 		npObj->nCount = 0;
; Line 1383
	*** 00250e	8b 5e fe 		mov	bx,WORD PTR [bp-2]	;npObj
	*** 002511	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 		Explode( hDC, npObj );
; Line 1384
	*** 002516	ff 76 06 		push	WORD PTR [bp+6]	;hDC
	*** 002519	53 			push	bx
	*** 00251a	e8 cd df 		call	EXPLODE
;|*** 		RemoveObj( npList, npObj );
; Line 1385
	*** 00251d	ff 76 04 		push	WORD PTR [bp+4]	;npList
	*** 002520	ff 76 fe 		push	WORD PTR [bp-2]	;npObj
	*** 002523	e8 c0 db 		call	REMOVE
;|*** 		AddHeadObj( &FreeList, npObj );
; Line 1386
	*** 002526	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 002529	50 			push	ax
	*** 00252a	ff 76 fe 		push	WORD PTR [bp-2]	;npObj
	*** 00252d	e8 32 db 		call	ADDHEAD
;|*** 	}
; Line 1387
					$L20149:
	*** 002530	8b 5e 04 		mov	bx,WORD PTR [bp+4]	;npList
	*** 002533	8b 07 			mov	ax,WORD PTR [bx]
	*** 002535	89 46 fe 		mov	WORD PTR [bp-2],ax	;npObj
	*** 002538	0b c0 			or	ax,ax
	*** 00253a	75 c0 			jne	$FC1869
;|*** }
; Line 1388
	*** 00253c	8b e5 			mov	sp,bp
	*** 00253e	5d 			pop	bp
	*** 00253f	c2 04 00 		ret	4

EXPLODEBADGUYS	ENDP
;|*** 
;|*** //
;|*** // NewGame - start a new game
;|*** //
;|*** 
;|*** VOID NEAR PASCAL NewGame( HWND hWnd )
;|*** {
; Line 1395
	PUBLIC	NEWGAME
NEWGAME	PROC NEAR
	*** 002542	55 			push	bp
	*** 002543	8b ec 			mov	bp,sp
	*** 002545	83 ec 02 		sub	sp,2
;	hWnd = 4
;	hDC = -2
;|*** 	HDC             hDC = GetHyperoidDC( hWnd );
; Line 1396
	*** 002548	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 00254b	e8 ca fb 		call	GETHYPEROIDDC
	*** 00254e	89 46 fe 		mov	WORD PTR [bp-2],ax	;hDC
;|*** 
;|*** 	npPlayer->nCount = 0;
; Line 1398
	*** 002551	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002555	c7 47 12 00 00 		mov	WORD PTR [bx+18],0
;|*** 	npPlayer->byColor = WHITE;
; Line 1399
	*** 00255a	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00255e	c6 47 16 03 		mov	BYTE PTR [bx+22],3
;|*** 	Explode( hDC, npPlayer );
; Line 1400
	*** 002562	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 002565	ff 36 00 00 		push	WORD PTR _npPlayer
	*** 002569	e8 7e df 		call	EXPLODE
;|*** 	SetRestart( RESTART_GAME );
; Line 1401
	*** 00256c	2b c0 			sub	ax,ax
	*** 00256e	50 			push	ax
	*** 00256f	e8 96 dd 		call	SETRESTART
;|*** 	ExplodeBadguys( hDC, &RoidList );
; Line 1402
	*** 002572	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 002575	b8 00 00 		mov	ax,OFFSET DGROUP:_RoidList
	*** 002578	50 			push	ax
	*** 002579	e8 78 ff 		call	EXPLODEBADGUYS
;|*** 	ExplodeBadguys( hDC, &SpinnerList );
; Line 1403
	*** 00257c	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 00257f	b8 00 00 		mov	ax,OFFSET DGROUP:_SpinnerList
	*** 002582	50 			push	ax
	*** 002583	e8 6e ff 		call	EXPLODEBADGUYS
;|*** 	ExplodeBadguys( hDC, &SwarmerList );
; Line 1404
	*** 002586	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 002589	b8 00 00 		mov	ax,OFFSET DGROUP:_SwarmerList
	*** 00258c	50 			push	ax
	*** 00258d	e8 64 ff 		call	EXPLODEBADGUYS
;|*** 	ExplodeBadguys( hDC, &HunterList );
; Line 1405
	*** 002590	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 002593	b8 00 00 		mov	ax,OFFSET DGROUP:_HunterList
	*** 002596	50 			push	ax
	*** 002597	e8 5a ff 		call	EXPLODEBADGUYS
;|*** 
;|*** 	ReleaseDC( hWnd, hDC );
; Line 1407
	*** 00259a	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 00259d	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 0025a0	9a 00 00 00 00 		call	FAR PTR RELEASEDC
;|*** }
; Line 1408
	*** 0025a5	8b e5 			mov	sp,bp
	*** 0025a7	5d 			pop	bp
	*** 0025a8	c2 02 00 		ret	2
	*** 0025ab	90 			nop	

NEWGAME	ENDP
;|*** 
;|*** //
;|*** // RestartHyperoid - set up a game!
;|*** //
;|*** 
;|*** VOID NEAR PASCAL RestartHyperoid( VOID )
;|*** {
; Line 1415
	PUBLIC	RESTARTHYPEROID
RESTARTHYPEROID	PROC NEAR
	*** 0025ac	55 			push	bp
	*** 0025ad	8b ec 			mov	bp,sp
	*** 0025af	83 ec 14 		sub	sp,20
;	Pos = -4
;	Vel = -8
;	npShot = -10
;	nCnt = -12
;	Pos = -16
;	Vel = -20
;|*** 	if (npPlayer->nCount == 0)
; Line 1416
	*** 0025b2	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0025b6	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 0025ba	75 66 			jne	$I1875
;|*** 	{
;|*** 		POINT Pos, Vel;
;|*** 		Pos.x = 0;
;|*** 		Pos.y = -CLIP_COORD / 2;
; Line 1420
	*** 0025bc	c7 46 fe 6a ef 		mov	WORD PTR [bp-2],-4246
;|*** 		Vel.x = 0;
; Line 1421
	*** 0025c1	2b c0 			sub	ax,ax
	*** 0025c3	89 46 fc 		mov	WORD PTR [bp-4],ax	;Pos
	*** 0025c6	89 46 f8 		mov	WORD PTR [bp-8],ax	;Vel
;|*** 		Vel.y = 150;
; Line 1422
	*** 0025c9	c7 46 fa 96 00 		mov	WORD PTR [bp-6],150
;|*** 		PrintLetters( szAppName, Pos, Vel, YELLOW, 800 );
; Line 1423
	*** 0025ce	b8 00 00 		mov	ax,OFFSET DGROUP:_szAppName
	*** 0025d1	50 			push	ax
	*** 0025d2	ff 76 fe 		push	WORD PTR [bp-2]
	*** 0025d5	ff 76 fc 		push	WORD PTR [bp-4]	;Pos
	*** 0025d8	ff 76 fa 		push	WORD PTR [bp-6]
	*** 0025db	ff 76 f8 		push	WORD PTR [bp-8]	;Vel
	*** 0025de	b0 0b 			mov	al,11
	*** 0025e0	50 			push	ax
	*** 0025e1	b8 20 03 		mov	ax,800
	*** 0025e4	50 			push	ax
	*** 0025e5	9a 00 00 00 00 		call	FAR PTR PRINTLETTERS
;|*** 		npPlayer->nCount = 3;
; Line 1424
	*** 0025ea	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 0025ee	c7 47 12 03 00 		mov	WORD PTR [bx+18],3
;|*** 		if (lHighScore < lScore) lHighScore = lScore;
; Line 1425
	*** 0025f3	a1 00 00 		mov	ax,WORD PTR _lScore
	*** 0025f6	8b 16 02 00 		mov	dx,WORD PTR _lScore+2
	*** 0025fa	39 16 02 00 		cmp	WORD PTR _lHighScore+2,dx
	*** 0025fe	7f 0f 			jg	$I1878
	*** 002600	7c 06 			jl	$L20102
	*** 002602	39 06 00 00 		cmp	WORD PTR _lHighScore,ax
	*** 002606	73 07 			jae	$I1878
					$L20102:
	*** 002608	a3 00 00 		mov	WORD PTR _lHighScore,ax
	*** 00260b	89 16 02 00 		mov	WORD PTR _lHighScore+2,dx
;|*** 		lLastLife = lScore = 0;
; Line 1426
					$I1878:
	*** 00260f	2b c0 			sub	ax,ax
	*** 002611	a3 02 00 		mov	WORD PTR _lScore+2,ax
	*** 002614	a3 00 00 		mov	WORD PTR _lScore,ax
	*** 002617	a3 02 00 		mov	WORD PTR _lLastLife+2,ax
	*** 00261a	a3 00 00 		mov	WORD PTR _lLastLife,ax
;|*** 		nLevel = 0;
; Line 1427
	*** 00261d	a3 00 00 		mov	WORD PTR _nLevel,ax
	*** 002620	eb 09 			jmp	SHORT $L20150
					$I1875:
	*** 002622	83 7f 12 00 		cmp	WORD PTR [bx+18],0
	*** 002626	7d 0c 			jge	$I1879
;|*** 		nShield = nBomb = 3;
;|*** 	}
;|*** 	else if (npPlayer->nCount < 0)
;|*** 	{
;|*** 		// cheesy way of restarting after a major collision
;|*** 		npPlayer->nCount = -npPlayer->nCount;
; Line 1433
	*** 002628	f7 5f 12 		neg	WORD PTR [bx+18]
;|*** 		nShield = nBomb = 3;
; Line 1434
					$L20150:
	*** 00262b	b8 03 00 		mov	ax,3
	*** 00262e	a3 00 00 		mov	WORD PTR _nBomb,ax
	*** 002631	a3 00 00 		mov	WORD PTR _nShield,ax
;|*** 	}
;|*** 
;|*** 	npPlayer->Pos.x = npPlayer->Pos.y = 0;
; Line 1437
					$I1879:
	*** 002634	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002638	c7 47 06 00 00 		mov	WORD PTR [bx+6],0
	*** 00263d	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002641	8b 47 06 		mov	ax,WORD PTR [bx+6]
	*** 002644	89 47 04 		mov	WORD PTR [bx+4],ax
;|*** 	npPlayer->Vel.x = npPlayer->Vel.y = 0;
; Line 1438
	*** 002647	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00264b	c7 47 0a 00 00 		mov	WORD PTR [bx+10],0
	*** 002650	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002654	8b 47 0a 		mov	ax,WORD PTR [bx+10]
	*** 002657	89 47 08 		mov	WORD PTR [bx+8],ax
;|*** 	npPlayer->nDir = 64;
; Line 1439
	*** 00265a	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 00265e	c7 47 0e 40 00 		mov	WORD PTR [bx+14],64
;|*** 	npPlayer->nSpin = 0;
; Line 1440
	*** 002663	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002667	c7 47 10 00 00 		mov	WORD PTR [bx+16],0
;|*** 	npPlayer->byColor = GREEN;
; Line 1441
	*** 00266c	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002670	c6 47 16 07 		mov	BYTE PTR [bx+22],7
;|*** 	nSafe = 30;
; Line 1442
	*** 002674	c7 06 00 00 1e 00 	mov	WORD PTR _nSafe,30
;|*** 
;|*** 	if (ShotList.npHead)
; Line 1444
	*** 00267a	83 3e 00 00 00 		cmp	WORD PTR _ShotList,0
	*** 00267f	74 14 			je	$I1881
;|*** 	{
;|*** 		NPOBJ npShot;
;|*** 		for (npShot = HeadObj( &ShotList ); npShot; npShot = NextObj( npShot ))
; Line 1447
	*** 002681	a1 00 00 		mov	ax,WORD PTR _ShotList
	*** 002684	0b c0 			or	ax,ax
	*** 002686	74 0d 			je	$I1881
					$F1883:
;|*** 			npShot->nCount = 1;
; Line 1448
	*** 002688	8b d8 			mov	bx,ax
	*** 00268a	c7 47 12 01 00 		mov	WORD PTR [bx+18],1
	*** 00268f	8b 07 			mov	ax,WORD PTR [bx]
	*** 002691	0b c0 			or	ax,ax
	*** 002693	75 f3 			jne	$F1883
;|*** 	}
;|*** 
;|*** 	// reseed the asteroid field
;|*** 	if (nBadGuys == 0)
; Line 1452
					$I1881:
	*** 002695	83 3e 00 00 00 		cmp	WORD PTR _nBadGuys,0
	*** 00269a	75 78 			jne	$EX1874
;|*** 	{
;|*** 		INT nCnt;
;|*** 		++nLevel;
;|*** 		for (nCnt = 5 + nLevel; nCnt; --nCnt)
; Line 1456
	*** 00269c	ff 06 00 00 		inc	WORD PTR _nLevel
	*** 0026a0	a1 00 00 		mov	ax,WORD PTR _nLevel
	*** 0026a3	05 05 00 		add	ax,5
	*** 0026a6	89 46 f4 		mov	WORD PTR [bp-12],ax	;nCnt
	*** 0026a9	0b c0 			or	ax,ax
	*** 0026ab	74 67 			je	$EX1874
	*** 0026ad	2b c0 			sub	ax,ax
	*** 0026af	89 46 ee 		mov	WORD PTR [bp-18],ax
	*** 0026b2	89 46 ec 		mov	WORD PTR [bp-20],ax	;Vel
					$F1888:
;|*** 		{
;|*** 			POINT Pos, Vel;
;|*** 			Pos.x = arand( MAX_COORD * 2 ) - MAX_COORD;
; Line 1459
	*** 0026b5	b8 00 40 		mov	ax,16384
	*** 0026b8	50 			push	ax
	*** 0026b9	e8 44 d9 		call	ARAND
	*** 0026bc	2d 00 20 		sub	ax,8192
	*** 0026bf	89 46 f0 		mov	WORD PTR [bp-16],ax	;Pos
;|*** 			Pos.y = arand( MAX_COORD * 2 ) - MAX_COORD;
; Line 1460
	*** 0026c2	b8 00 40 		mov	ax,16384
	*** 0026c5	50 			push	ax
	*** 0026c6	e8 37 d9 		call	ARAND
	*** 0026c9	2d 00 20 		sub	ax,8192
;|*** 			Vel.x = Vel.y = 0;
;|*** 			CreateRoid( Pos, Vel, 6 + arand( 2 ),
;|*** 						(BYTE)(arand( 2 ) ? DKYELLOW : DKGREY),
;|*** 						arand( DEGREE_MAX ), 30 + arand( nLevel * 8 ), 0 );
; Line 1464
	*** 0026cc	50 			push	ax
	*** 0026cd	ff 76 f0 		push	WORD PTR [bp-16]	;Pos
	*** 0026d0	ff 76 ee 		push	WORD PTR [bp-18]
	*** 0026d3	ff 76 ec 		push	WORD PTR [bp-20]	;Vel
	*** 0026d6	b8 02 00 		mov	ax,2
	*** 0026d9	50 			push	ax
	*** 0026da	e8 23 d9 		call	ARAND
	*** 0026dd	05 06 00 		add	ax,6
	*** 0026e0	50 			push	ax
	*** 0026e1	b8 02 00 		mov	ax,2
	*** 0026e4	50 			push	ax
	*** 0026e5	e8 18 d9 		call	ARAND
	*** 0026e8	3d 01 00 		cmp	ax,1
	*** 0026eb	1a c0 			sbb	al,al
	*** 0026ed	24 f7 			and	al,247
	*** 0026ef	04 0a 			add	al,10
	*** 0026f1	50 			push	ax
	*** 0026f2	b8 00 40 		mov	ax,16384
	*** 0026f5	50 			push	ax
	*** 0026f6	e8 07 d9 		call	ARAND
	*** 0026f9	50 			push	ax
	*** 0026fa	b1 03 			mov	cl,3
	*** 0026fc	a1 00 00 		mov	ax,WORD PTR _nLevel
	*** 0026ff	d3 e0 			shl	ax,cl
	*** 002701	50 			push	ax
	*** 002702	e8 fb d8 		call	ARAND
	*** 002705	05 1e 00 		add	ax,30
	*** 002708	50 			push	ax
	*** 002709	2b c0 			sub	ax,ax
	*** 00270b	50 			push	ax
	*** 00270c	e8 9f f0 		call	CREATEROID
	*** 00270f	ff 4e f4 		dec	WORD PTR [bp-12]	;nCnt
	*** 002712	75 a1 			jne	$F1888
;|*** 		}
;|*** 	}
;|*** }
; Line 1467
					$EX1874:
	*** 002714	8b e5 			mov	sp,bp
	*** 002716	5d 			pop	bp
	*** 002717	c3 			ret	

RESTARTHYPEROID	ENDP
;|*** 
;|*** //
;|*** // Panic - boss key (or just pause)
;|*** //
;|*** 
;|*** VOID NEAR PASCAL Panic( BOOL bPanic )
;|*** {
; Line 1474
	PUBLIC	PANIC
PANIC	PROC NEAR
	*** 002718	55 			push	bp
	*** 002719	8b ec 			mov	bp,sp
;	bPanic = 4
;|*** 	if (bPanic && !bPaused)
; Line 1475
	*** 00271b	83 7e 04 00 		cmp	WORD PTR [bp+4],0	;bPanic
	*** 00271f	74 49 			je	$I1895
	*** 002721	83 3e 00 00 00 		cmp	WORD PTR _bPaused,0
	*** 002726	75 42 			jne	$I1895
;|*** 	{
;|*** 		bPaused = TRUE;
;|*** 		KillTimer( hAppWnd, DRAW_TIMER );
; Line 1478
	*** 002728	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00272c	b8 01 00 		mov	ax,1
	*** 00272f	a3 00 00 		mov	WORD PTR _bPaused,ax
	*** 002732	50 			push	ax
	*** 002733	9a 00 00 00 00 		call	FAR PTR KILLTIMER
;|*** 		SetWindowText( hAppWnd, "Program Manager Help - PROGMAN.HLP" );
; Line 1479
	*** 002738	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00273c	b8 d3 00 		mov	ax,OFFSET DGROUP:$SG1896
	*** 00273f	1e 			push	ds
	*** 002740	50 			push	ax
	*** 002741	9a 00 00 00 00 		call	FAR PTR SETWINDOWTEXT
;|*** 		ShowWindow( hAppWnd, SW_SHOWMINNOACTIVE );
; Line 1480
	*** 002746	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00274a	b8 07 00 		mov	ax,7
	*** 00274d	50 			push	ax
	*** 00274e	9a 00 00 00 00 		call	FAR PTR SHOWWINDOW
;|*** 		InvalidateRect( hAppWnd, NULL, TRUE );
; Line 1481
	*** 002753	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 002757	2b c0 			sub	ax,ax
	*** 002759	50 			push	ax
	*** 00275a	50 			push	ax
	*** 00275b	b8 01 00 		mov	ax,1
	*** 00275e	50 			push	ax
	*** 00275f	9a 00 00 00 00 		call	FAR PTR INVALIDATERECT
;|*** 	}
;|*** 	else if (bPaused) // double-panic == normal
; Line 1483
	*** 002764	8b e5 			mov	sp,bp
	*** 002766	5d 			pop	bp
	*** 002767	c2 02 00 		ret	2
					$I1895:
	*** 00276a	83 3e 00 00 00 		cmp	WORD PTR _bPaused,0
	*** 00276f	74 3c 			je	$EX1894
;|*** 	{
;|*** 		bPaused = FALSE;
; Line 1485
	*** 002771	c7 06 00 00 00 00 	mov	WORD PTR _bPaused,0
;|*** 		SetWindowText( hAppWnd, szAppName );
; Line 1486
	*** 002777	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00277b	b8 00 00 		mov	ax,OFFSET DGROUP:_szAppName
	*** 00277e	1e 			push	ds
	*** 00277f	50 			push	ax
	*** 002780	9a 00 00 00 00 		call	FAR PTR SETWINDOWTEXT
;|*** 		if (bPanic) ShowWindow( hAppWnd, SW_RESTORE );
; Line 1487
	*** 002785	83 7e 04 00 		cmp	WORD PTR [bp+4],0	;bPanic
	*** 002789	74 0d 			je	$I1899
	*** 00278b	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00278f	b8 09 00 		mov	ax,9
	*** 002792	50 			push	ax
	*** 002793	9a 00 00 00 00 		call	FAR PTR SHOWWINDOW
;|*** 		SetTimer( hAppWnd, DRAW_TIMER, nDrawDelay, NULL );
; Line 1488
					$I1899:
	*** 002798	ff 36 00 00 		push	WORD PTR _hAppWnd
	*** 00279c	b8 01 00 		mov	ax,1
	*** 00279f	50 			push	ax
	*** 0027a0	ff 36 00 00 		push	WORD PTR _nDrawDelay
	*** 0027a4	2b c0 			sub	ax,ax
	*** 0027a6	50 			push	ax
	*** 0027a7	50 			push	ax
	*** 0027a8	9a 00 00 00 00 		call	FAR PTR SETTIMER
;|*** 	}
;|*** }
; Line 1490
					$EX1894:
	*** 0027ad	8b e5 			mov	sp,bp
	*** 0027af	5d 			pop	bp
	*** 0027b0	c2 02 00 		ret	2
	*** 0027b3	90 			nop	

PANIC	ENDP
;|*** 
;|*** //
;|*** // PaintHyperoid - paint the hyperoid window
;|*** //
;|*** 
;|*** VOID NEAR PASCAL PaintHyperoid( HWND hWnd )
;|*** {
; Line 1497
	PUBLIC	PAINTHYPEROID
PAINTHYPEROID	PROC NEAR
	*** 0027b4	55 			push	bp
	*** 0027b5	8b ec 			mov	bp,sp
	*** 0027b7	83 ec 20 		sub	sp,32
;	hWnd = 4
;	ps = -32
;|*** 	PAINTSTRUCT     ps;
;|*** 
;|*** 	BeginPaint( hWnd, &ps );
; Line 1500
	*** 0027ba	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 0027bd	8d 46 e0 		lea	ax,WORD PTR [bp-32]	;ps
	*** 0027c0	16 			push	ss
	*** 0027c1	50 			push	ax
	*** 0027c2	9a 00 00 00 00 		call	FAR PTR BEGINPAINT
;|*** 	if (bPaused) DrawIcon( ps.hdc, 2, 2, LoadIcon( hAppInst, INTRES(IDI_PANIC) ) );
; Line 1501
	*** 0027c7	83 3e 00 00 00 		cmp	WORD PTR _bPaused,0
	*** 0027cc	74 1d 			je	$I1903
	*** 0027ce	ff 76 e0 		push	WORD PTR [bp-32]	;ps
	*** 0027d1	b8 02 00 		mov	ax,2
	*** 0027d4	50 			push	ax
	*** 0027d5	50 			push	ax
	*** 0027d6	ff 36 00 00 		push	WORD PTR _hAppInst
	*** 0027da	b8 14 00 		mov	ax,20
	*** 0027dd	99 			cwd	
	*** 0027de	52 			push	dx
	*** 0027df	50 			push	ax
	*** 0027e0	9a 00 00 00 00 		call	FAR PTR LOADICON
	*** 0027e5	50 			push	ax
	*** 0027e6	9a 00 00 00 00 		call	FAR PTR DRAWICON
;|*** 	EndPaint( hWnd, &ps );
; Line 1502
					$I1903:
	*** 0027eb	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 0027ee	8d 46 e0 		lea	ax,WORD PTR [bp-32]	;ps
	*** 0027f1	16 			push	ss
	*** 0027f2	50 			push	ax
	*** 0027f3	9a 00 00 00 00 		call	FAR PTR ENDPAINT
;|*** }
; Line 1503
	*** 0027f8	8b e5 			mov	sp,bp
	*** 0027fa	5d 			pop	bp
	*** 0027fb	c2 02 00 		ret	2

PAINTHYPEROID	ENDP
;|*** 
;|*** //
;|*** // EraseHyperoidBkgnd - fill in the background
;|*** //
;|*** 
;|*** BOOL NEAR PASCAL EraseHyperoidBkgnd( HWND hWnd, HDC hDC )
;|*** {
; Line 1510
	PUBLIC	ERASEHYPEROIDBKGND
ERASEHYPEROIDBKGND	PROC NEAR
	*** 0027fe	55 			push	bp
	*** 0027ff	8b ec 			mov	bp,sp
	*** 002801	83 ec 0a 		sub	sp,10
;	hWnd = 6
;	hDC = 4
;	hbr = -2
;	rect = -10
;|*** 	HBRUSH          hbr;
;|*** 	RECT            rect;
;|*** 
;|*** 	GetClientRect( hWnd, &rect );
; Line 1514
	*** 002804	ff 76 06 		push	WORD PTR [bp+6]	;hWnd
	*** 002807	8d 46 f6 		lea	ax,WORD PTR [bp-10]	;rect
	*** 00280a	16 			push	ss
	*** 00280b	50 			push	ax
	*** 00280c	9a 00 00 00 00 		call	FAR PTR GETCLIENTRECT
;|*** 
;|*** 	if (bPaused)
; Line 1516
	*** 002811	83 3e 00 00 00 		cmp	WORD PTR _bPaused,0
	*** 002816	74 18 			je	$I1910
;|*** 	{
;|*** 		SetBrushOrg( hDC, 0, 0 );
; Line 1518
	*** 002818	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 00281b	2b c0 			sub	ax,ax
	*** 00281d	50 			push	ax
	*** 00281e	50 			push	ax
	*** 00281f	9a 00 00 00 00 		call	FAR PTR SETBRUSHORG
;|*** 		hbr = CreateSolidBrush( GetSysColor( COLOR_BACKGROUND ) );
; Line 1519
	*** 002824	b8 01 00 		mov	ax,1
	*** 002827	50 			push	ax
	*** 002828	9a 00 00 00 00 		call	FAR PTR GETSYSCOLOR
	*** 00282d	eb 1d 			jmp	SHORT $L20151
	*** 00282f	90 			nop	
					$I1910:
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		SelectPalette( hDC, hAppPalette, 0 );
; Line 1523
	*** 002830	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002833	ff 36 00 00 		push	WORD PTR _hAppPalette
	*** 002837	2b c0 			sub	ax,ax
	*** 002839	50 			push	ax
	*** 00283a	9a 00 00 00 00 		call	FAR PTR SELECTPALETTE
;|*** 		RealizePalette( hDC );
; Line 1524
	*** 00283f	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002842	9a 00 00 00 00 		call	FAR PTR REALIZEPALETTE
;|*** 		hbr = CreateSolidBrush( PALETTEINDEX( BLACK ) );
; Line 1525
	*** 002847	2b c0 			sub	ax,ax
	*** 002849	ba 00 01 		mov	dx,256
					$L20151:
	*** 00284c	52 			push	dx
	*** 00284d	50 			push	ax
	*** 00284e	9a 00 00 00 00 		call	FAR PTR CREATESOLIDBRUSH
	*** 002853	89 46 fe 		mov	WORD PTR [bp-2],ax	;hbr
;|*** 	}
;|*** 
;|*** 	FillRect( hDC, &rect, hbr );
; Line 1528
	*** 002856	ff 76 04 		push	WORD PTR [bp+4]	;hDC
	*** 002859	8d 46 f6 		lea	ax,WORD PTR [bp-10]	;rect
	*** 00285c	16 			push	ss
	*** 00285d	50 			push	ax
	*** 00285e	ff 76 fe 		push	WORD PTR [bp-2]	;hbr
	*** 002861	9a 00 00 00 00 		call	FAR PTR FILLRECT
;|*** 	DeleteObject( hbr );
; Line 1529
	*** 002866	ff 76 fe 		push	WORD PTR [bp-2]	;hbr
	*** 002869	9a 00 00 00 00 		call	FAR PTR DELETEOBJECT
;|*** 	return( TRUE );
; Line 1530
	*** 00286e	b8 01 00 		mov	ax,1
;|*** }
; Line 1531
	*** 002871	8b e5 			mov	sp,bp
	*** 002873	5d 			pop	bp
	*** 002874	c2 04 00 		ret	4
	*** 002877	90 			nop	

ERASEHYPEROIDBKGND	ENDP
;|*** 
;|*** //
;|*** // DrawShadowRect - draw a shaded rectangle around an object
;|*** //
;|*** 
;|*** VOID NEAR PASCAL DrawShadowRect( HDC hDC, NPRECT npRect, HPEN hHi, HPEN hLo )
;|*** {
; Line 1538
	PUBLIC	DRAWSHADOWRECT
DRAWSHADOWRECT	PROC NEAR
	*** 002878	55 			push	bp
	*** 002879	8b ec 			mov	bp,sp
;	hDC = 10
;	npRect = 8
;	hHi = 6
;	hLo = 4
;|*** 	SelectObject( hDC, hHi );
; Line 1539
	*** 00287b	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 00287e	ff 76 06 		push	WORD PTR [bp+6]	;hHi
	*** 002881	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 	MoveTo( hDC, npRect->right, npRect->top );
; Line 1540
	*** 002886	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 002889	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npRect
	*** 00288c	ff 77 04 		push	WORD PTR [bx+4]
	*** 00288f	ff 77 02 		push	WORD PTR [bx+2]
	*** 002892	9a 00 00 00 00 		call	FAR PTR MOVETO
;|*** 	LineTo( hDC, npRect->left, npRect->top );
; Line 1541
	*** 002897	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 00289a	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npRect
	*** 00289d	ff 37 			push	WORD PTR [bx]
	*** 00289f	ff 77 02 		push	WORD PTR [bx+2]
	*** 0028a2	9a 00 00 00 00 		call	FAR PTR LINETO
;|*** 	LineTo( hDC, npRect->left, npRect->bottom );
; Line 1542
	*** 0028a7	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 0028aa	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npRect
	*** 0028ad	ff 37 			push	WORD PTR [bx]
	*** 0028af	ff 77 06 		push	WORD PTR [bx+6]
	*** 0028b2	9a 00 00 00 00 		call	FAR PTR LINETO
;|*** 	SelectObject( hDC, hLo );
; Line 1543
	*** 0028b7	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 0028ba	ff 76 04 		push	WORD PTR [bp+4]	;hLo
	*** 0028bd	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 	LineTo( hDC, npRect->right, npRect->bottom );
; Line 1544
	*** 0028c2	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 0028c5	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npRect
	*** 0028c8	ff 77 04 		push	WORD PTR [bx+4]
	*** 0028cb	ff 77 06 		push	WORD PTR [bx+6]
	*** 0028ce	9a 00 00 00 00 		call	FAR PTR LINETO
;|*** 	LineTo( hDC, npRect->right, npRect->top );
; Line 1545
	*** 0028d3	ff 76 0a 		push	WORD PTR [bp+10]	;hDC
	*** 0028d6	8b 5e 08 		mov	bx,WORD PTR [bp+8]	;npRect
	*** 0028d9	ff 77 04 		push	WORD PTR [bx+4]
	*** 0028dc	ff 77 02 		push	WORD PTR [bx+2]
	*** 0028df	9a 00 00 00 00 		call	FAR PTR LINETO
;|*** }
; Line 1546
	*** 0028e4	8b e5 			mov	sp,bp
	*** 0028e6	5d 			pop	bp
	*** 0028e7	c2 08 00 		ret	8

DRAWSHADOWRECT	ENDP
;|*** 
;|*** //
;|*** // NCPaintHyperoid - paint a custom frame
;|*** //
;|*** 
;|*** VOID NEAR PASCAL NCPaintHyperoid( HWND hWnd )
;|*** {
; Line 1553
	PUBLIC	NCPAINTHYPEROID
NCPAINTHYPEROID	PROC NEAR
	*** 0028ea	55 			push	bp
	*** 0028eb	8b ec 			mov	bp,sp
	*** 0028ed	83 ec 2c 		sub	sp,44
	*** 0028f0	57 			push	di
	*** 0028f1	56 			push	si
;	hDC = -44
;	hDCMem = -28
;	cx = -12
;	cy = -18
;	cyCap = -2
;	h = -10
;	hpenHi = -16
;	hpenLo = -6
;	hbr = -14
;	hbm = -8
;	hbmOld = -4
;	bm = -42
;	rect = -26
;	hWnd = 4
;|*** 	HDC             hDC, hDCMem;
;|*** 	INT             cx, cy, cyCap, h;
;|*** 	HPEN            hpenHi, hpenLo;
;|*** 	HBRUSH          hbr;
;|*** 	HBITMAP         hbm, hbmOld;
;|*** 	BITMAP          bm;
;|*** 	RECT            rect;
;|*** 
;|*** 	if (IsIconic( hWnd )) return;
; Line 1562
	*** 0028f2	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 0028f5	9a 00 00 00 00 		call	FAR PTR ISICONIC
	*** 0028fa	0b c0 			or	ax,ax
	*** 0028fc	74 03 			je	$JCC10492
	*** 0028fe	e9 44 03 		jmp	$EX1920
					$JCC10492:
;|*** 	hDC = GetWindowDC( hWnd );
; Line 1563
	*** 002901	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 002904	9a 00 00 00 00 		call	FAR PTR GETWINDOWDC
	*** 002909	89 46 d4 		mov	WORD PTR [bp-44],ax	;hDC
;|*** 	GetWindowRect( hWnd, &rect );
; Line 1564
	*** 00290c	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 00290f	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;rect
	*** 002912	16 			push	ss
	*** 002913	50 			push	ax
	*** 002914	9a 00 00 00 00 		call	FAR PTR GETWINDOWRECT
;|*** 	rect.right -= rect.left, rect.left = 0;
; Line 1565
	*** 002919	8b 46 e6 		mov	ax,WORD PTR [bp-26]	;rect
	*** 00291c	29 46 ea 		sub	WORD PTR [bp-22],ax
;|*** 	rect.bottom -= rect.top, rect.top = 0;
; Line 1566
	*** 00291f	8b 46 e8 		mov	ax,WORD PTR [bp-24]
	*** 002922	29 46 ec 		sub	WORD PTR [bp-20],ax
	*** 002925	2b c0 			sub	ax,ax
	*** 002927	89 46 e6 		mov	WORD PTR [bp-26],ax	;rect
	*** 00292a	89 46 e8 		mov	WORD PTR [bp-24],ax
;|*** 	cx = GetSystemMetrics( SM_CXFRAME );
; Line 1567
	*** 00292d	b8 20 00 		mov	ax,32
	*** 002930	50 			push	ax
	*** 002931	9a 00 00 00 00 		call	FAR PTR GETSYSTEMMETRICS
	*** 002936	89 46 f4 		mov	WORD PTR [bp-12],ax	;cx
;|*** 	cy = GetSystemMetrics( SM_CYFRAME );
; Line 1568
	*** 002939	b8 21 00 		mov	ax,33
	*** 00293c	50 			push	ax
	*** 00293d	9a 00 00 00 00 		call	FAR PTR GETSYSTEMMETRICS
	*** 002942	89 46 ee 		mov	WORD PTR [bp-18],ax	;cy
;|*** 	cyCap = cy + GetSystemMetrics( SM_CYCAPTION ) - 1;
; Line 1569
	*** 002945	b8 04 00 		mov	ax,4
	*** 002948	50 			push	ax
	*** 002949	9a 00 00 00 00 		call	FAR PTR GETSYSTEMMETRICS
	*** 00294e	03 46 ee 		add	ax,WORD PTR [bp-18]	;cy
	*** 002951	48 			dec	ax
	*** 002952	89 46 fe 		mov	WORD PTR [bp-2],ax	;cyCap
;|*** 	h = rect.bottom - (cyCap + cy);
; Line 1570
	*** 002955	8b 46 ec 		mov	ax,WORD PTR [bp-20]
	*** 002958	2b 46 fe 		sub	ax,WORD PTR [bp-2]	;cyCap
	*** 00295b	2b 46 ee 		sub	ax,WORD PTR [bp-18]	;cy
	*** 00295e	89 46 f6 		mov	WORD PTR [bp-10],ax	;h
;|*** 
;|*** 	SelectPalette( hDC, hAppPalette, 0 );
; Line 1572
	*** 002961	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002964	ff 36 00 00 		push	WORD PTR _hAppPalette
	*** 002968	2b c0 			sub	ax,ax
	*** 00296a	50 			push	ax
	*** 00296b	9a 00 00 00 00 		call	FAR PTR SELECTPALETTE
;|*** 	RealizePalette( hDC );
; Line 1573
	*** 002970	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002973	9a 00 00 00 00 		call	FAR PTR REALIZEPALETTE
;|*** 	if (bBW)
; Line 1574
	*** 002978	83 3e 00 00 00 		cmp	WORD PTR _bBW,0
	*** 00297d	74 21 			je	$I1935
;|*** 	{
;|*** 		hbr = SelectObject( hDC, CreateSolidBrush( PALETTEINDEX( WHITE ) ) );
; Line 1576
	*** 00297f	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002982	b8 03 00 		mov	ax,3
	*** 002985	ba 00 01 		mov	dx,256
	*** 002988	52 			push	dx
	*** 002989	50 			push	ax
	*** 00298a	9a 00 00 00 00 		call	FAR PTR CREATESOLIDBRUSH
	*** 00298f	50 			push	ax
	*** 002990	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
	*** 002995	89 46 f2 		mov	WORD PTR [bp-14],ax	;hbr
;|*** 		hpenHi = hPen[BLACK];
; Line 1577
	*** 002998	a1 00 00 		mov	ax,WORD PTR _hPen
	*** 00299b	89 46 f0 		mov	WORD PTR [bp-16],ax	;hpenHi
	*** 00299e	eb 22 			jmp	SHORT $L20152
					$I1935:
;|*** 		hpenLo = hPen[BLACK];
;|*** 	}
;|*** 	else
;|*** 	{
;|*** 		hbr = SelectObject( hDC, CreateSolidBrush( PALETTEINDEX( GREY ) ) );
; Line 1582
	*** 0029a0	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 0029a3	b8 02 00 		mov	ax,2
	*** 0029a6	ba 00 01 		mov	dx,256
	*** 0029a9	52 			push	dx
	*** 0029aa	50 			push	ax
	*** 0029ab	9a 00 00 00 00 		call	FAR PTR CREATESOLIDBRUSH
	*** 0029b0	50 			push	ax
	*** 0029b1	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
	*** 0029b6	89 46 f2 		mov	WORD PTR [bp-14],ax	;hbr
;|*** 		hpenHi = hPen[WHITE];
; Line 1583
	*** 0029b9	a1 06 00 		mov	ax,WORD PTR _hPen+6
	*** 0029bc	89 46 f0 		mov	WORD PTR [bp-16],ax	;hpenHi
;|*** 		hpenLo = hPen[DKGREY];
; Line 1584
	*** 0029bf	a1 02 00 		mov	ax,WORD PTR _hPen+2
					$L20152:
	*** 0029c2	89 46 fa 		mov	WORD PTR [bp-6],ax	;hpenLo
;|*** 	}
;|*** 
;|*** 	PatBlt( hDC, 0, 0, rect.right, cyCap, PATCOPY );
; Line 1587
	*** 0029c5	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 0029c8	2b c0 			sub	ax,ax
	*** 0029ca	50 			push	ax
	*** 0029cb	50 			push	ax
	*** 0029cc	ff 76 ea 		push	WORD PTR [bp-22]
	*** 0029cf	ff 76 fe 		push	WORD PTR [bp-2]	;cyCap
	*** 0029d2	b9 21 00 		mov	cx,33
	*** 0029d5	ba f0 00 		mov	dx,240
	*** 0029d8	52 			push	dx
	*** 0029d9	51 			push	cx
	*** 0029da	9a 00 00 00 00 		call	FAR PTR PATBLT
;|*** 	PatBlt( hDC, 0, rect.bottom - cy, rect.right, rect.bottom, PATCOPY );
; Line 1588
	*** 0029df	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 0029e2	2b c0 			sub	ax,ax
	*** 0029e4	50 			push	ax
	*** 0029e5	8b 4e ec 		mov	cx,WORD PTR [bp-20]
	*** 0029e8	2b 4e ee 		sub	cx,WORD PTR [bp-18]	;cy
	*** 0029eb	51 			push	cx
	*** 0029ec	ff 76 ea 		push	WORD PTR [bp-22]
	*** 0029ef	ff 76 ec 		push	WORD PTR [bp-20]
	*** 0029f2	b9 21 00 		mov	cx,33
	*** 0029f5	ba f0 00 		mov	dx,240
	*** 0029f8	52 			push	dx
	*** 0029f9	51 			push	cx
	*** 0029fa	9a 00 00 00 00 		call	FAR PTR PATBLT
;|*** 	PatBlt( hDC, 0, cyCap, cx, h, PATCOPY );
; Line 1589
	*** 0029ff	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002a02	2b c0 			sub	ax,ax
	*** 002a04	50 			push	ax
	*** 002a05	ff 76 fe 		push	WORD PTR [bp-2]	;cyCap
	*** 002a08	ff 76 f4 		push	WORD PTR [bp-12]	;cx
	*** 002a0b	ff 76 f6 		push	WORD PTR [bp-10]	;h
	*** 002a0e	b9 21 00 		mov	cx,33
	*** 002a11	ba f0 00 		mov	dx,240
	*** 002a14	52 			push	dx
	*** 002a15	51 			push	cx
	*** 002a16	9a 00 00 00 00 		call	FAR PTR PATBLT
;|*** 	PatBlt( hDC, rect.right - cx, cyCap, cx, h, PATCOPY );
; Line 1590
	*** 002a1b	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002a1e	8b 46 ea 		mov	ax,WORD PTR [bp-22]
	*** 002a21	2b 46 f4 		sub	ax,WORD PTR [bp-12]	;cx
	*** 002a24	50 			push	ax
	*** 002a25	ff 76 fe 		push	WORD PTR [bp-2]	;cyCap
	*** 002a28	ff 76 f4 		push	WORD PTR [bp-12]	;cx
	*** 002a2b	ff 76 f6 		push	WORD PTR [bp-10]	;h
	*** 002a2e	b8 21 00 		mov	ax,33
	*** 002a31	ba f0 00 		mov	dx,240
	*** 002a34	52 			push	dx
	*** 002a35	50 			push	ax
	*** 002a36	9a 00 00 00 00 		call	FAR PTR PATBLT
;|*** 
;|*** 	--rect.bottom; --rect.right;
; Line 1592
	*** 002a3b	ff 4e ec 		dec	WORD PTR [bp-20]
	*** 002a3e	ff 4e ea 		dec	WORD PTR [bp-22]
;|*** 	DrawShadowRect( hDC, &rect, hpenHi, hpenLo );
; Line 1593
	*** 002a41	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002a44	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;rect
	*** 002a47	50 			push	ax
	*** 002a48	ff 76 f0 		push	WORD PTR [bp-16]	;hpenHi
	*** 002a4b	ff 76 fa 		push	WORD PTR [bp-6]	;hpenLo
	*** 002a4e	e8 27 fe 		call	DRAWSHADOWRECT
;|*** 	--cx; --cy;
;|*** 	rect.left += cx; rect.top += cy;
; Line 1595
	*** 002a51	8b 46 f4 		mov	ax,WORD PTR [bp-12]	;cx
	*** 002a54	48 			dec	ax
	*** 002a55	01 46 e6 		add	WORD PTR [bp-26],ax	;rect
	*** 002a58	ff 4e ee 		dec	WORD PTR [bp-18]	;cy
	*** 002a5b	8b 4e ee 		mov	cx,WORD PTR [bp-18]	;cy
	*** 002a5e	01 4e e8 		add	WORD PTR [bp-24],cx
;|*** 	rect.right -= cx; rect.bottom -= cy;
; Line 1596
	*** 002a61	29 46 ea 		sub	WORD PTR [bp-22],ax
	*** 002a64	29 4e ec 		sub	WORD PTR [bp-20],cx
;|*** 	if (!bBW) DrawShadowRect( hDC, &rect, hpenLo, hpenHi );
; Line 1597
	*** 002a67	83 3e 00 00 00 		cmp	WORD PTR _bBW,0
	*** 002a6c	75 10 			jne	$I1937
	*** 002a6e	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002a71	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;rect
	*** 002a74	50 			push	ax
	*** 002a75	ff 76 fa 		push	WORD PTR [bp-6]	;hpenLo
	*** 002a78	ff 76 f0 		push	WORD PTR [bp-16]	;hpenHi
	*** 002a7b	e8 fa fd 		call	DRAWSHADOWRECT
;|*** 
;|*** 	// get the title bar rect
;|*** 	++rect.left; ++rect.top; --rect.right;
; Line 1600
					$I1937:
	*** 002a7e	ff 46 e6 		inc	WORD PTR [bp-26]	;rect
	*** 002a81	ff 4e ea 		dec	WORD PTR [bp-22]
;|*** 	rect.bottom = rect.top + cyCap - (cy + 2);
; Line 1601
	*** 002a84	ff 46 e8 		inc	WORD PTR [bp-24]
	*** 002a87	8b 46 e8 		mov	ax,WORD PTR [bp-24]
	*** 002a8a	2b 46 ee 		sub	ax,WORD PTR [bp-18]	;cy
	*** 002a8d	03 46 fe 		add	ax,WORD PTR [bp-2]	;cyCap
	*** 002a90	48 			dec	ax
	*** 002a91	48 			dec	ax
	*** 002a92	89 46 ec 		mov	WORD PTR [bp-20],ax
;|*** 	DrawShadowRect( hDC, &rect, hpenHi, hpenLo );
; Line 1602
	*** 002a95	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002a98	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;rect
	*** 002a9b	50 			push	ax
	*** 002a9c	ff 76 f0 		push	WORD PTR [bp-16]	;hpenHi
	*** 002a9f	ff 76 fa 		push	WORD PTR [bp-6]	;hpenLo
	*** 002aa2	e8 d3 fd 		call	DRAWSHADOWRECT
;|*** 	++rect.right; // for zoom/restore bitmap
; Line 1603
	*** 002aa5	ff 46 ea 		inc	WORD PTR [bp-22]
;|*** 
;|*** 	hDCMem = CreateCompatibleDC( hDC );
; Line 1605
	*** 002aa8	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002aab	9a 00 00 00 00 		call	FAR PTR CREATECOMPATIBLEDC
	*** 002ab0	89 46 e4 		mov	WORD PTR [bp-28],ax	;hDCMem
;|*** 
;|*** 	hbm = LoadBitmap( NULL, INTRES(OBM_CLOSE) );
;|*** 	GetObject( hbm, sizeof(bm), (LPSTR)&bm );
; Line 1608
	*** 002ab3	2b c0 			sub	ax,ax
	*** 002ab5	50 			push	ax
	*** 002ab6	b9 f2 7f 		mov	cx,32754
	*** 002ab9	2b d2 			sub	dx,dx
	*** 002abb	52 			push	dx
	*** 002abc	51 			push	cx
	*** 002abd	9a 00 00 00 00 		call	FAR PTR LOADBITMAP
	*** 002ac2	50 			push	ax
	*** 002ac3	b9 0e 00 		mov	cx,14
	*** 002ac6	51 			push	cx
	*** 002ac7	8d 56 d6 		lea	dx,WORD PTR [bp-42]	;bm
	*** 002aca	16 			push	ss
	*** 002acb	52 			push	dx
	*** 002acc	8b f0 			mov	si,ax
	*** 002ace	9a 00 00 00 00 		call	FAR PTR GETOBJECT
;|*** 	bm.bmWidth /= 2; // they packed two images in here!
; Line 1609
	*** 002ad3	b9 02 00 		mov	cx,2
	*** 002ad6	8b 46 d8 		mov	ax,WORD PTR [bp-40]
	*** 002ad9	99 			cwd	
	*** 002ada	f7 f9 			idiv	cx
	*** 002adc	89 46 d8 		mov	WORD PTR [bp-40],ax
;|*** 	hbmOld = SelectObject( hDCMem, hbm );
; Line 1610
	*** 002adf	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002ae2	56 			push	si
	*** 002ae3	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
	*** 002ae8	89 46 fc 		mov	WORD PTR [bp-4],ax	;hbmOld
;|*** 	BitBlt( hDC, rect.left, rect.top, bm.bmWidth, bm.bmHeight, hDCMem, 0, 0, SRCCOPY );
; Line 1611
	*** 002aeb	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002aee	ff 76 e6 		push	WORD PTR [bp-26]	;rect
	*** 002af1	ff 76 e8 		push	WORD PTR [bp-24]
	*** 002af4	ff 76 d8 		push	WORD PTR [bp-40]
	*** 002af7	ff 76 da 		push	WORD PTR [bp-38]
	*** 002afa	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002afd	2b c0 			sub	ax,ax
	*** 002aff	50 			push	ax
	*** 002b00	50 			push	ax
	*** 002b01	b9 20 00 		mov	cx,32
	*** 002b04	ba cc 00 		mov	dx,204
	*** 002b07	52 			push	dx
	*** 002b08	51 			push	cx
	*** 002b09	9a 00 00 00 00 		call	FAR PTR BITBLT
;|*** 	rect.left += bm.bmWidth;
; Line 1612
	*** 002b0e	8b 46 d8 		mov	ax,WORD PTR [bp-40]
	*** 002b11	01 46 e6 		add	WORD PTR [bp-26],ax	;rect
;|*** 
;|*** 	if (IsZoomed( hWnd )) hbm = LoadBitmap( NULL, INTRES(OBM_RESTORE) );
;|*** 	else hbm = LoadBitmap( NULL, INTRES(OBM_ZOOM) );
;|*** 	GetObject( hbm, sizeof(bm), (LPSTR)&bm );
; Line 1616
	*** 002b14	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 002b17	9a 00 00 00 00 		call	FAR PTR ISZOOMED
	*** 002b1c	0b c0 			or	ax,ax
	*** 002b1e	74 08 			je	$I1938
	*** 002b20	2b c0 			sub	ax,ax
	*** 002b22	50 			push	ax
	*** 002b23	b8 eb 7f 		mov	ax,32747
	*** 002b26	eb 06 			jmp	SHORT $L20153
					$I1938:
	*** 002b28	2b c0 			sub	ax,ax
	*** 002b2a	50 			push	ax
	*** 002b2b	b8 ec 7f 		mov	ax,32748
					$L20153:
	*** 002b2e	2b d2 			sub	dx,dx
	*** 002b30	52 			push	dx
	*** 002b31	50 			push	ax
	*** 002b32	9a 00 00 00 00 		call	FAR PTR LOADBITMAP
	*** 002b37	89 46 f8 		mov	WORD PTR [bp-8],ax	;hbm
	*** 002b3a	50 			push	ax
	*** 002b3b	b9 0e 00 		mov	cx,14
	*** 002b3e	51 			push	cx
	*** 002b3f	8d 56 d6 		lea	dx,WORD PTR [bp-42]	;bm
	*** 002b42	16 			push	ss
	*** 002b43	52 			push	dx
	*** 002b44	9a 00 00 00 00 		call	FAR PTR GETOBJECT
;|*** 	SelectObject( hDCMem, hbm );
; Line 1617
	*** 002b49	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002b4c	ff 76 f8 		push	WORD PTR [bp-8]	;hbm
	*** 002b4f	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 	rect.right -= bm.bmWidth;
;|*** 	BitBlt( hDC, rect.right, rect.top, bm.bmWidth, bm.bmHeight, hDCMem, 0, 0, SRCCOPY );
; Line 1619
	*** 002b54	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002b57	8b 46 d8 		mov	ax,WORD PTR [bp-40]
	*** 002b5a	29 46 ea 		sub	WORD PTR [bp-22],ax
	*** 002b5d	ff 76 ea 		push	WORD PTR [bp-22]
	*** 002b60	ff 76 e8 		push	WORD PTR [bp-24]
	*** 002b63	50 			push	ax
	*** 002b64	ff 76 da 		push	WORD PTR [bp-38]
	*** 002b67	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002b6a	2b c0 			sub	ax,ax
	*** 002b6c	50 			push	ax
	*** 002b6d	50 			push	ax
	*** 002b6e	b9 20 00 		mov	cx,32
	*** 002b71	ba cc 00 		mov	dx,204
	*** 002b74	52 			push	dx
	*** 002b75	51 			push	cx
	*** 002b76	9a 00 00 00 00 		call	FAR PTR BITBLT
;|*** 
;|*** 	hbm = LoadBitmap( NULL, INTRES(OBM_REDUCE) );
;|*** 	GetObject( hbm, sizeof(bm), (LPSTR)&bm );
; Line 1622
	*** 002b7b	2b c0 			sub	ax,ax
	*** 002b7d	50 			push	ax
	*** 002b7e	b8 ed 7f 		mov	ax,32749
	*** 002b81	99 			cwd	
	*** 002b82	52 			push	dx
	*** 002b83	50 			push	ax
	*** 002b84	9a 00 00 00 00 		call	FAR PTR LOADBITMAP
	*** 002b89	50 			push	ax
	*** 002b8a	b9 0e 00 		mov	cx,14
	*** 002b8d	51 			push	cx
	*** 002b8e	8d 4e d6 		lea	cx,WORD PTR [bp-42]	;bm
	*** 002b91	16 			push	ss
	*** 002b92	51 			push	cx
	*** 002b93	8b f0 			mov	si,ax
	*** 002b95	9a 00 00 00 00 		call	FAR PTR GETOBJECT
;|*** 	SelectObject( hDCMem, hbm );
; Line 1623
	*** 002b9a	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002b9d	56 			push	si
	*** 002b9e	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
;|*** 	rect.right -= bm.bmWidth;
;|*** 	BitBlt( hDC, rect.right, rect.top, bm.bmWidth, bm.bmHeight, hDCMem, 0, 0, SRCCOPY );
; Line 1625
	*** 002ba3	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002ba6	8b 46 d8 		mov	ax,WORD PTR [bp-40]
	*** 002ba9	29 46 ea 		sub	WORD PTR [bp-22],ax
	*** 002bac	ff 76 ea 		push	WORD PTR [bp-22]
	*** 002baf	ff 76 e8 		push	WORD PTR [bp-24]
	*** 002bb2	50 			push	ax
	*** 002bb3	ff 76 da 		push	WORD PTR [bp-38]
	*** 002bb6	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002bb9	2b c0 			sub	ax,ax
	*** 002bbb	50 			push	ax
	*** 002bbc	50 			push	ax
	*** 002bbd	b9 20 00 		mov	cx,32
	*** 002bc0	ba cc 00 		mov	dx,204
	*** 002bc3	52 			push	dx
	*** 002bc4	51 			push	cx
	*** 002bc5	9a 00 00 00 00 		call	FAR PTR BITBLT
;|*** 
;|*** 	--rect.right;
; Line 1627
	*** 002bca	ff 4e ea 		dec	WORD PTR [bp-22]
;|*** 	DrawShadowRect( hDC, &rect, hpenHi, hpenLo );
; Line 1628
	*** 002bcd	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002bd0	8d 46 e6 		lea	ax,WORD PTR [bp-26]	;rect
	*** 002bd3	50 			push	ax
	*** 002bd4	ff 76 f0 		push	WORD PTR [bp-16]	;hpenHi
	*** 002bd7	ff 76 fa 		push	WORD PTR [bp-6]	;hpenLo
	*** 002bda	e8 9b fc 		call	DRAWSHADOWRECT
;|*** 
;|*** 	// clip the score to the free titlebar area
;|*** 	++rect.left; ++rect.top;
; Line 1631
	*** 002bdd	ff 46 e6 		inc	WORD PTR [bp-26]	;rect
	*** 002be0	ff 46 e8 		inc	WORD PTR [bp-24]
;|*** 	rectScoreClip = rect;
; Line 1632
	*** 002be3	b8 36 00 		mov	ax,OFFSET DGROUP:$S1349_rectScoreClip
	*** 002be6	8b f8 			mov	di,ax
	*** 002be8	8d 76 e6 		lea	si,WORD PTR [bp-26]	;rect
	*** 002beb	1e 			push	ds
	*** 002bec	07 			pop	es
	*** 002bed	a5 			movsw
	*** 002bee	a5 			movsw
	*** 002bef	a5 			movsw
	*** 002bf0	a5 			movsw
;|*** 
;|*** 	DeleteObject( SelectObject( hDCMem, hbmOld ) );
; Line 1634
	*** 002bf1	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002bf4	ff 76 fc 		push	WORD PTR [bp-4]	;hbmOld
	*** 002bf7	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
	*** 002bfc	50 			push	ax
	*** 002bfd	9a 00 00 00 00 		call	FAR PTR DELETEOBJECT
;|*** 	DeleteObject( SelectObject( hDC, hbr ) );
; Line 1635
	*** 002c02	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002c05	ff 76 f2 		push	WORD PTR [bp-14]	;hbr
	*** 002c08	9a 00 00 00 00 		call	FAR PTR SELECTOBJECT
	*** 002c0d	50 			push	ax
	*** 002c0e	9a 00 00 00 00 		call	FAR PTR DELETEOBJECT
;|*** 	DeleteDC( hDCMem );
; Line 1636
	*** 002c13	ff 76 e4 		push	WORD PTR [bp-28]	;hDCMem
	*** 002c16	9a 00 00 00 00 		call	FAR PTR DELETEDC
;|*** 	ReleaseDC( hWnd, hDC );
; Line 1637
	*** 002c1b	ff 76 04 		push	WORD PTR [bp+4]	;hWnd
	*** 002c1e	ff 76 d4 		push	WORD PTR [bp-44]	;hDC
	*** 002c21	9a 00 00 00 00 		call	FAR PTR RELEASEDC
;|*** 
;|*** 	// make sure the score gets redrawn
;|*** 	for (cx = 0; cx < nScoreLen; ++cx) szScore[cx] = '\0';
; Line 1640
	*** 002c26	c7 46 f4 00 00 		mov	WORD PTR [bp-12],0	;cx
	*** 002c2b	83 3e 30 00 00 		cmp	WORD PTR $S1347_nScoreLen,0
	*** 002c30	7e 13 			jle	$EX1920
					$F1940:
	*** 002c32	8b 5e f4 		mov	bx,WORD PTR [bp-12]	;cx
	*** 002c35	c6 87 00 00 00 		mov	BYTE PTR $S1348_szScore[bx],0
	*** 002c3a	a1 30 00 		mov	ax,WORD PTR $S1347_nScoreLen
	*** 002c3d	ff 46 f4 		inc	WORD PTR [bp-12]	;cx
	*** 002c40	39 46 f4 		cmp	WORD PTR [bp-12],ax	;cx
	*** 002c43	7c ed 			jl	$F1940
;|*** }
; Line 1641
					$EX1920:
	*** 002c45	5e 			pop	si
	*** 002c46	5f 			pop	di
	*** 002c47	8b e5 			mov	sp,bp
	*** 002c49	5d 			pop	bp
	*** 002c4a	c2 02 00 		ret	2
	*** 002c4d	90 			nop	

NCPAINTHYPEROID	ENDP
;|*** 
;|*** //
;|*** // HyperoidWndProc - the main window proc for Hyperoid
;|*** //
;|*** 
;|*** LONG FAR PASCAL EXPORT HyperoidWndProc( HWND hWnd, unsigned message,
;|*** 										WORD wParam, LONG lParam )
;|*** {
; Line 1649
	PUBLIC	HYPEROIDWNDPROC
HYPEROIDWNDPROC	PROC FAR
	*** 002c4e	55 			push	bp
	*** 002c4f	8b ec 			mov	bp,sp
	*** 002c51	83 ec 02 		sub	sp,2
;	hDC = -2
;	hWnd = 14
;	message = 12
;	wParam = 10
;	lParam = 6
;|*** 	switch (message)
; Line 1650
	*** 002c54	8b 46 0c 		mov	ax,WORD PTR [bp+12]	;message
;|*** 	{
;|*** 	case WM_CREATE:
;|*** 		RestartHyperoid();
;|*** 		SetTimer( hWnd, DRAW_TIMER, nDrawDelay, NULL );
;|*** 		NCPaintHyperoid( hWnd );
;|*** 		break;
;|*** 
;|*** 	case WM_TIMER:
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case DRAW_TIMER:
;|*** 			CheckScore( hWnd );
;|*** 			DrawObjects( hWnd );
;|*** 			return( 0 );
;|*** 
;|*** 		case RESTART_TIMER:
;|*** 			KillTimer( hWnd, RESTART_TIMER );
;|*** 			bRestart = FALSE;
;|*** 			RestartHyperoid();
;|*** 			return( 0 );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_SYSCOMMAND:
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case IDM_NEW:
;|*** 			NewGame( hWnd );
;|*** 			break;
;|*** 
;|*** 		case IDM_ABOUT:
;|*** 			AboutHyperoid( hWnd );
;|*** 			break;
;|*** 
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_QUERYOPEN:
;|*** 		Panic( FALSE );
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 
;|*** 	case WM_CHAR:
;|*** 		if (wParam == VK_ESCAPE) Panic( TRUE );
;|*** 		break;
;|*** 
;|*** 	case WM_SYSKEYDOWN:
;|*** 	case WM_SYSKEYUP:
;|*** 	case WM_SYSCHAR:
;|*** 		if (lParam & (1L<<29)) // alt key is down
;|*** 		{
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case VK_ESCAPE:
;|*** 			if (message == WM_SYSKEYDOWN) Panic( TRUE );
;|*** 			return( 0 );
;|*** 		case VK_SPACE:
;|*** 		case VK_TAB:
;|*** 			return( 0 );
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_ERASEBKGND:
;|*** 		return( EraseHyperoidBkgnd( hWnd, (HDC)wParam ) );
;|*** 
;|*** 	case WM_NCACTIVATE:
;|*** 	case WM_NCPAINT:
;|*** 		NCPaintHyperoid( hWnd );
;|*** 		return( TRUE );
;|*** 
;|*** 	case WM_PAINT:
;|*** 		PaintHyperoid( hWnd );
;|*** 		break;
;|*** 
;|*** 	case WM_QUERYNEWPALETTE:
;|*** 		{
;|*** 			HDC hDC = GetDC( hWnd );
;|*** 			SelectPalette( hDC, hAppPalette, 0 );
;|*** 			RealizePalette( hDC );
;|*** 			ReleaseDC( hWnd, hDC );
;|*** 		}
;|*** 		return( TRUE );
;|*** 
;|***     case WM_DESTROY:
;|*** 		KillTimer( hWnd, DRAW_TIMER );
;|*** 		KillTimer( hWnd, RESTART_TIMER );
;|*** 		SaveHyperoidWindowPos( hWnd );
;|*** 		PostQuitMessage( 0 );
;|***         break;
;|*** 
;|*** 	default:
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|***     }
; Line 1748
	*** 002c57	3d 86 00 		cmp	ax,134
	*** 002c5a	77 2e 			ja	$L20105
	*** 002c5c	3d 85 00 		cmp	ax,133
	*** 002c5f	72 03 			jb	$JCC11359
	*** 002c61	e9 de 00 		jmp	$SC1982
					$JCC11359:
	*** 002c64	3d 14 00 		cmp	ax,20
	*** 002c67	75 03 			jne	$JCC11367
	*** 002c69	e9 ca 00 		jmp	$SC1981
					$JCC11367:
	*** 002c6c	76 03 			jbe	$JCC11372
	*** 002c6e	e9 ab 00 		jmp	$L20154
					$JCC11372:
	*** 002c71	fe c8 			dec	al
	*** 002c73	74 49 			je	$SC1952
	*** 002c75	fe c8 			dec	al
	*** 002c77	74 6b 			je	$SC1986
	*** 002c79	2c 0d 			sub	al,13
	*** 002c7b	75 03 			jne	$JCC11387
	*** 002c7d	e9 8e 00 		jmp	$SC1983
					$JCC11387:
	*** 002c80	2c 04 			sub	al,4
	*** 002c82	75 03 			jne	$JCC11394
	*** 002c84	e9 8f 00 		jmp	$SC1968
					$JCC11394:
	*** 002c87	e9 92 00 		jmp	$L20154
					$L20105:
	*** 002c8a	3d 12 01 		cmp	ax,274
	*** 002c8d	75 03 			jne	$JCC11405
	*** 002c8f	e9 f4 00 		jmp	$SC1960
					$JCC11405:
	*** 002c92	77 18 			ja	$L20106
	*** 002c94	2d 02 01 		sub	ax,258
	*** 002c97	75 03 			jne	$JCC11415
	*** 002c99	e9 b0 00 		jmp	$SC1969
					$JCC11415:
	*** 002c9c	2d 02 00 		sub	ax,2
	*** 002c9f	72 7b 			jb	$L20154
	*** 002ca1	2d 02 00 		sub	ax,2
	*** 002ca4	77 03 			ja	$JCC11428
	*** 002ca6	e9 b3 00 		jmp	$SC1971
					$JCC11428:
	*** 002ca9	eb 71 			jmp	SHORT $L20154
	*** 002cab	90 			nop	
					$L20106:
	*** 002cac	2d 13 01 		sub	ax,275
	*** 002caf	75 03 			jne	$JCC11439
	*** 002cb1	e9 f6 00 		jmp	$SC1953
					$JCC11439:
	*** 002cb4	2d fc 01 		sub	ax,508
	*** 002cb7	75 03 			jne	$JCC11447
	*** 002cb9	e9 22 01 		jmp	$SC1984
					$JCC11447:
	*** 002cbc	eb 5e 			jmp	SHORT $L20154
;|*** 	case WM_CREATE:
; Line 1652
					$SC1952:
;|*** 		RestartHyperoid();
; Line 1653
	*** 002cbe	e8 eb f8 		call	RESTARTHYPEROID
;|*** 		SetTimer( hWnd, DRAW_TIMER, nDrawDelay, NULL );
; Line 1654
	*** 002cc1	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002cc4	b8 01 00 		mov	ax,1
	*** 002cc7	50 			push	ax
	*** 002cc8	ff 36 00 00 		push	WORD PTR _nDrawDelay
	*** 002ccc	2b c0 			sub	ax,ax
	*** 002cce	50 			push	ax
	*** 002ccf	50 			push	ax
	*** 002cd0	9a 00 00 00 00 		call	FAR PTR SETTIMER
;|*** 		NCPaintHyperoid( hWnd );
; Line 1655
	*** 002cd5	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002cd8	e8 0f fc 		call	NCPAINTHYPEROID
;|*** 		break;
; Line 1656
					$SB1949:
;|*** 
;|*** 	case WM_TIMER:
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case DRAW_TIMER:
;|*** 			CheckScore( hWnd );
;|*** 			DrawObjects( hWnd );
;|*** 			return( 0 );
;|*** 
;|*** 		case RESTART_TIMER:
;|*** 			KillTimer( hWnd, RESTART_TIMER );
;|*** 			bRestart = FALSE;
;|*** 			RestartHyperoid();
;|*** 			return( 0 );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_SYSCOMMAND:
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case IDM_NEW:
;|*** 			NewGame( hWnd );
;|*** 			break;
;|*** 
;|*** 		case IDM_ABOUT:
;|*** 			AboutHyperoid( hWnd );
;|*** 			break;
;|*** 
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_QUERYOPEN:
;|*** 		Panic( FALSE );
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 
;|*** 	case WM_CHAR:
;|*** 		if (wParam == VK_ESCAPE) Panic( TRUE );
;|*** 		break;
;|*** 
;|*** 	case WM_SYSKEYDOWN:
;|*** 	case WM_SYSKEYUP:
;|*** 	case WM_SYSCHAR:
;|*** 		if (lParam & (1L<<29)) // alt key is down
;|*** 		{
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case VK_ESCAPE:
;|*** 			if (message == WM_SYSKEYDOWN) Panic( TRUE );
;|*** 			return( 0 );
;|*** 		case VK_SPACE:
;|*** 		case VK_TAB:
;|*** 			return( 0 );
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_ERASEBKGND:
;|*** 		return( EraseHyperoidBkgnd( hWnd, (HDC)wParam ) );
;|*** 
;|*** 	case WM_NCACTIVATE:
;|*** 	case WM_NCPAINT:
;|*** 		NCPaintHyperoid( hWnd );
;|*** 		return( TRUE );
;|*** 
;|*** 	case WM_PAINT:
;|*** 		PaintHyperoid( hWnd );
;|*** 		break;
;|*** 
;|*** 	case WM_QUERYNEWPALETTE:
;|*** 		{
;|*** 			HDC hDC = GetDC( hWnd );
;|*** 			SelectPalette( hDC, hAppPalette, 0 );
;|*** 			RealizePalette( hDC );
;|*** 			ReleaseDC( hWnd, hDC );
;|*** 		}
;|*** 		return( TRUE );
;|*** 
;|***     case WM_DESTROY:
;|*** 		KillTimer( hWnd, DRAW_TIMER );
;|*** 		KillTimer( hWnd, RESTART_TIMER );
;|*** 		SaveHyperoidWindowPos( hWnd );
;|*** 		PostQuitMessage( 0 );
;|***         break;
;|*** 
;|*** 	default:
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|***     }
;|*** 	return( 0 );
; Line 1749
	*** 002cdb	2b c0 			sub	ax,ax
					$L20159:
	*** 002cdd	99 			cwd	
	*** 002cde	8b e5 			mov	sp,bp
	*** 002ce0	5d 			pop	bp
	*** 002ce1	ca 0a 00 		ret	10
;|***     case WM_DESTROY:
; Line 1739
					$SC1986:
;|*** 		KillTimer( hWnd, DRAW_TIMER );
; Line 1740
	*** 002ce4	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002ce7	b8 01 00 		mov	ax,1
	*** 002cea	50 			push	ax
	*** 002ceb	9a 00 00 00 00 		call	FAR PTR KILLTIMER
;|*** 		KillTimer( hWnd, RESTART_TIMER );
; Line 1741
	*** 002cf0	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002cf3	b8 02 00 		mov	ax,2
	*** 002cf6	50 			push	ax
	*** 002cf7	9a 00 00 00 00 		call	FAR PTR KILLTIMER
;|*** 		SaveHyperoidWindowPos( hWnd );
; Line 1742
	*** 002cfc	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002cff	9a 00 00 00 00 		call	FAR PTR SAVEHYPEROIDWINDOWPOS
;|*** 		PostQuitMessage( 0 );
; Line 1743
	*** 002d04	2b c0 			sub	ax,ax
	*** 002d06	50 			push	ax
	*** 002d07	9a 00 00 00 00 		call	FAR PTR POSTQUITMESSAGE
;|***         break;
; Line 1744
	*** 002d0c	eb cd 			jmp	SHORT $SB1949
;|*** 	case WM_PAINT:
; Line 1726
					$SC1983:
;|*** 		PaintHyperoid( hWnd );
; Line 1727
	*** 002d0e	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002d11	e8 a0 fa 		call	PAINTHYPEROID
;|*** 		break;
; Line 1728
	*** 002d14	eb c5 			jmp	SHORT $SB1949
;|*** 	case WM_QUERYOPEN:
; Line 1690
					$SC1968:
;|*** 		Panic( FALSE );
; Line 1691
	*** 002d16	2b c0 			sub	ax,ax
	*** 002d18	50 			push	ax
	*** 002d19	e8 fc f9 		call	PANIC
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
; Line 1692
					$L20154:
	*** 002d1c	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002d1f	ff 76 0c 		push	WORD PTR [bp+12]	;message
	*** 002d22	ff 76 0a 		push	WORD PTR [bp+10]	;wParam
	*** 002d25	ff 76 08 		push	WORD PTR [bp+8]
	*** 002d28	ff 76 06 		push	WORD PTR [bp+6]	;lParam
	*** 002d2b	9a 00 00 00 00 		call	FAR PTR DEFWINDOWPROC
	*** 002d30	8b e5 			mov	sp,bp
	*** 002d32	5d 			pop	bp
	*** 002d33	ca 0a 00 		ret	10
;|*** 
;|*** 	case WM_CHAR:
;|*** 		if (wParam == VK_ESCAPE) Panic( TRUE );
;|*** 		break;
;|*** 
;|*** 	case WM_SYSKEYDOWN:
;|*** 	case WM_SYSKEYUP:
;|*** 	case WM_SYSCHAR:
;|*** 		if (lParam & (1L<<29)) // alt key is down
;|*** 		{
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case VK_ESCAPE:
;|*** 			if (message == WM_SYSKEYDOWN) Panic( TRUE );
;|*** 			return( 0 );
;|*** 		case VK_SPACE:
;|*** 		case VK_TAB:
;|*** 			return( 0 );
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_ERASEBKGND:
; Line 1718
					$SC1981:
;|*** 		return( EraseHyperoidBkgnd( hWnd, (HDC)wParam ) );
; Line 1719
	*** 002d36	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002d39	ff 76 0a 		push	WORD PTR [bp+10]	;wParam
	*** 002d3c	e8 bf fa 		call	ERASEHYPEROIDBKGND
	*** 002d3f	eb 9c 			jmp	SHORT $L20159
	*** 002d41	90 			nop	
;|*** 
;|*** 	case WM_NCACTIVATE:
; Line 1721
					$SC1982:
;|*** 	case WM_NCPAINT:
;|*** 		NCPaintHyperoid( hWnd );
; Line 1723
	*** 002d42	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002d45	e8 a2 fb 		call	NCPAINTHYPEROID
	*** 002d48	e9 be 00 		jmp	$L20155
	*** 002d4b	90 			nop	
;|*** 	case WM_CHAR:
; Line 1694
					$SC1969:
;|*** 		if (wParam == VK_ESCAPE) Panic( TRUE );
; Line 1695
	*** 002d4c	83 7e 0a 1b 		cmp	WORD PTR [bp+10],27	;wParam
	*** 002d50	75 89 			jne	$SB1949
	*** 002d52	b8 01 00 		mov	ax,1
	*** 002d55	50 			push	ax
	*** 002d56	e8 bf f9 		call	PANIC
;|*** 		break;
; Line 1696
	*** 002d59	e9 7f ff 		jmp	$SB1949
;|*** 
;|*** 	case WM_SYSKEYDOWN:
; Line 1698
					$SC1971:
;|*** 	case WM_SYSKEYUP:
;|*** 	case WM_SYSCHAR:
;|*** 		if (lParam & (1L<<29)) // alt key is down
; Line 1701
	*** 002d5c	f7 46 08 00 20 		test	WORD PTR [bp+8],8192
	*** 002d61	75 b9 			jne	$L20154
;|*** 		{
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		switch (wParam)
; Line 1705
	*** 002d63	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;wParam
;|*** 		{
;|*** 		case VK_ESCAPE:
;|*** 			if (message == WM_SYSKEYDOWN) Panic( TRUE );
;|*** 			return( 0 );
;|*** 		case VK_SPACE:
;|*** 		case VK_TAB:
;|*** 			return( 0 );
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
; Line 1715
	*** 002d66	3d 20 00 		cmp	ax,32
	*** 002d69	74 6e 			je	$L20158
	*** 002d6b	77 af 			ja	$L20154
	*** 002d6d	2c 09 			sub	al,9
	*** 002d6f	74 68 			je	$L20158
	*** 002d71	2c 12 			sub	al,18
	*** 002d73	75 a7 			jne	$L20154
;|*** 			if (message == WM_SYSKEYDOWN) Panic( TRUE );
; Line 1708
	*** 002d75	81 7e 0c 04 01 		cmp	WORD PTR [bp+12],260	;message
	*** 002d7a	75 5d 			jne	$L20158
	*** 002d7c	b8 01 00 		mov	ax,1
	*** 002d7f	50 			push	ax
	*** 002d80	e8 95 f9 		call	PANIC
;|*** 			return( 0 );
; Line 1709
	*** 002d83	eb 54 			jmp	SHORT $L20158
	*** 002d85	90 			nop	
;|*** 	case WM_SYSCOMMAND:
; Line 1674
					$SC1960:
;|*** 		switch (wParam)
; Line 1675
	*** 002d86	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;wParam
;|*** 		{
;|*** 		case IDM_NEW:
;|*** 			NewGame( hWnd );
;|*** 			break;
;|*** 
;|*** 		case IDM_ABOUT:
;|*** 			AboutHyperoid( hWnd );
;|*** 			break;
;|*** 
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
; Line 1687
	*** 002d89	2d c8 00 		sub	ax,200
	*** 002d8c	74 06 			je	$SC1965
	*** 002d8e	48 			dec	ax
	*** 002d8f	74 0d 			je	$SC1966
;|*** 		default:
; Line 1685
	*** 002d91	eb 89 			jmp	SHORT $L20154
	*** 002d93	90 			nop	
;|*** 		case IDM_NEW:
; Line 1677
					$SC1965:
;|*** 			NewGame( hWnd );
; Line 1678
	*** 002d94	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002d97	e8 a8 f7 		call	NEWGAME
;|*** 			break;
; Line 1679
	*** 002d9a	e9 3e ff 		jmp	$SB1949
	*** 002d9d	90 			nop	
;|*** 
;|*** 		case IDM_ABOUT:
; Line 1681
					$SC1966:
;|*** 			AboutHyperoid( hWnd );
; Line 1682
	*** 002d9e	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002da1	9a 00 00 00 00 		call	FAR PTR ABOUTHYPEROID
;|*** 			break;
; Line 1683
	*** 002da6	e9 32 ff 		jmp	$SB1949
	*** 002da9	90 			nop	
;|*** 	case WM_TIMER:
; Line 1658
					$SC1953:
;|*** 		switch (wParam)
; Line 1659
	*** 002daa	8b 46 0a 		mov	ax,WORD PTR [bp+10]	;wParam
;|*** 		{
;|*** 		case DRAW_TIMER:
;|*** 			CheckScore( hWnd );
;|*** 			DrawObjects( hWnd );
;|*** 			return( 0 );
;|*** 
;|*** 		case RESTART_TIMER:
;|*** 			KillTimer( hWnd, RESTART_TIMER );
;|*** 			bRestart = FALSE;
;|*** 			RestartHyperoid();
;|*** 			return( 0 );
;|*** 		}
; Line 1671
	*** 002dad	48 			dec	ax
	*** 002dae	74 06 			je	$SC1958
	*** 002db0	48 			dec	ax
	*** 002db1	74 11 			je	$SC1959
	*** 002db3	e9 25 ff 		jmp	$SB1949
;|*** 		case DRAW_TIMER:
; Line 1661
					$SC1958:
;|*** 			CheckScore( hWnd );
; Line 1662
	*** 002db6	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002db9	e8 ac f4 		call	CHECKSCORE
;|*** 			DrawObjects( hWnd );
; Line 1663
	*** 002dbc	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002dbf	e8 e6 f3 		call	DRAWOBJECTS
;|*** 			return( 0 );
; Line 1664
	*** 002dc2	eb 15 			jmp	SHORT $L20158
;|*** 
;|*** 		case RESTART_TIMER:
; Line 1666
					$SC1959:
;|*** 			KillTimer( hWnd, RESTART_TIMER );
; Line 1667
	*** 002dc4	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002dc7	b8 02 00 		mov	ax,2
	*** 002dca	50 			push	ax
	*** 002dcb	9a 00 00 00 00 		call	FAR PTR KILLTIMER
;|*** 			bRestart = FALSE;
; Line 1668
	*** 002dd0	c7 06 00 00 00 00 	mov	WORD PTR _bRestart,0
;|*** 			RestartHyperoid();
; Line 1669
	*** 002dd6	e8 d3 f7 		call	RESTARTHYPEROID
;|*** 			return( 0 );
; Line 1670
					$L20158:
	*** 002dd9	2b c0 			sub	ax,ax
	*** 002ddb	eb 2f 			jmp	SHORT $L20156
	*** 002ddd	90 			nop	
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_SYSCOMMAND:
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case IDM_NEW:
;|*** 			NewGame( hWnd );
;|*** 			break;
;|*** 
;|*** 		case IDM_ABOUT:
;|*** 			AboutHyperoid( hWnd );
;|*** 			break;
;|*** 
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_QUERYOPEN:
;|*** 		Panic( FALSE );
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 
;|*** 	case WM_CHAR:
;|*** 		if (wParam == VK_ESCAPE) Panic( TRUE );
;|*** 		break;
;|*** 
;|*** 	case WM_SYSKEYDOWN:
;|*** 	case WM_SYSKEYUP:
;|*** 	case WM_SYSCHAR:
;|*** 		if (lParam & (1L<<29)) // alt key is down
;|*** 		{
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		switch (wParam)
;|*** 		{
;|*** 		case VK_ESCAPE:
;|*** 			if (message == WM_SYSKEYDOWN) Panic( TRUE );
;|*** 			return( 0 );
;|*** 		case VK_SPACE:
;|*** 		case VK_TAB:
;|*** 			return( 0 );
;|*** 		default:
;|*** 			return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|*** 		}
;|*** 		break;
;|*** 
;|*** 	case WM_ERASEBKGND:
;|*** 		return( EraseHyperoidBkgnd( hWnd, (HDC)wParam ) );
;|*** 
;|*** 	case WM_NCACTIVATE:
;|*** 	case WM_NCPAINT:
;|*** 		NCPaintHyperoid( hWnd );
;|*** 		return( TRUE );
;|*** 
;|*** 	case WM_PAINT:
;|*** 		PaintHyperoid( hWnd );
;|*** 		break;
;|*** 
;|*** 	case WM_QUERYNEWPALETTE:
; Line 1730
					$SC1984:
;|*** 		{
;|*** 			HDC hDC = GetDC( hWnd );
; Line 1732
	*** 002dde	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002de1	9a 00 00 00 00 		call	FAR PTR GETDC
	*** 002de6	89 46 fe 		mov	WORD PTR [bp-2],ax	;hDC
;|*** 			SelectPalette( hDC, hAppPalette, 0 );
; Line 1733
	*** 002de9	50 			push	ax
	*** 002dea	ff 36 00 00 		push	WORD PTR _hAppPalette
	*** 002dee	2b c0 			sub	ax,ax
	*** 002df0	50 			push	ax
	*** 002df1	9a 00 00 00 00 		call	FAR PTR SELECTPALETTE
;|*** 			RealizePalette( hDC );
; Line 1734
	*** 002df6	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 002df9	9a 00 00 00 00 		call	FAR PTR REALIZEPALETTE
;|*** 			ReleaseDC( hWnd, hDC );
; Line 1735
	*** 002dfe	ff 76 0e 		push	WORD PTR [bp+14]	;hWnd
	*** 002e01	ff 76 fe 		push	WORD PTR [bp-2]	;hDC
	*** 002e04	9a 00 00 00 00 		call	FAR PTR RELEASEDC
;|*** 		}
;|*** 		return( TRUE );
; Line 1737
					$L20155:
	*** 002e09	b8 01 00 		mov	ax,1
					$L20156:
	*** 002e0c	2b d2 			sub	dx,dx
;|*** 
;|***     case WM_DESTROY:
;|*** 		KillTimer( hWnd, DRAW_TIMER );
;|*** 		KillTimer( hWnd, RESTART_TIMER );
;|*** 		SaveHyperoidWindowPos( hWnd );
;|*** 		PostQuitMessage( 0 );
;|***         break;
;|*** 
;|*** 	default:
;|*** 		return( DefWindowProc( hWnd, message, wParam, lParam ) );
;|***     }
;|*** 	return( 0 );
;|*** }
; Line 1750
	*** 002e0e	8b e5 			mov	sp,bp
	*** 002e10	5d 			pop	bp
	*** 002e11	ca 0a 00 		ret	10

HYPEROIDWNDPROC	ENDP
HYPEROID_TEXT      ENDS
CONST      SEGMENT
$T20119	DQ	03f9921fb6134ce3er    ;	2.454369335937500E-02
$T20120	DQ	040d0000000000000r    ;	16384.00000000000
CONST      ENDS
HYPEROID_TEXT      SEGMENT
	ASSUME	CS: HYPEROID_TEXT
;|*** 
;|*** //
;|*** // InitHyperoid - initialize everything
;|*** //
;|*** 
;|*** BOOL NEAR PASCAL InitHyperoid( VOID )
;|*** {
; Line 1757
	PUBLIC	INITHYPEROID
INITHYPEROID	PROC NEAR
	*** 002e14	55 			push	bp
	*** 002e15	8b ec 			mov	bp,sp
	*** 002e17	83 ec 1c 		sub	sp,28
	*** 002e1a	56 			push	si
;	dRad = -10
;	nCnt = -2
;|*** 	DOUBLE          dRad;
;|*** 	INT             nCnt;
;|*** 
;|*** 	// allocate the logical palette
;|*** 	hAppPalette = CreateHyperoidPalette();
; Line 1762
	*** 002e1b	9a 00 00 00 00 		call	FAR PTR CREATEHYPEROIDPALETTE
	*** 002e20	a3 00 00 		mov	WORD PTR _hAppPalette,ax
;|*** 	if (!hAppPalette) return( FALSE );
; Line 1763
	*** 002e23	0b c0 			or	ax,ax
	*** 002e25	75 07 			jne	$I1991
					$L20160:
	*** 002e27	2b c0 			sub	ax,ax
	*** 002e29	5e 			pop	si
	*** 002e2a	8b e5 			mov	sp,bp
	*** 002e2c	5d 			pop	bp
	*** 002e2d	c3 			ret	
;|*** 	for (nCnt = 0; nCnt < PALETTE_SIZE; ++nCnt)
; Line 1764
					$I1991:
	*** 002e2e	c7 46 fe 00 00 		mov	WORD PTR [bp-2],0	;nCnt
	*** 002e33	c7 46 f4 00 00 		mov	WORD PTR [bp-12],OFFSET DGROUP:_hPen
					$F1992:
;|*** 	{
;|*** 		hPen[nCnt] = CreatePen( PS_SOLID, 1, PALETTEINDEX( nCnt ) );
; Line 1766
	*** 002e38	2b c0 			sub	ax,ax
	*** 002e3a	50 			push	ax
	*** 002e3b	b8 01 00 		mov	ax,1
	*** 002e3e	50 			push	ax
	*** 002e3f	b8 00 01 		mov	ax,256
	*** 002e42	50 			push	ax
	*** 002e43	ff 76 fe 		push	WORD PTR [bp-2]	;nCnt
	*** 002e46	9a 00 00 00 00 		call	FAR PTR CREATEPEN
	*** 002e4b	8b 5e f4 		mov	bx,WORD PTR [bp-12]
	*** 002e4e	89 07 			mov	WORD PTR [bx],ax
;|*** 		if (!hPen[nCnt]) return( FALSE );
; Line 1767
	*** 002e50	8b 5e f4 		mov	bx,WORD PTR [bp-12]
	*** 002e53	83 3f 00 		cmp	WORD PTR [bx],0
	*** 002e56	74 cf 			je	$L20160
	*** 002e58	ff 46 fe 		inc	WORD PTR [bp-2]	;nCnt
	*** 002e5b	83 46 f4 02 		add	WORD PTR [bp-12],2
	*** 002e5f	81 7e f4 20 00 		cmp	WORD PTR [bp-12],OFFSET DGROUP:_hPen+32
	*** 002e64	72 d2 			jb	$F1992
	*** 002e66	2b c0 			sub	ax,ax
	*** 002e68	89 46 fe 		mov	WORD PTR [bp-2],ax	;nCnt
	*** 002e6b	89 46 f2 		mov	WORD PTR [bp-14],ax
;|*** 	}
;|*** 	for (nCnt = 0; nCnt < IDB_MAX; ++nCnt)
; Line 1769
					$F1996:
;|*** 	{
;|*** 		hBitmap[nCnt] = LoadBitmap( hAppInst, INTRES(IDB_blank + nCnt) );
; Line 1771
	*** 002e6e	ff 36 00 00 		push	WORD PTR _hAppInst
	*** 002e72	8b 46 fe 		mov	ax,WORD PTR [bp-2]	;nCnt
	*** 002e75	05 32 00 		add	ax,50
	*** 002e78	2b d2 			sub	dx,dx
	*** 002e7a	52 			push	dx
	*** 002e7b	50 			push	ax
	*** 002e7c	9a 00 00 00 00 		call	FAR PTR LOADBITMAP
	*** 002e81	8b 5e f2 		mov	bx,WORD PTR [bp-14]
	*** 002e84	89 87 00 00 		mov	WORD PTR _hBitmap[bx],ax
;|*** 		if (!hPen[nCnt]) return( FALSE );
; Line 1772
	*** 002e88	8b 5e f2 		mov	bx,WORD PTR [bp-14]
	*** 002e8b	83 bf 00 00 00 		cmp	WORD PTR _hPen[bx],0
	*** 002e90	74 95 			je	$L20160
	*** 002e92	ff 46 fe 		inc	WORD PTR [bp-2]	;nCnt
	*** 002e95	83 46 f2 02 		add	WORD PTR [bp-14],2
	*** 002e99	83 7e f2 22 		cmp	WORD PTR [bp-14],34
	*** 002e9d	7c cf 			jl	$F1996
;|*** 	}
;|*** 
;|*** 	// seed the randomizer
;|*** 	dwSeed = GetCurrentTime();
; Line 1776
	*** 002e9f	9a 00 00 00 00 		call	FAR PTR GETCURRENTTIME
	*** 002ea4	a3 32 00 		mov	WORD PTR $S1346_dwSeed,ax
	*** 002ea7	89 16 34 00 		mov	WORD PTR $S1346_dwSeed+2,dx
	*** 002eab	2b c0 			sub	ax,ax
	*** 002ead	89 46 fe 		mov	WORD PTR [bp-2],ax	;nCnt
	*** 002eb0	89 46 f0 		mov	WORD PTR [bp-16],ax
;|*** 
;|*** 	// create the lookup table (should use resources)
;|*** 	for (nCnt = 0; nCnt < DEGREE_SIZE; ++nCnt)
; Line 1779
					$F2000:
;|*** 	{
;|*** 		dRad = nCnt * 6.2831855 / DEGREE_SIZE;
;|*** 		nCos[nCnt] = (INT)(DEGREE_MAX * cos( dRad ));
; Line 1782
	*** 002eb3	9b df 46 fe 		fild	WORD PTR [bp-2]	;nCnt
	*** 002eb7	9b dc 0e 00 00 		fmul	QWORD PTR $T20119
	*** 002ebc	9b dd 56 e4 		fst	QWORD PTR [bp-28]
	*** 002ec0	83 ec 08 		sub	sp,8
	*** 002ec3	8b dc 			mov	bx,sp
	*** 002ec5	9b dd 1f 		fstp	QWORD PTR [bx]
	*** 002ec8	90 9b 			fwait	
	*** 002eca	9a 00 00 00 00 		call	FAR PTR _cos
	*** 002ecf	83 c4 08 		add	sp,8
	*** 002ed2	8b d8 			mov	bx,ax
	*** 002ed4	9b dd 07 		fld	QWORD PTR [bx]
	*** 002ed7	9b dc 0e 08 00 		fmul	QWORD PTR $T20120
	*** 002edc	9a 00 00 00 00 		call	FAR PTR __aFftol
	*** 002ee1	8b 5e f0 		mov	bx,WORD PTR [bp-16]
	*** 002ee4	89 87 00 00 		mov	WORD PTR _nCos[bx],ax
;|*** 		nSin[nCnt] = (INT)(DEGREE_MAX * sin( dRad ));
; Line 1783
	*** 002ee8	9b dd 46 e4 		fld	QWORD PTR [bp-28]
	*** 002eec	83 ec 08 		sub	sp,8
	*** 002eef	8b dc 			mov	bx,sp
	*** 002ef1	9b dd 1f 		fstp	QWORD PTR [bx]
	*** 002ef4	90 9b 			fwait	
	*** 002ef6	9a 00 00 00 00 		call	FAR PTR _sin
	*** 002efb	83 c4 08 		add	sp,8
	*** 002efe	8b d8 			mov	bx,ax
	*** 002f00	9b dd 07 		fld	QWORD PTR [bx]
	*** 002f03	9b dc 0e 08 00 		fmul	QWORD PTR $T20120
	*** 002f08	9a 00 00 00 00 		call	FAR PTR __aFftol
	*** 002f0d	8b 5e f0 		mov	bx,WORD PTR [bp-16]
	*** 002f10	89 87 00 00 		mov	WORD PTR _nSin[bx],ax
;|*** 	for (nCnt = 0; nCnt < DEGREE_SIZE; ++nCnt)
; Line 1779
	*** 002f14	ff 46 fe 		inc	WORD PTR [bp-2]	;nCnt
	*** 002f17	83 46 f0 02 		add	WORD PTR [bp-16],2
	*** 002f1b	81 7e f0 00 02 		cmp	WORD PTR [bp-16],512
	*** 002f20	7c 91 			jl	$F2000
;|*** 	{
;|*** 		dRad = nCnt * 6.2831855 / DEGREE_SIZE;
;|*** 		nCos[nCnt] = (INT)(DEGREE_MAX * cos( dRad ));
;|*** 		nSin[nCnt] = (INT)(DEGREE_MAX * sin( dRad ));
;|*** 	}
;|*** 
;|*** 	// get the initialization file info
;|*** 	GetHyperoidIni();
; Line 1787
	*** 002f22	9a 00 00 00 00 		call	FAR PTR GETHYPEROIDINI
	*** 002f27	c7 46 ee 00 00 		mov	WORD PTR [bp-18],OFFSET DGROUP:_Obj
;|*** 
;|*** 	// allocate all objects as free
;|*** 	for (nCnt = 0; nCnt < MAX_OBJS; ++nCnt)
; Line 1790
					$F2003:
;|*** 		AddHeadObj( &FreeList, &(Obj[nCnt]) );
; Line 1791
	*** 002f2c	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 002f2f	50 			push	ax
	*** 002f30	ff 76 ee 		push	WORD PTR [bp-18]
	*** 002f33	e8 2c d1 		call	ADDHEAD
	*** 002f36	83 46 ee 58 		add	WORD PTR [bp-18],88
	*** 002f3a	81 7e ee 60 22 		cmp	WORD PTR [bp-18],OFFSET DGROUP:_Obj+8800
	*** 002f3f	72 eb 			jb	$F2003
;|*** 
;|*** 	// set up the player
;|*** 	npPlayer = RemHeadObj( &FreeList );
; Line 1794
	*** 002f41	b8 00 00 		mov	ax,OFFSET DGROUP:_FreeList
	*** 002f44	50 			push	ax
	*** 002f45	e8 5c d1 		call	REMHEAD
	*** 002f48	a3 00 00 		mov	WORD PTR _npPlayer,ax
;|*** 	npPlayer->byPts = DIM(Player);
; Line 1795
	*** 002f4b	8b d8 			mov	bx,ax
	*** 002f4d	c6 47 17 05 		mov	BYTE PTR [bx+23],5
;|*** 	npPlayer->nMass = 256;
; Line 1796
	*** 002f51	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002f55	c7 47 0c 00 01 		mov	WORD PTR [bx+12],256
	*** 002f5a	c7 46 ec 00 00 		mov	WORD PTR [bp-20],0
;|*** 	for (nCnt = 0; nCnt < DIM(Player); ++nCnt)
; Line 1797
					$F2006:
;|*** 		npPlayer->Pts[nCnt] = Player[nCnt];
; Line 1798
	*** 002f5f	8b 5e ec 		mov	bx,WORD PTR [bp-20]
	*** 002f62	8b 87 00 00 		mov	ax,WORD PTR $S1351_Player[bx]
	*** 002f66	8b 97 02 00 		mov	dx,WORD PTR $S1351_Player[bx+2]
	*** 002f6a	8b 1e 00 00 		mov	bx,WORD PTR _npPlayer
	*** 002f6e	8b 76 ec 		mov	si,WORD PTR [bp-20]
	*** 002f71	89 40 18 		mov	WORD PTR [bx+24][si],ax
	*** 002f74	89 50 1a 		mov	WORD PTR [bx+26][si],dx
	*** 002f77	83 46 ec 04 		add	WORD PTR [bp-20],4
	*** 002f7b	83 7e ec 14 		cmp	WORD PTR [bp-20],20
	*** 002f7f	7c de 			jl	$F2006
;|*** 
;|*** 	return( TRUE );
; Line 1800
	*** 002f81	b8 01 00 		mov	ax,1
;|*** }
; Line 1801
	*** 002f84	5e 			pop	si
	*** 002f85	8b e5 			mov	sp,bp
	*** 002f87	5d 			pop	bp
	*** 002f88	c3 			ret	
	*** 002f89	90 			nop	

INITHYPEROID	ENDP
;|*** 
;|*** //
;|*** // ExitHyperoid - quit the damn game already!
;|*** //
;|*** 
;|*** VOID NEAR PASCAL ExitHyperoid( VOID )
;|*** {
; Line 1808
	PUBLIC	EXITHYPEROID
EXITHYPEROID	PROC NEAR
	*** 002f8a	55 			push	bp
	*** 002f8b	8b ec 			mov	bp,sp
	*** 002f8d	83 ec 06 		sub	sp,6
;	nCnt = -2
;|*** 	INT             nCnt;
;|*** 
;|*** 	if (hAppPalette) DeleteObject( hAppPalette );
; Line 1811
	*** 002f90	83 3e 00 00 00 		cmp	WORD PTR _hAppPalette,0
	*** 002f95	74 09 			je	$I2011
	*** 002f97	ff 36 00 00 		push	WORD PTR _hAppPalette
	*** 002f9b	9a 00 00 00 00 		call	FAR PTR DELETEOBJECT
;|*** 	for (nCnt = 0; nCnt < PALETTE_SIZE; ++nCnt)
; Line 1812
					$I2011:
	*** 002fa0	c7 46 fc 00 00 		mov	WORD PTR [bp-4],OFFSET DGROUP:_hPen
					$F2012:
;|*** 		if (hPen[nCnt]) DeleteObject( hPen[nCnt] );
; Line 1813
	*** 002fa5	8b 5e fc 		mov	bx,WORD PTR [bp-4]
	*** 002fa8	83 3f 00 		cmp	WORD PTR [bx],0
	*** 002fab	74 07 			je	$FC2013
	*** 002fad	ff 37 			push	WORD PTR [bx]
	*** 002faf	9a 00 00 00 00 		call	FAR PTR DELETEOBJECT
;|*** 	for (nCnt = 0; nCnt < PALETTE_SIZE; ++nCnt)
; Line 1812
					$FC2013:
	*** 002fb4	83 46 fc 02 		add	WORD PTR [bp-4],2
	*** 002fb8	81 7e fc 20 00 		cmp	WORD PTR [bp-4],OFFSET DGROUP:_hPen+32
	*** 002fbd	72 e6 			jb	$F2012
;|*** 		if (hPen[nCnt]) DeleteObject( hPen[nCnt] );
;|*** 	for (nCnt = 0; nCnt < IDB_MAX; ++nCnt)
; Line 1814
	*** 002fbf	c7 46 fa 00 00 		mov	WORD PTR [bp-6],OFFSET DGROUP:_hBitmap
					$F2016:
;|*** 		if (hBitmap[nCnt]) DeleteObject( hBitmap[nCnt] );
; Line 1815
	*** 002fc4	8b 5e fa 		mov	bx,WORD PTR [bp-6]
	*** 002fc7	83 3f 00 		cmp	WORD PTR [bx],0
	*** 002fca	74 07 			je	$FC2017
	*** 002fcc	ff 37 			push	WORD PTR [bx]
	*** 002fce	9a 00 00 00 00 		call	FAR PTR DELETEOBJECT
;|*** 	for (nCnt = 0; nCnt < IDB_MAX; ++nCnt)
; Line 1814
					$FC2017:
	*** 002fd3	83 46 fa 02 		add	WORD PTR [bp-6],2
	*** 002fd7	81 7e fa 22 00 		cmp	WORD PTR [bp-6],OFFSET DGROUP:_hBitmap+34
	*** 002fdc	72 e6 			jb	$F2016
;|*** 		if (hBitmap[nCnt]) DeleteObject( hBitmap[nCnt] );
;|*** }
; Line 1816
	*** 002fde	8b e5 			mov	sp,bp
	*** 002fe0	5d 			pop	bp
	*** 002fe1	c3 			ret	

EXITHYPEROID	ENDP
;|*** 
;|*** //
;|*** // WinMain - everybody has to have one
;|*** //
;|*** 
;|*** INT FAR PASCAL WinMain( HANDLE hInstance, HANDLE hPrevInstance,
;|*** 						LPSTR lpszCmdLine, INT nCmdShow )
;|*** {
; Line 1824
	PUBLIC	WINMAIN
WINMAIN	PROC FAR
	*** 002fe2	55 			push	bp
	*** 002fe3	8b ec 			mov	bp,sp
	*** 002fe5	83 ec 12 		sub	sp,18
;	hInstance = 14
;	hPrevInstance = 12
;	lpszCmdLine = 8
;	nCmdShow = 6
;	msg = -18
;|*** 	MSG         msg;
;|*** 
;|*** 	hAppInst = hInstance;
; Line 1827
	*** 002fe8	8b 46 0e 		mov	ax,WORD PTR [bp+14]	;hInstance
	*** 002feb	a3 00 00 		mov	WORD PTR _hAppInst,ax
;|*** 	if (!hPrevInstance)
; Line 1828
	*** 002fee	83 7e 0c 00 		cmp	WORD PTR [bp+12],0	;hPrevInstance
	*** 002ff2	75 12 			jne	$I2026
;|*** 	{
;|*** 		// create the class if we're first
;|*** 		if (!CreateHyperoidClass()) return( FALSE );
; Line 1831
	*** 002ff4	9a 00 00 00 00 		call	FAR PTR CREATEHYPEROIDCLASS
	*** 002ff9	0b c0 			or	ax,ax
	*** 002ffb	75 19 			jne	$I2028
					$L20161:
	*** 002ffd	2b c0 			sub	ax,ax
	*** 002fff	8b e5 			mov	sp,bp
	*** 003001	5d 			pop	bp
	*** 003002	ca 0a 00 		ret	10
	*** 003005	90 			nop	
;|*** 	}
;|*** 	else
; Line 1833
					$I2026:
;|*** 	{
;|*** 		// Copy data from previous instance
;|*** 		GetInstanceData( hPrevInstance, (PSTR)szAppName, sizeof(szAppName) );
; Line 1836
	*** 003006	ff 76 0c 		push	WORD PTR [bp+12]	;hPrevInstance
	*** 003009	b8 00 00 		mov	ax,OFFSET DGROUP:_szAppName
	*** 00300c	50 			push	ax
	*** 00300d	b8 20 00 		mov	ax,32
	*** 003010	50 			push	ax
	*** 003011	9a 00 00 00 00 		call	FAR PTR GETINSTANCEDATA
;|*** 	}
; Line 1837
					$I2028:
;|*** 	if (!InitHyperoid()) goto Abort; // I LOVE GOTOS! REALLY I DO!
; Line 1838
	*** 003016	e8 fb fd 		call	INITHYPEROID
	*** 003019	0b c0 			or	ax,ax
	*** 00301b	74 4f 			je	$Abort2030
;|*** 	hAppWnd = CreateHyperoidWindow( lpszCmdLine, nCmdShow );
; Line 1839
	*** 00301d	ff 76 0a 		push	WORD PTR [bp+10]
	*** 003020	ff 76 08 		push	WORD PTR [bp+8]	;lpszCmdLine
	*** 003023	ff 76 06 		push	WORD PTR [bp+6]	;nCmdShow
	*** 003026	9a 00 00 00 00 		call	FAR PTR CREATEHYPEROIDWINDOW
	*** 00302b	a3 00 00 		mov	WORD PTR _hAppWnd,ax
;|*** 	if (!hAppWnd) return( FALSE );
; Line 1840
	*** 00302e	0b c0 			or	ax,ax
	*** 003030	74 cb 			je	$L20161
;|*** 
;|*** 	while (GetMessage( &msg, NULL, 0, 0 ))
; Line 1842
	*** 003032	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;msg
	*** 003035	16 			push	ss
	*** 003036	50 			push	ax
	*** 003037	2b c0 			sub	ax,ax
	*** 003039	50 			push	ax
	*** 00303a	50 			push	ax
	*** 00303b	50 			push	ax
	*** 00303c	9a 00 00 00 00 		call	FAR PTR GETMESSAGE
	*** 003041	0b c0 			or	ax,ax
	*** 003043	74 27 			je	$Abort2030
					$FC2033:
;|*** 	{
;|*** 		TranslateMessage( &msg );
; Line 1844
	*** 003045	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;msg
	*** 003048	16 			push	ss
	*** 003049	50 			push	ax
	*** 00304a	9a 00 00 00 00 		call	FAR PTR TRANSLATEMESSAGE
;|*** 		DispatchMessage( &msg );
; Line 1845
	*** 00304f	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;msg
	*** 003052	16 			push	ss
	*** 003053	50 			push	ax
	*** 003054	9a 00 00 00 00 		call	FAR PTR DISPATCHMESSAGE
;|*** 	}
; Line 1846
	*** 003059	8d 46 ee 		lea	ax,WORD PTR [bp-18]	;msg
	*** 00305c	16 			push	ss
	*** 00305d	50 			push	ax
	*** 00305e	2b c0 			sub	ax,ax
	*** 003060	50 			push	ax
	*** 003061	50 			push	ax
	*** 003062	50 			push	ax
	*** 003063	9a 00 00 00 00 		call	FAR PTR GETMESSAGE
	*** 003068	0b c0 			or	ax,ax
	*** 00306a	75 d9 			jne	$FC2033
;|*** 
;|*** Abort:
; Line 1848
					$Abort2030:
;|*** 	ExitHyperoid();
; Line 1849
	*** 00306c	e8 1b ff 		call	EXITHYPEROID
;|*** 	return( msg.wParam );
; Line 1850
	*** 00306f	8b 46 f2 		mov	ax,WORD PTR [bp-14]
;|*** }
; Line 1851
	*** 003072	8b e5 			mov	sp,bp
	*** 003074	5d 			pop	bp
	*** 003075	ca 0a 00 		ret	10

WINMAIN	ENDP
HYPEROID_TEXT	ENDS
END
